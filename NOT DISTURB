                                                CALL OF DUTY 
                                                 MW3 , WARZONE 
                                                 PAMELA 0 V1.0
         ------------------------------------------------------------------------------------------------------------------------------


            CREADOR = PAMELA 0 
            CREDITOS = MEJORES EN 4/TO MW3 - CRONUS COMINITY 
            ----------------------------------------------------------------------------------------------------------------------------

/*=========================================================================================================================================
INSTRODUCION  por favor leer 
==========================================================================================================================================
/*------------------------------------------------LEER INSTRODUCION---------------------------------------------------------------------

MENU DE NAVEGACION
=========================================================================================================================================
ENTRADA AL MENU                                                      = L2 & OPCIONES
------------------------------------------------------------------------------------------------------------------------------------------ 
SALIR DEL MENU (MI MENU - EDICION DE MENU -MODIFICACION DE MENU)     = CIRCULO / B 
-----------------------------------------------------------------------------------------------------------------------------------------
ENTRAR AL MENU PARA AJUSTAR VALORES                                  = X / A
-----------------------------------------------------------------------------------------------------------------------------------------
CAMBIAR PERFINES (PRIMARIA - SECUNDARIA - WARZONE)                   = TRIANGULO / Y 
----------------------------------------------------------------------------------------------------------------------------------------
NAVEGAR EN EL MENU DE CATEGORIAS                                     = CRUSETA ARRIBA / CRUSETA ABAJO
-----------------------------------------------------------------------------------------------------------------------------------------
NAVEGAR POR EL MENU DE MODIFICACIONES / EDITAR MENU                  =CRUSETA DERECHA / CRUSETA IZQUIERDA 
------------------------------------------------------------------------------------------------------------------------------------------
ACTIVAR MODOS                                                        = CRUSETA ARRIBA / CRUSETA ABAJO 
-----------------------------------------------------------------------------------------------------------------------------------------
CAMBIAR VALORES EN EL MENU DE EDICIONES                              = SOSTENER L2 & CRUSETA ARRIBA/ABAJO/DERECHA/IZQUIERDA
----------------------------------------------------------------------------------------------------------------------------------------
ELEGIR TUS PROPIOS BOTONES PARA PERFILES/ CAMBIO RAPIDO              = SOSTENER L2 & CRUSETA DERECHA / CRUSETA IZQUIERDA 
----------------------------------------------------------------------------------------------------------------------------------------

=============================================================================================================================================
MENU DE RETROCESO AGREGADO EN EL SCRIPT
============================================================================================================================================

EL MENU DE RETROCESO ES PARA TU BENFICIO ! SI QUIERS AJUSTAR EL RETROCESO MIENTRAS JUEGAS , PUEDES HACERLO !
UNA VEZ QUE INGRESAS AL MENU PUEDES DEJARLO ABIERTO !MIENTRAS CONFIGURAS EL ARMA DESEADA ! DEBES RECORDAR :
QUE SI NO AJUSTAS NINGUN VALOR EN 10 SEGUNDOS SALDRAS DEL MENU AUTOMATICAMENTE! 
ESTO TE AHORRA TENER QUE PREOCUPARTE POR SALIR DEL MENU EN MEDIO DE LA BATALLA!
--------------------------------------------------------------------------------------------------------------------------------------------
ENTRAR / SALIR DEL MENU DE RETROCESO                                      = MATENER L2 & BOTON DE COMPARTIR/ MENU 
------------------------------------------------------------------------------------------------------------------------------------------
AJUSTAR VALORES EN EL MENU DE RETROCESO                                   = MANTENER L2 & CRUSETA ARRIBA/ ABAJO/ IZQUIERDA / DERECHA 
(SI NO PRECIONAS NINGUN BOTON EN LOS PROXIMOS 10 SEGUNDOS ,SALDRAS DEL MENU) 
------------------------------------------------------------------------------------------------------------------------------------------
==========================================================================================================================================
FUERA DEL MENU OLED
==========================================================================================================================================
SI NECESITAS USAR UN KILLSWITCH PARA EL SCRIPT!
HABILITAR EL MODO DE CONDUCION.ESTO ELIMINARA EL SCRIPT . LO QUE DETENDRA EL FUNCIONAMIENTO DE LOS MODOS  
-------------------------------------------------------------------------------------------------------------------------------------------
ACTIVAR / DESACTIVAR EL MODO DE CONDUCION                              =MANTENER R2 & TOCAR DOS VECES HACIA LA DERECHA/RECIONAR EL CUADRO PARA DESACTIVAR
------------------------------------------------------------------------------------------------------------------------------------------------------
FIN DE LAS INSTRUCCIONES                     -PUEDES JUGAR CON EL SCRIPT ^ MUCHA SUERTE ^
=====================================================================================================================================================
const int16 pollarArr[] =
{ 23170,  23167,  23156,  23139,  23114,  23082,  23044,  22998,  22945,  22885,  22818,  22745,  22664,  22577,  22482,  22381,  22273,  22158,  22036,  21908,  21773,  21632,  21483,  21329,  21167,  21000,  20825,  20645,  20458,  20265,  20066,  19861,  19650,  19432,  19209,  18980,  18745,  18505,  18259,  18007,  17750,  17487,  17219,  16946,  16667,  16384,  16096,  15802,  15504,  15201,  14894,  14582,  14265,  13944,  13619,  13290,  12957,  12620,  12278,  11934,  11585,  11233,  10878,  10519,  10157,  9792,  9424,  9053,  8680,  8304,  7925,  7544,  7160,  6774,  6387,  5997,  5605,  5212,  4817,  4421,  4024,  3625,  3225,  2824,  2422,  2019,  1616,  1213,  809,  404,  00,  -404,  -809,  -1213,  -1616,  -2019,  -2422,  -2824,  -3225,  -3625,  -4024,  -4421,  -4817,  -5212,  -5605,  -5997,  -6387,  -6774,  -7160,  -7544,  -7925,  -8304,  -8680,  -9053,  -9424,  -9792,  -10157,  -10519,  -10878,  -11233,  -11585,  -11934,  -12278,  -12620,  -12957,  -13290,  -13619,  -13944,  -14265,  -14582,  -14894,  -15201,  -15504,  -15802,  -16096,  -16384,  -16667,  -16946,  -17219,  -17487,  -17750,  -18007,  -18259,  -18505,  -18745,  -18980,  -19209,  -19432,  -19650,  -19861,  -20066,  -20265,  -20458,  -20645,  -20825,  -21000,  -21167,  -21329,  -21483,  -21632,  -21773,  -21908,  -22036,  -22158,  -22273,  -22381,  -22482,  -22577,  -22664,  -22745,  -22818,  -22885,  -22945,  -22998,  -23044,  -23082,  -23114,  -23139,  -23156,  -23167,  -23170,  -23167,  -23156,  -23139,  -23114,  -23082,  -23044,  -22998,  -22945,  -22885,  -22818,  -22745,  -22664,  -22577,  -22482,  -22381,  -22273,  -22158,  -22036,  -21908,  -21773,  -21632,  -21483,  -21329,  -21167,  -21000,  -20825,  -20645,  -20458,  -20265,  -20066,  -19861,  -19650,  -19432,  -19209,  -18980,  -18745,  -18505,  -18259,  -18007,  -17750,  -17487,  -17219,  -16946,  -16667,  -16384,  -16096,  -15802,  -15504,  -15201,  -14894,  -14582,  -14265,  -13944,  -13619,  -13290,  -12957,  -12620,  -12278,  -11934,  -11585,  -11233,  -10878,  -10519,  -10157,  -9792,  -9424,  -9053,  -8680,  -8304,  -7925,  -7544,  -7160,  -6774,  -6387,  -5997,  -5605,  -5212,  -4817,  -4421,  -4024,  -3625,  -3225,  -2824,  -2422,  -2019,  -1616,  -1213,  -809,  -404,  00,  404,  809,  1213,  1616,  2019,  2422,  2824,  3225,  3625,  4024,  4421,  4817,  5212,  5605,  5997,  6387,  6774,  7160,  7544,  7925,  8304,  8680,  9053,  9424,  9792,  10157,  10519,  10878,  11233,  11585,  11934,  12278,  12620,  12957,  13290,  13619,  13944,  14265,  14582,  14894,  15201,  15504,  15802,  16096,  16384,  16667,  16946,  17219,  17487,  17750,  18007,  18259,  18505,  18745,  18980,  19209,  19432,  19650,  19861,  20066,  20265,  20458,  20645,  20825,  21000,  21167,  21329,  21483,  21632,  21773,  21908,  22036,  22158,  22273,  22381,  22482,  22577,  22664,  22745,  22818,  22885,  22945,  22998,  23044,  23082,  23114,  23139,  23156,  23167,  23170 };
const int16 linearArr[] = { -23170, -22913, -22655, -22398, -22140, -21883, -21625, -21368, -21110, -20853, -20596, -20338, -20081, -19823, -19566, -19308, -19051, -18793, -18536, -18279, -18021, -17764, -17506, -17249, -16991, -16734, -16476, -16219, -15962, -15704, -15447, -15189, -14932, -14674, -14417, -14159, -13902, -13645, -13387, -13130, -12872, -12615, -12357, -12100, -11842, -11585, -11328, -11070, -10813, -10555, -10298, -10040, -9783, -9525, -9268, -9011, -8753, -8496, -8238, -7981, -7723, -7466, -7208, -6951, -6694, -6436, -6179, -5921, -5664, -5406, -5149, -4891, -4634, -4377, -4119, -3862, -3604, -3347, -3089, -2832, -2574, -2317, -2060, -1802, -1545, -1287, -1030, -772, -515, 257, 257, 515, 772, 1030, 1287, 1545, 1802, 2060, 2317, 2574, 2832, 3089, 3347, 3604, 3862, 4119, 4377, 4634, 4891, 5149, 5406, 5664, 5921, 6179, 6436, 6694, 6951, 7208, 7466, 7723, 7981, 8238, 8496, 8753, 9011, 9268, 9525, 9783, 10040, 10298, 10555, 10813, 11070, 11328, 11585, 11842, 12100, 12357, 12615, 12872, 13130, 13387, 13645, 13902, 14159, 14417, 14674, 14932, 15189, 15447, 15704, 15962, 16219, 16476, 16734, 16991, 17249, 17506, 17764, 18021, 18279, 18536, 18793, 19051, 19308, 19566, 19823, 20081, 20338, 20596, 20853, 21110, 21368, 21625, 21883, 22140, 22398, 22655, 22913, 23170, 23170, 22913, 22655, 22398, 22140, 21883, 21625, 21368, 21110, 20853, 20596, 20338, 20081, 19823, 19566, 19308, 19051, 18793, 18536, 18279, 18021, 17764, 17506, 17249, 16991, 16734, 16476, 16219, 15962, 15704, 15447, 15189, 14932, 14674, 14417, 14159, 13902, 13645, 13387, 13130, 12872, 12615, 12357, 12100, 11842, 11585, 11328, 11070, 10813, 10555, 10298, 10040, 9783, 9525, 9268, 9011, 8753, 8496, 8238, 7981, 7723, 7466, 7208, 6951, 6694, 6436, 6179, 5921, 5664, 5406, 5149, 4891, 4634, 4377, 4119, 3862, 3604, 3347, 3089, 2832, 2574, 2317, 2060, 1802, 1545, 1287, 1030, 772, 515, 257, -257, -515, -772, -1030, -1287, -1545, -1802, -2060, -2317, -2574, -2832, -3089, -3347, -3604, -3862, -4119, -4377, -4634, -4891, -5149, -5406, -5664, -5921, -6179, -6436, -6694, -6951, -7208, -7466, -7723, -7981, -8238, -8496, -8753, -9011, -9268, -9525, -9783, -10040, -10298, -10555, -10813, -11070, -11328, -11585, -11842, -12100, -12357, -12615, -12872, -13130, -13387, -13645, -13902, -14159, -14417, -14674, -14932, -15189, -15447, -15704, -15962, -16219, -16476, -16734, -16991, -17249, -17506, -17764, -18021, -18279, -18536, -18793, -19051, -19308, -19566, -19823, -20081, -20338, -20596, -20853, -21110, -21368, -21625, -21883, -22140, -22398, -22655, -22913, -23170};
init {  
Load();
innerSpiral = radiusSize[profileIdx];  
outerSpiral = radiusSize[profileIdx]; 
} 
main { 
    Buttons(buttonLayouts);
    ControllerRSLS(stickLayouts);
    ActivateAllButtons(); 
    RemapButtonsConfig();
	UnmapButtonsConfig(); 
	if(get_console() == PIO_PS4){
        if(get_controller() != PIO_PS4){
            if(get_ival(PS4_SHARE)){
                if(get_ival(PS4_R3)){
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
                }
                else{
                    set_val(PS4_TOUCH, 100);
                    set_val(PS4_SHARE, 0);
                }
            }
        }
    }
    else if(swapPS4Btns){
    	swap(PS4_TOUCH, PS4_SHARE);
    }
	if(update){ 
		getAdminValues();
	} 
    /* Enter Mod Menu */
    if(get_ival(Ads)){ 
        if(event_press(PS4_OPTIONS)){ 
            mainMenu = TRUE; // Enter Main Menu 
            updateDisplay = TRUE;
            displayTitle = FALSE;
            recoilEdit = FALSE;
            /* If NOT in main Menu - Display Title Screen Instead */
            if(!mainMenu){  // if Not main menu - display title - 
                displayTitle = TRUE;
            } 
        }
        if(event_press(PS4_SHARE)){ 
			recoilEdit =! recoilEdit;
			updateDisplay = TRUE;
			menuTimeOut   = activeMenuTime;
			
			if(recoilEdit){ 
				displayTitle = FALSE;
				modMenu = FALSE;
				mainMenu = FALSE;
			} 
			if(!recoilEdit){ 
				recoilEdit = FALSE;
				updateDisplay = FALSE;
				displayTitle = TRUE;
				mainMenu = FALSE;
				modMenu = FALSE;
				Save();
			} 
		} 
        set_val(PS4_OPTIONS,0);set_val(PS4_SHARE,0);
    }
    /* If We are NOT on the Display Title - We are in The Mod Menu OR Edit Menu */
    if(!displayTitle){ 
        /* Mod Menu Navigation / Toggles */
        if(mainMenu || modMenu || editMenu || recoilEdit){ 
			if(setLedColour[profileIdx]){
				set_hsb(getColour[profileIdx],100,100);
			}
			else { 
				set_ledx(profileIdx,2);
			} 
		}
        /*
        ==================================================================
        MAIN MENU ONLY SECTION - MAIN MENU NAVIGATION 
        ==================================================================
        */
        if(mainMenu){ 
            mainNameIdx = menuNavigation(mainNameIdx,0,maxAmountOfCategories);
            vm_tctrl(0);
            menuScroll();
        }    
        if(modMenu){
            vm_tctrl(0);    
            modNameIdx = menuNavigation(modNameIdx,mainMenuLimits[mainNameIdx][0],mainMenuLimits[mainNameIdx][1]);
			antiRecoilBasic[profileIdx]      = toggleSwitch(antiRecoilBasic[profileIdx]      ,0  );// 0 
			antiRecoilPolar[profileIdx]      = toggleSwitch(antiRecoilPolar[profileIdx]      ,1  );// 1 
			antiRecoilAdvanced[profileIdx]   = toggleSwitch(antiRecoilAdvanced[profileIdx]   ,2  );// 2 
			adminAimAssistValues[profileIdx] = toggleSwitch(adminAimAssistValues[profileIdx] ,3  );// 3 
			aimAssist[profileIdx]            = toggleSwitch(aimAssist[profileIdx]            ,4  );// 4 
			rotationalAA[profileIdx]         = toggleSwitch(rotationalAA[profileIdx]         ,5  );// 5 
			toggleRapidFire[profileIdx]      = toggleSwitch(toggleRapidFire[profileIdx]      ,6  );// 6 
			toggleAkimbo[profileIdx]         = toggleSwitch(toggleAkimbo[profileIdx]         ,7  );// 7 
			toggleBurstFire[profileIdx]      = toggleSwitch(toggleBurstFire[profileIdx]      ,8  );// 6 
			dropShotmw2[profileIdx]          = toggleSwitch(dropShotmw2[profileIdx]          ,9  );// 8 
			mw2SnakeShot[profileIdx]         = toggleSwitch(mw2SnakeShot[profileIdx]         ,10  );// 9 
			crouchShot[profileIdx]           = toggleSwitch(crouchShot[profileIdx]           ,11 );// 10
			jumpShot[profileIdx]             = toggleSwitch(jumpShot[profileIdx]             ,12 );// 11
			autoAim[profileIdx]              = toggleSwitch(autoAim[profileIdx]              ,13 );// 12
			enemyPing                        = toggleSwitch(enemyPing                        ,14 );// 13
			holdBreath[profileIdx]           = toggleSwitch(holdBreath[profileIdx]           ,15 );// 14
			quickScope[profileIdx]           = toggleSwitch(quickScope[profileIdx]           ,16 );// 15
			silentShot[profileIdx]           = toggleSwitch(silentShot[profileIdx]           ,17 );// 16
			mw2GWalk                         = toggleSwitch(mw2GWalk                         ,18 );// 17
			cancelSlideMw2                   = toggleSwitch(cancelSlideMw2                   ,19 );// 18
			bunnyHop                         = toggleSwitch(bunnyHop                         ,20 );// 19
			fastMelee[profileIdx]            = toggleSwitch(fastMelee[profileIdx]            ,21 );// 20
			snakePlate                       = toggleSwitch(snakePlate                       ,22 );// 21
			vmSpeed                          = toggleSwitch(vmSpeed                          ,23 );// 22
			customSens                       = toggleSwitch(customSens                       ,24 );// 23
			tacSprint                        = toggleSwitch(tacSprint                        ,25 );// 24
			dolphinCancel                    = toggleSwitch(dolphinCancel                    ,26 );// 25
			weaponSwap                       = toggleSwitch(weaponSwap                       ,27 );// 24
			buttonLayouts                    = toggleSwitch(buttonLayouts                    ,28 );// 26
			stickLayouts                     = toggleSwitch(stickLayouts                     ,29 );// 27
			useInverted                      = toggleSwitch(useInverted                      ,30 );// 28
			blockRumble                      = toggleSwitch(blockRumble                      ,31 );// 29
			hairTriggers                     = toggleSwitch(hairTriggers                     ,32 );// 30
			swapPS4Btns                      = toggleSwitch(swapPS4Btns                      ,33 );// 11
			ButtonConfig(0,34)
			ButtonConfig(1,35)
			UnmapBtnIdx[0]                   = toggleSwitch( UnmapBtnIdx[0]                  ,36 );
			UnmapBtnIdx[1]                   = toggleSwitch( UnmapBtnIdx[1]                  ,37 );
			singleButtonActivation(0,38);
			singleButtonActivation(1,39);
			dualButtonActivation(2,40);
			dualButtonActivation(3,41);
			if(modNameIdx == 42){ 
				if(isqrt(pow(get_ival(PS4_RX),2) + pow(get_ival(PS4_RY),2))){ 
					set_hsb(get_polar(POLAR_RS,POLAR_ANGLE),100,100);
					if(event_press(PS4_R3)){ 
						setLedColour[profileIdx] = TRUE;
						getColour[profileIdx] = get_polar(POLAR_RS,POLAR_ANGLE);
					}
				}
				if(event_press(PS4_SQUARE)){ 
					setLedColour[profileIdx] = FALSE;
				} 
				if(setLedColour[profileIdx]){
					set_hsb(getColour[profileIdx],100,100);
				}
			}
			weaponName[profileIdx]           = toggleSwitch(weaponName[profileIdx]           ,43 );// 39
			
			dualButtonActivation(4,44);
			dualButtonActivation(5,45);
			dualButtonActivation(6,46);
			dualButtonActivation(7,47);
			dualButtonActivation(8,48);
			dualButtonActivation(9,49);
			dualButtonActivation(10,50);
			dualButtonActivation(11,51);
			dualButtonActivation(12,52);
			dualButtonActivation(13,53);
			dualButtonActivation(14,54);
			dualButtonActivation(15,55);
			standardARFireType[profileIdx]            = fireTypeSwitch(0,standardARFireType[profileIdx],2);
		    standardARFireType[profileIdx]            = fireTypeSwitch(1,standardARFireType[profileIdx],2);
		    progressiveARFireType[profileIdx]         = fireTypeSwitch(2,progressiveARFireType[profileIdx],2);
		   	taylorFireType[profileIdx]                = fireTypeSwitch(4,taylorFireType[profileIdx],3);
		    rotationalFireType[profileIdx]            = fireTypeSwitch(5,rotationalFireType[profileIdx],3);
		    rapidFireType[profileIdx]                 = fireTypeSwitch(6,rapidFireType[profileIdx],3);
		    burstFireType[profileIdx]                 = fireTypeSwitch(8,burstFireType[profileIdx],3);
		    quickScopeActivation[profileIdx]          = fireTypeSwitch(16,quickScopeActivation[profileIdx],1);
		    snakeShotActivationmw2[profileIdx]        = fireTypeSwitch(10,snakeShotActivationmw2[profileIdx],4);
		    crouchShotActivation[profileIdx]          = fireTypeSwitch(11,crouchShotActivation[profileIdx],4);
		    jumpShotActivation[profileIdx]            = fireTypeSwitch(12,jumpShotActivation[profileIdx],4);
		    dropShotmw2FireType[profileIdx]           = fireTypeSwitch(9,dropShotmw2FireType[profileIdx],4);
		    weaponSwapActivation                      = fireTypeSwitch(27,weaponSwapActivation,1);
		    
		    if(update){ 
				getAdminValues();
			} 

        } 
        /* Edit Menu Navigation / Adjustable Values */
        if(editMenu){ 
            vm_tctrl(0);
            menuScroll();
            valNameIdx = menuNavigation(valNameIdx,valRangeIdx[modNameIdx][0],valRangeIdx[modNameIdx][1]);   
            verticalStrength[profileIdx]    = editValues(verticalStrength[profileIdx]  ,0 );
            HorizontalStrength[profileIdx]  = editValues(HorizontalStrength[profileIdx],1 );
            Vertical[profileIdx]            = editValues(Vertical[profileIdx]          ,2 );
            Horizontal[profileIdx]          = editValues(Horizontal[profileIdx]        ,3 );
            doubleStrengthTime[profileIdx]  = editValues(doubleStrengthTime[profileIdx],4 );
            deadzone                        = editValues(deadzone                      ,5 );
            VerticalStart[profileIdx]       = editValues(VerticalStart[profileIdx]     ,6 );
            VerticalMid[profileIdx]         = editValues(VerticalMid[profileIdx]       ,7 );
            VerticalEnd[profileIdx]         = editValues(VerticalEnd[profileIdx]       ,8 );
            VerticalTime[profileIdx]        = editValues(VerticalTime[profileIdx]      ,9 );
            HorizontalStart[profileIdx]     = editValues(HorizontalStart[profileIdx]   ,10);
            HorizontalEnd[profileIdx]       = editValues(HorizontalEnd[profileIdx]     ,11);
            HorizontalTime[profileIdx]      = editValues(HorizontalTime[profileIdx]    ,12);
            aimType[profileIdx]             = editSwitch(aimType[profileIdx]           ,13); // edit switch function 
            aimAssistTypeRS[profileIdx]     = editSwitch(aimAssistTypeRS[profileIdx]   ,14); // edit switch function 
            taylorShapes[profileIdx]        = editSwitch(taylorShapes[profileIdx]      ,15); // edit switch function 
            radiusSize[profileIdx]          = editValues(radiusSize[profileIdx]        ,16);
            adsSpeedAngle[profileIdx]       = editValues(adsSpeedAngle[profileIdx]     ,17);
            speedAngle[profileIdx]          = editValues(speedAngle[profileIdx]        ,18);
            spiralChange[profileIdx]        = editSwitch(spiralChange[profileIdx]      ,19); // edit switch function 
            boostOnFire[profileIdx]         = editSwitch(boostOnFire[profileIdx]       ,20); // edit switch function 
            boostSpeed[profileIdx]          = editValues(boostSpeed[profileIdx]        ,21);
            boostMinRadius[profileIdx]      = editValues(boostMinRadius[profileIdx]    ,22);
            boostMaxRadius[profileIdx]      = editValues(boostMaxRadius[profileIdx]    ,23);
            taylorTracking[profileIdx]      = editSwitch(taylorTracking[profileIdx]    ,24); // edit switch function 
            trackingSize[profileIdx]        = editValues(trackingSize[profileIdx]      ,25);
            trackingSpeed[profileIdx]       = editValues(trackingSpeed[profileIdx]     ,26);
            trackingBoostOnFire[profileIdx]  = editSwitch(trackingBoostOnFire[profileIdx],27); // edit switch function 
            trackingBoostSize[profileIdx]   = editValues(trackingBoostSize[profileIdx] ,28);
            trackingBoostSpd[profileIdx]    = editValues(trackingBoostSpd[profileIdx]  ,29);
            ceorinShape[profileIdx]         = editSwitch(ceorinShape[profileIdx]       ,30); // edit switch function 
            leftStickStrength[profileIdx]   = editValues(leftStickStrength[profileIdx] ,31);
            leftStickSpeed[profileIdx]      = editValues(leftStickSpeed[profileIdx]    ,32);
            rateOfFire[profileIdx]          = editValues(rateOfFire[profileIdx]        ,33);
            legacyARH                       = editSwitch(legacyARH                     ,34); // edit switch function 
            handGunVertical[profileIdx]     = editValues(handGunVertical[profileIdx]   ,35);
            akimboRateOfFire[profileIdx]    = editValues(akimboRateOfFire[profileIdx]  ,36);
            burstHoldTime[profileIdx]       = editValues(burstHoldTime[profileIdx]     ,37);
            burstRestTime[profileIdx]       = editValues(burstRestTime[profileIdx]     ,38);
            mw2JumpDelay                    = editValues(mw2JumpDelay                  ,39);
            PingDelay                       = editValues(PingDelay                     ,40);
            holdBreathDelay[profileIdx]     = editValues(holdBreathDelay[profileIdx]   ,41);
            quickScopeDelay                 = editValues(quickScopeDelay               ,42);
            gWalkDelayTime                  = editValues(gWalkDelayTime                ,43);
            slideDelayMw2                   = editValues(slideDelayMw2                 ,44);
            GeneralSens                     = editValues(GeneralSens                   ,45);
            AdsSens                         = editValues(AdsSens                       ,46);
            FireSens                        = editValues(FireSens                      ,47);
            AdsFireSens                     = editValues(AdsFireSens                   ,48);
            if(update){ 
				getAdminValues();
			} 

        }
        if(recoilEdit){ 
			vm_tctrl(0);
			menuScroll();
			valNameIdx = menuNavigation(valNameIdx,0,12);
			verticalStrength  [profileIdx] = editValues( verticalStrength  [profileIdx],0 );
			HorizontalStrength[profileIdx] = editValues( HorizontalStrength[profileIdx],1 );
			Vertical          [profileIdx] = editValues( Vertical          [profileIdx],2 );
			Horizontal        [profileIdx] = editValues( Horizontal        [profileIdx],3 );
			doubleStrengthTime[profileIdx] = editValues( doubleStrengthTime[profileIdx],4 );
			deadzone         			   = editValues( deadzone                      ,5 );
			VerticalStart     [profileIdx] = editValues( VerticalStart     [profileIdx],6 );
			VerticalMid       [profileIdx] = editValues( VerticalMid       [profileIdx],7 );
			VerticalEnd       [profileIdx] = editValues( VerticalEnd       [profileIdx],8 );
			VerticalTime      [profileIdx] = editValues( VerticalTime      [profileIdx],9 );
			HorizontalStart   [profileIdx] = editValues( HorizontalStart   [profileIdx],10 );
			HorizontalEnd     [profileIdx] = editValues( HorizontalEnd     [profileIdx],11 );
			HorizontalTime    [profileIdx] = editValues( HorizontalTime    [profileIdx],12 );
		}
        /* When We are Either In Mod Menu OR Edit Menu - Update/Refresh The Display for the OLED */
        if(updateDisplay){ 
           cls_oled(0);
		   rect_oled(0,0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
            /* Display Val Names / Adjustble Values when In Edit Menu */
            if(editMenu){ 
            	line_oled(0,50,127 , 50, 1, 1);
                print(centerPosition(getStringLength(valNames[valNameIdx]) ,OLED_FONT_SMALL_WIDTH), 4  ,OLED_FONT_SMALL , OLED_WHITE , valNames[valNameIdx]);
             
             	if(valuesMinMax[valNameIdx][4] == 0){
					line_oled(0,17,127,17, 1, 1); 
				}
				if(valuesMinMax[valNameIdx][4] == 1){
					line_oled(0,27,127,27, 1, 1);
				} 
				if(valuesMinMax[valNameIdx][5] == 1){
					print(centerPosition(getStringLength(profileId[profileIdx]) ,OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE ,profileId[profileIdx]);
				}    
            }
            else if(recoilEdit){ 
            	line_oled(0,50,127 , 50, 1, 1);
                print(centerPosition(getStringLength(valNames[valNameIdx]) ,OLED_FONT_SMALL_WIDTH), 4  ,OLED_FONT_SMALL , OLED_WHITE , valNames[valNameIdx]);
             
             	if(valuesMinMax[valNameIdx][4] == 0){
					line_oled(0,17,127,17, 1, 1); 
				}
				if(valuesMinMax[valNameIdx][4] == 1){
					line_oled(0,27,127,27, 1, 1);
				} 
				if(valuesMinMax[valNameIdx][5] == 1){
					print(centerPosition(getStringLength(profileId[profileIdx]) ,OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE ,profileId[profileIdx]);
				}    
			} 
            /* Display Mod Names / Toggles When In Mod Menu */
            else if(modMenu) { 
                if(valRangeIdx[modNameIdx][4] == 0){ 
					print(centerPosition(getStringLength(modNames[modNameIdx]) ,OLED_FONT_SMALL_WIDTH), 8  ,OLED_FONT_SMALL , OLED_WHITE , modNames[modNameIdx]);
				}
				else { 
					print(centerPosition(getStringLength(modNames[modNameIdx]) ,OLED_FONT_SMALL_WIDTH), 4  ,OLED_FONT_SMALL , OLED_WHITE , modNames[modNameIdx]);
				}
				if(valRangeIdx[modNameIdx][5] == 0){ 
					line_oled(0,27,127,27, 1, 1);
				}
				if(valRangeIdx[modNameIdx][5] == 1){ 
					line_oled(0,27,127,27, 1, 1);
				}
				if(valRangeIdx[modNameIdx][6] == 1){ 
					print(centerPosition(getStringLength(profileId[profileIdx]) ,OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE ,profileId[profileIdx]);
				} 
				if(modNameIdx == 42){ 
					print(centerPosition(getStringLength(misc[8]) ,OLED_FONT_SMALL_WIDTH),34  ,OLED_FONT_SMALL , OLED_WHITE , misc[8]);
					print(centerPosition(getStringLength(misc[9]) ,OLED_FONT_SMALL_WIDTH),48  ,OLED_FONT_SMALL , OLED_WHITE , misc[9]);
				} 
            }
            else { 
            	rect_oled(2,3,127,50,1,0);
				rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
				rect_oled(2,16,125,18,1,1); 
				line_oled(0, 50,127 , 50, 1, 1);
			
				displayMainIdx(mainMenuAR,mainMenuQT,mainMenuAA);
				displayMainIdx(mainMenuAA,mainMenuAR,mainMenuFR);
				displayMainIdx(mainMenuFR,mainMenuAA,mainMenuMisc);
				displayMainIdx(mainMenuMisc,mainMenuFR,mainMenuController);
				displayMainIdx(mainMenuController,mainMenuMisc,mainMenuProfiles);
				displayMainIdx(mainMenuProfiles,mainMenuController,mainMenuQT);
				displayMainIdx(mainMenuQT,mainMenuProfiles,mainMenuAR);
                // print(centerPosition(getStringLength(mainmenuNames[mainNameIdx]) ,OLED_FONT_SMALL_WIDTH), 6  ,OLED_FONT_SMALL , OLED_WHITE , mainmenuNames[mainNameIdx]);
            } 
            updateDisplay = FALSE; // When No Buttons are Pressed In the menu / Update Display is FALSE 
        }
    } 
    /* When We ARE NOT in ModMenu or EditMenu */
    if(!mainMenu && !modMenu && !editMenu){ // Add MainMenu Here - so when we are not in the main menu 
    	if(!recoilEdit){ // If NOT in Recoil Edit 
	        /* Display The Title Screen When we Are NOT in any Menu s */
	        if(displayTitle){ 
	            cls_oled(0);
	            displayTitle = FALSE;
	            screenSaver  = TRUE;
	            rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
	            print(centerPosition(getStringLength(misc[6]) ,OLED_FONT_SMALL_WIDTH), 6  ,OLED_FONT_SMALL , OLED_WHITE , misc[6]);
                print(centerPosition(getStringLength(misc[7]) ,OLED_FONT_SMALL_WIDTH),20  ,OLED_FONT_SMALL , OLED_WHITE , misc[7]);
                print(centerPosition(getStringLength(weaponName_Opt[weaponName[profileIdx]]) ,OLED_FONT_SMALL_WIDTH), 35  ,OLED_FONT_SMALL, OLED_WHITE ,weaponName_Opt[weaponName[profileIdx]]);
	            print(centerPosition(getStringLength(profileId[profileIdx]) ,OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL ,OLED_WHITE ,profileId[profileIdx]);
	        }
	        /* When We are Display Title , after 10 seconds activate Screen Saver (Blank Screen) To Prevent Screen Burn */
	        if(screenSaver){  
	            blankScreen += get_rtime();
	        
	            if(blankScreen >= 10000)
	            {
	                cls_oled(OLED_BLACK);
	                blankScreen = 0;
	                screenSaver = FALSE;
	            } 
	        }  
	        if(!CustomProfile){
		    	if(ActivatePressButton[0]){ 
		    		if(event_release(ActivatePressButton[0]) && get_ptime(ActivatePressButton[0]) < 150 || get_ival(ActivatePressButton[1]) && event_release(ActivatePressButton[0])){
						selectedProfileIdx =! selectedProfileIdx;
						CustomProfile = FALSE;
		
						if(modMenu)
							updateDisplay = TRUE;
						else
							displayTitle = TRUE;
		        	}	
		        	if(!CustomProfile){ 
		        	
		        		if(selectedProfileIdx) 
		        	   		profileIdx = 1;
		        		else
		        	   		profileIdx = 0; 
					} 
		    		if(get_ival(ActivatePressButton[1]))
				    	set_val(ActivatePressButton[0],0);
		  		}
		  		if(ActivateHoldButton[3]){
			  		if(get_ival(ActivateHoldButton[3])){
					    if(event_press(ActivatePressButton[3])){
					    	selectedProfileIdx =! selectedProfileIdx;
			    		
				    		if(!selectedProfileIdx)
			            		profileIdx = 0;
			        		else
			           		    profileIdx = 1;
			           		 
				    		if(modMenu)
				    			updateDisplay = TRUE;
				    		else
				    			displayTitle = TRUE;
				    	}
				    	set_val(ActivatePressButton[3],0);
					} 
					
				}
		  	} 
		    if(ActivateHoldButton[2]){
		    	if(get_ival(ActivateHoldButton[2])){
		        	if(event_press(ActivatePressButton[2])){
		             	profileIdx = 2; 
			       	    CustomProfile =! CustomProfile;
			       	    
			       	    if(modMenu) 
		    				updateDisplay = TRUE; 
		        		else
		            		displayTitle = TRUE;
		            		
		            	if(!CustomProfile) 
		            	{
		            		if(selectedProfileIdx) 
		            	   		profileIdx = 1;
		            		else
		            	   		profileIdx = 0; 
		    			}
		    		} 
		       	}           
		       	if(ActivateHoldButton[2] &&  get_ival(ActivateHoldButton[2]))
	    			set_val(ActivatePressButton[2], 0);   
		   	}
		   	
		} 
		if(setLedColour[profileIdx]){
			set_hsb(getColour[profileIdx],100,100);
		}
		else { 
			set_ledx(profileIdx,2);
		}
	    if(get_ival(Fire)){
			if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !mainMenu && !modMenu && !editMenu && !recoilEdit){
		        driveMode = TRUE; 
		        combo_run(DriveMode);
    	    }
    	    set_val(PS4_RIGHT,0);
    	} 
    	if(driveMode){
			combo_run(Blink);
			LedOn  = 150;
			LedOff = 300;
			
			if(event_press(PS4_SQUARE)){
				driveMode = FALSE;
				combo_run(driveModeOff); 
				combo_run(rumbleOff); 
    		} 
    	}
    	if(useInverted)
    		invertStick = -1;
    	else
    		invertStick = 1;
    	
	    if(blockRumble) {
        	block_rumble();
        }
        if(hairTriggers) {
			if(get_ival(Ads) > 10)
				set_val(Ads, 100);
	
			if(get_ival(Fire) > 10)
				set_val(Fire, 100);
		} 
		if(vmSpeed){
			if(vmSpeed == 0) vm_tctrl( 0);	
		    if(vmSpeed == 1) vm_tctrl(-2);
		    if(vmSpeed == 2) vm_tctrl(-4);
		   	if(vmSpeed == 3) vm_tctrl(-6);
		} 
	    RemapButtons(ActiveButtonRemap[0],RemapButtonActive[0]);
	    RemapButtons(ActiveButtonRemap[1],RemapButtonActive[1]);
	    UnmapButtonID(UnmapButton[0])
	    UnmapButtonID(UnmapButton[1])
	    
	    if(!driveMode){ 
			if(!recoilEdit){
			    /* This is where all mods are placed outside the menu */
			    /* Add Mods */ 
			    toggleRapidFire[profileIdx] = presetQuickToggles(ActivateHoldButton[4],ActivatePressButton[4],toggleRapidFire[profileIdx],6,1,rapidQT[profileIdx]);
				toggleAkimbo[profileIdx]    = presetQuickToggles(ActivateHoldButton[5],ActivatePressButton[5],toggleAkimbo[profileIdx],7,2,akimboQT[profileIdx]);
				toggleBurstFire[profileIdx] = presetQuickToggles(ActivateHoldButton[6],ActivatePressButton[6],toggleBurstFire[profileIdx],8,1,NOT_USE);
				crouchShot[profileIdx]      = presetQuickToggles(ActivateHoldButton[7],ActivatePressButton[7],crouchShot[profileIdx],11,1,crouchQT[profileIdx]);
				jumpShot[profileIdx]        = presetQuickToggles(ActivateHoldButton[8],ActivatePressButton[8],jumpShot[profileIdx],12,1,jumpQT[profileIdx]);
				holdBreath[profileIdx]      = presetQuickToggles(ActivateHoldButton[9],ActivatePressButton[9],holdBreath[profileIdx],15,1,hBreathQT[profileIdx]);
				quickScope[profileIdx]      = presetQuickToggles(ActivateHoldButton[10],ActivatePressButton[10],quickScope[profileIdx],16,1,qScopeQT[profileIdx]);
				silentShot[profileIdx]      = presetQuickToggles(ActivateHoldButton[11],ActivatePressButton[11],silentShot[profileIdx],17,1,sScopeQT[profileIdx]);
				fastMelee[profileIdx]       = presetQuickToggles(ActivateHoldButton[12],ActivatePressButton[12],fastMelee[profileIdx],21,2,fMeleeQT[profileIdx]);
				dropShotmw2[profileIdx]     = presetQuickToggles(ActivateHoldButton[13],ActivatePressButton[13],dropShotmw2[profileIdx],9,1,dropShotQT[profileIdx]);
				mw2SnakeShot[profileIdx]    = presetQuickToggles(ActivateHoldButton[14],ActivatePressButton[14],mw2SnakeShot[profileIdx],10,1,mw2SnakeQT[profileIdx]);
				weaponSwap                  = presetQuickToggles(ActivateHoldButton[15],ActivatePressButton[15],weaponSwap,27,1,wSwapQT[profileIdx]);
			} 
			if(toggleRapidFire[profileIdx]){
				if(legacyARH == 1){ 
					handGunVert  = handGunVertical;	
				}
				else if(legacyARH == 2){ 
					handGunVertR  = handGunVertical;
				}
				else { 
					if(antiRecoilBasic[profileIdx] == 1){
						handGunVert   = verticalStrength[profileIdx];
					}
					else if(antiRecoilBasic[profileIdx] == 2){
						handGunVertR  = verticalStrength[profileIdx];
					}
				} 
			}
			if(!toggleRapidFire[profileIdx]){ 
				if(antiRecoilBasic[profileIdx] == 1){
					handGunVert   = verticalStrength[profileIdx];
				}
				else if(antiRecoilBasic[profileIdx] == 2){
					handGunVertR  = verticalStrength[profileIdx];
				}	
			} 
			if(toggleRapidFire[profileIdx]){
				HoldTime = 500 / random(rateOfFire[profileIdx] >> 1,rateOfFire[profileIdx]); 	
			    RestTime = HoldTime -get_rtime();
				if(RestTime < 0) RestTime = 0;
				
				if(rapidFireActivationType(rapidFireType[profileIdx]))
					combo_run(RAPIDFIRE);
				else
				    combo_stop(RAPIDFIRE);	 
				
				combo_run(Blink);
				LedOn  = 200;
				LedOff = 150; 
			}
			if(toggleBurstFire[profileIdx]) { 
				if(rapidFireActivationType(burstFireType[profileIdx]))
					combo_run(burstFireCmb);
				else
				    combo_stop(burstFireCmb);	 
				
				combo_run(Blink);
				LedOn  = 200;
				LedOff = 150; 
			} 
			if(crouchShot[profileIdx] == 1){ 
				if(crouchShotActivation[profileIdx] == 0){
					if(get_ival(Fire) && !get_ival(Ads)){
			    		combo_run(CrouchShotCmb);
			    	}
			    }
			    if(crouchShotActivation[profileIdx] == 1){
			    	if(get_ival(Ads) && get_ival(Fire)){
			    		combo_run(CrouchShotCmb);
			    	}
			    	if(combo_running(CrouchShotCmb) && (event_release(Ads) || event_release(Fire))){
			    		combo_stop(CrouchShotCmb);
			    	} 
			    }
			    if(crouchShotActivation[profileIdx] == 2){
			    	if(get_ival(Ads) && get_ival(Fire) && get_val(Crouch)){ 
			    		combo_run(CrouchShotCmb);
			    	}
			    	if(combo_running(CrouchShotCmb) && (event_release(Ads) || event_release(Fire))){
			    		combo_stop(CrouchShotCmb);
			    	} 
			    }
			    if(crouchShotActivation[profileIdx] == 3){
			    	if(get_ival(Fire) && event_press(Crouch) && get_ptime(Crouch) <= 125){
           				crouchShotActive = TRUE;
           			}
		    		if(crouchShotActive){
		       	    	combo_run(CrouchShotCmb);
		            }
		        	if(get_ival(Crouch) && get_ptime(Crouch) > 200 || event_press(Jump) || event_release(Fire)) {  
		        		crouchShotActive = FALSE;	
		        	}   
		        }
		        if(crouchShotActivation[profileIdx] == 4){ 
					if(get_ival(Ads)){
						if(get_val(Lethal)){ 
							swap(Lethal,Fire);
							combo_run(CrouchShotCmb);
						}
						set_val(Lethal,0);
					}
					if(combo_running(CrouchShotCmb) && !get_val(Fire)){ 
						combo_stop(CrouchShotCmb);
					} 
				}    
		    }
		    if(jumpShot[profileIdx]){ 
				if(jumpShotActivation[profileIdx] == 0){
					if(get_ival(Fire) && !get_ival(Ads)){
				    	combo_run(JumpShot);
				    } 
		    	} 
		    	if(jumpShotActivation[profileIdx] == 1){
			    	if(get_ival(Ads) && get_ival(Fire)){ 
		    			combo_run(JumpShot);
		    		}
			    } 
			    if(jumpShotActivation[profileIdx] == 2){
			    	if(get_ival(Ads) && get_ival(Fire) && get_val(Jump)){
			    		combo_run(JumpShot);
		    		}
		    	}
		    	if(jumpShotActivation[profileIdx] == 3){
		    		if(get_ival(Fire) && event_release(Jump) && get_ptime(Jump) < 200){
		    			jumpShotActive = TRUE;
		    		}
		    		if(jumpShotActive){ 
		    			combo_run(JumpShot);
		    		} 
		    		if(combo_running(JumpShot) && !get_val(Fire)){ 
		    			combo_stop(JumpShot);
		    			jumpShotActive = FALSE;
		    		} 
		    	}
			    if(jumpShotActivation[profileIdx] == 4){ 
					if(get_ival(Ads)){
						if(get_val(Lethal)){ 
							swap(Lethal,Fire);
							combo_run(JumpShot);
						}
						set_val(Lethal,0);
					}
					if(combo_running(JumpShot) && !get_val(Fire)){ 
						combo_stop(JumpShot);
					} 
				}       
			}
			if(dropShotmw2[profileIdx]){
				if(miscModActivationType(dropShotmw2FireType[profileIdx])){ 
					combo_run(dropShotter);
				}
				if(combo_running(dropShotter) && (event_release(Ads) || !get_val(Fire) || event_press(Jump))){
					combo_stop(dropShotter);
				} 
			}
			if(mw2SnakeShot[profileIdx]){ 
        		if(miscModActivationType(snakeShotActivationmw2[profileIdx])){ 
	    			combo_run(SnakeShotmw2);
	    		}
			    if(combo_running(SnakeShotmw2) && !get_val(Fire)){
					combo_stop(SnakeShotmw2);
				}
			}
			if(antiRecoilBasic[profileIdx] >= 1 || toggleRapidFire[profileIdx] && (legacyARH == 1 || legacyARH == 2)){ 
				smartRumbleStandard = get_rumble(rumbleToUse());
				if(antirecoilActivation(standardARFireType[profileIdx]) && (!(toggleRapidFire[profileIdx] && legacyARH)) || (toggleRapidFire[profileIdx] && (legacyARH == 1 || legacyARH == 2) && rapidFireActivationType(rapidFireType[profileIdx])) || (toggleRapidFire[profileIdx] && (legacyARH == 1 || legacyARH == 2) && (rapidFireType == 3 && get_ival(Ads) && get_ival(Lethal)))) {
					if(antiRecoilBasic[profileIdx] == 1 && (!(toggleRapidFire[profileIdx] && legacyARH)) || toggleRapidFire[profileIdx] && legacyARH == 1){ 
						combo_run(antiRecoilCombo);
					}
					if(antiRecoilBasic[profileIdx] == 2 && (!(toggleRapidFire[profileIdx] && legacyARH)) || toggleRapidFire[profileIdx] && legacyARH == 2){ 
						if(smartRumbleStandard > 10 && smartRumbleStandard < 90){ 
							antirecoilStrengthStandard = handGunVertR + smartRumbleStandard / 2; 
						} 
						if(smartRumbleStandard < 10){ 
							if(aimAssist[profileIdx] || rotationalAA[profileIdx] == 2){ 
								offsetAR(aimRY,handGunVertR + (sinAngle / 327));
								if(!(toggleRapidFire[profileIdx] && legacyARH))
									offsetAR(aimRX,HorizontalStrength[profileIdx] + (cosAngle / 327));
							} 
							else{
								offsetAR(aimRY,handGunVertR);
								if(!(toggleRapidFire[profileIdx] && legacyARH))
									offsetAR(aimRX,HorizontalStrength[profileIdx]);
							} 
						}
						else { 
						
							if(aimAssist[profileIdx] || rotationalAA[profileIdx] == 2){ 
								offsetAR(aimRY,antirecoilStrengthStandard + (sinAngle / 327));
								if(!(toggleRapidFire[profileIdx] && legacyARH))
									offsetAR(aimRX,HorizontalStrength[profileIdx] + (cosAngle / 327));
							}
							else{
								offsetAR(aimRY,antirecoilStrengthStandard);
								if(!(toggleRapidFire[profileIdx] && legacyARH))
							    	offsetAR(aimRX,HorizontalStrength[profileIdx]);
							}
						}	
					} 
				}
				if(!get_val(Fire)){ 
					antirecoilStrengthStandard = 0;
					smartRumbleStandard = 0;
				} 
			} 
			if(antiRecoilPolar[profileIdx] == 1 && !(toggleRapidFire[profileIdx] && legacyARH)){
		    	if(antirecoilActivation(standardARFireType[profileIdx])){
		    		antirecoilBoostTimer += get_rtime(); 
		    		if(antirecoilBoostTimer < doubleStrengthTime[profileIdx]){ 
		    			legacyRecoilStrength = (Vertical[profileIdx] * 2); 
					}
					if(antirecoilBoostTimer > doubleStrengthTime[profileIdx]){ 
						legacyRecoilStrength = Vertical[profileIdx];
					}
					if(isqrt(pow(get_ival(POLAR_RX),2) + pow(get_ival(POLAR_RY),2)) >(deadzone * 32767/100)) { 
						offset(POLAR_RY,((legacyRecoilStrength - (deadzone * invertStick)) * 32767 / 100));
						offset(POLAR_RX,Horizontal[profileIdx] * 32767 / 100);
				    }
					if(isqrt(pow(get_ival(POLAR_RX),2) + pow(get_ival(POLAR_RY),2))<(deadzone * 32767/100)) {    
						offset(POLAR_RY,(legacyRecoilStrength  * 32767/100) - get_val(POLAR_RY))
						offset(POLAR_RX,Horizontal[profileIdx]  * 32767 / 100);	
					}	
			    }
			    if(!get_val(Fire)){ 
			    	antirecoilBoostTimer = 0;
			    } 
			} 
			if(antiRecoilPolar[profileIdx] == 2 && !(toggleRapidFire[profileIdx] && legacyARH)){
		    	smartRumble = get_rumble(rumbleToUse());
		    	if(antirecoilActivation(standardARFireType[profileIdx])){
		    		antirecoilBoostTimer += get_rtime(); 
		    		if(smartRumble > 10 && smartRumble < 90){
						if(antirecoilBoostTimer < doubleStrengthTime[profileIdx]){
							if(get_controller() == PIO_XB1){
								antirecoilStrength = ((Vertical[profileIdx] * invertStick) * 2) + smartRumble / 2; 
							} 
							else { 
								antirecoilStrength = ((Vertical[profileIdx] * invertStick) * 2) + smartRumble / 4; 
							}
						}
						if(antirecoilBoostTimer > doubleStrengthTime[profileIdx]){ 
							if(get_controller() == PIO_XB1){
								antirecoilStrength = (Vertical[profileIdx] * invertStick) + smartRumble / 2; 
							}
							else { 
								antirecoilStrength = (Vertical[profileIdx] * invertStick) + smartRumble / 3;
							} 
						} 
					}	
					if(isqrt(pow(get_ival(POLAR_RX),2) + pow(get_ival(POLAR_RY),2)) >(deadzone * 32767/100)) { 
						if(smartRumble < 10){ 
							offset(POLAR_RY,((Vertical[profileIdx] - (deadzone * invertStick))  * 32767 / 100));
							offset(POLAR_RX,Horizontal[profileIdx] * 32767 / 100);
						}
						else { 
							offset(POLAR_RY,((antirecoilStrength - (deadzone * invertStick)) * 32767 / 100));
							offset(POLAR_RX,Horizontal[profileIdx] * 32767 / 100);
						}
					}
					if(isqrt(pow(get_ival(POLAR_RX),2) + pow(get_ival(POLAR_RY),2))<(deadzone * 32767/100)) { 
						if(smartRumble < 10){ 
							offset(POLAR_RY,(Vertical[profileIdx] * 32767/100) - get_val(POLAR_RY))
							offset(POLAR_RX,Horizontal[profileIdx] * 32767 / 100);
						}
						else { 
							offset(POLAR_RY,antirecoilStrength  * 32767 / 100);
							offset(POLAR_RX,Horizontal[profileIdx] * 32767 / 100);
						}
					}
				}
				if(!get_val(Fire)){ 
					smartRumble = 0;
					antirecoilStrength = 0;
					antirecoilBoostTimer = 0;
				} 
			} 	
			if(antiRecoilAdvanced[profileIdx] >= 1 && !(toggleRapidFire[profileIdx] && legacyARH)) { 
				CompleteTime = (VerticalTime[profileIdx]   * 100) / 3;
				HorizTime    = (HorizontalTime[profileIdx] * 100) / 2;
				if(antirecoilActivation(progressiveARFireType[profileIdx])){
					checkAdvancedValues(); 
					Time += get_rtime();        	
				    if(Time < CompleteTime){  
					    offsetAR(PS4_RY,vertAntirecoilStart);   
					}        
				    else if(Time < CompleteTime * 2){ 	
					    offsetAR(PS4_RY,vertAntirecoilMid);   
					}
					else if(Time < CompleteTime * 3){ 
				    	offsetAR(PS4_RY,vertAntirecoilEnd);
					}	
					if(Time >= VerticalTime * 100){ 
					    offsetAR(PS4_RY,vertAntirecoilEnd);
					} 
					if(Time < HorizTime){    
						offsetAR(PS4_RX,horizAntirecoilStart);	
					}        
					else if(Time < HorizTime * 2){ 	
					    offsetAR(PS4_RX,horizAntirecoilEnd);   
					}
					if(Time >= HorizontalTime * 100){ 	
					    offsetAR(PS4_RX,horizAntirecoilEnd);  
					}
				}
				if(!get_val(Fire)){ 
				    Time  = 0;
				    CompleteTime = 0;
				    HorizTime = 0;
				}  
			} 
		
			if(aimAssist[profileIdx] >= 1){ 
				RX = get_val(POLAR_RX);
				RY = get_val(POLAR_RY);
				polarAngle = getPolar(POLAR_RS, POLAR_ANGLE);
				if(!(loopSync++ % 1)){
    				angle         += angleR;
    				trackingAngle += trackingAngleR;
  				}
				if(aimAssistTypeRS[profileIdx] == 0){ 
					aimAssistRadius = radiusSize[profileIdx];
				}
				if(aimAssistTypeRS[profileIdx] == 1){ 
					aimAssistRadius = (radiusSize[profileIdx] * (32767 + (radiusSize[profileIdx] * 327) - isqrt(pow(abs(get_val(POLAR_RX)), 2) + pow(abs(get_val(POLAR_RY)), 2)))) / 32767;
				}
				if(aimAssistTypeRS[profileIdx] == 2){ 
					aimAssistRadius = (radiusSize[profileIdx]  * (32767 - radiusSize[profileIdx] + isqrt(pow(abs(get_val(POLAR_RX)), 2) + pow(abs(get_val(POLAR_RY)), 2))) - (radiusSize[profileIdx] * 2)) / 32767;
				}
			    if((boostOnFire[profileIdx] == 1 || boostOnFire[profileIdx] == 2) && get_ival(Fire)){
			    	if(isqrt(pow(get_ival(POLAR_RX),2) + pow(get_ival(POLAR_RY),2))<(10 * 32767/100))  
					   angleR = (adsSpeedAngle[profileIdx]  + boostSpeed[profileIdx]); // ads 
				    else
					   angleR = (speedAngle[profileIdx] + boostSpeed[profileIdx]);
				}else{ 
					if(isqrt(pow(get_ival(POLAR_RX),2) + pow(get_ival(POLAR_RY),2))<(10 * 32767/100))
					   angleR = (random(5,adsSpeedAngle[profileIdx])); // ads
					else
					   angleR = (random(5,speedAngle[profileIdx]));
				} 
			    if((boostOnFire[profileIdx] == 1 || boostOnFire[profileIdx] == 2) && get_ival(Fire)){
			    	if(spiralChange[profileIdx] == 1){ 
			    		if(boostOnFire[profileIdx] == 2){ 
							GetAngle(taylorShapes[profileIdx],angle,(aimAssistRadius * 327) + random(boostMinRadius[profileIdx] * 327,inv(boostMaxRadius[profileIdx] * 327))); 
						}
						else { 
							GetAngle(taylorShapes[profileIdx],angle,(aimAssistRadius * 327) + random(boostMinRadius[profileIdx] * 327,boostMaxRadius[profileIdx] * 327));
						}
					} 
					else {
						if(boostOnFire[profileIdx] == 2){ 
							GetAngle(taylorShapes[profileIdx],angle,(aimAssistRadius * 327) + (inv(boostMaxRadius[profileIdx] * 327))); 
						}
						else {
							GetAngle(taylorShapes[profileIdx],angle,(random((2 * 32767/100),aimAssistRadius * 327)) + (random((1 * 32767/100),boostMaxRadius[profileIdx] * 327)));
						}
					}
				}
				else { 
					GetAngle(taylorShapes[profileIdx],angle,random((2 * 32767/100),aimAssistRadius * 327));
				} 
				if(taylorTracking[profileIdx] >= 1){ 
					if(trackingBoostOnFire[profileIdx] == 1 && get_ival(Fire)){ 
						trackingAngleR    = (trackingSpeed[profileIdx] + trackingBoostSpd[profileIdx]) % 360;
					}
					else { 
						trackingAngleR    = (random(0,trackingSpeed[profileIdx])) % 360;
					}
					
					if(taylorTracking[profileIdx] == 1){ 
						if(trackingBoostOnFire[profileIdx] == 1 && get_ival(Fire)){
							trackingAngleOne = (((trackingSize[profileIdx] + trackingBoostSize[profileIdx]) * 327) * sin(trackingAngle)/23170);
					   	    trackingAngleTwo = (((trackingSize[profileIdx] + trackingBoostSize[profileIdx]) * 327) * cos(trackingAngle)/23170);
					   	}
					   	else { 
					   		trackingAngleOne = ((trackingSize[profileIdx] * 327) * sin(trackingAngle)/23170);
					   	    trackingAngleTwo = ((trackingSize[profileIdx] * 327) * cos(trackingAngle)/23170);
					   	}
				   	} 
				   	if(taylorTracking[profileIdx] == 2){
						dynamicTracking  = (trackingSize[profileIdx]  * (32767 - isqrt(pow(abs(get_val(POLAR_RX)), 2) + pow(abs(get_val(POLAR_RY)), 2)))) / 32767;
						if(trackingBoostOnFire[profileIdx] == 1 && get_ival(Fire)){
							trackingAngleOne = (((dynamicTracking + trackingBoostSize[profileIdx]) * 327) * sin(trackingAngle)/23170);
					   		trackingAngleTwo = (((dynamicTracking + trackingBoostSize[profileIdx]) * 327) * cos(trackingAngle)/23170);
					   	}
					   	else {
							trackingAngleOne = ((dynamicTracking * 327) * sin(trackingAngle)/23170);
				   	    	trackingAngleTwo = ((dynamicTracking * 327) * cos(trackingAngle)/23170);
				   	    }
				   	}
				   	if(taylorTracking[profileIdx] == 3){
						dynamicTracking  = ((((trackingSize[profileIdx] * 2) * 327) + 32767 + isqrt(pow(abs(get_val(POLAR_RX)), 2) + pow(abs(get_val(POLAR_RY)), 2)) * (trackingSize[profileIdx]))) / 32767;
						if(trackingBoostOnFire[profileIdx] == 1 && get_ival(Fire)){
							trackingAngleOne = (((dynamicTracking + trackingBoostSize[profileIdx]) * 327) * sin(trackingAngle)/23170);
					   		trackingAngleTwo = (((dynamicTracking + trackingBoostSize[profileIdx]) * 327) * cos(trackingAngle)/23170);
					   	}
					   	else {
							trackingAngleOne = ((dynamicTracking * 327) * sin(trackingAngle)/23170);
				   	    	trackingAngleTwo = ((dynamicTracking * 327) * cos(trackingAngle)/23170);
				   	    }
				   	} 
				}
				if(aimAssist[profileIdx] == 1){ 
					if(aimAssistActivation(taylorFireType[profileIdx])){ 
						if(get_ival(Fire)){ 
							PolarAimAssist = get_ptime(Fire);	
							if(PolarAimAssist <= PolarStart){
				     			offset(POLAR_RY,sinAngle);
						   		offset(POLAR_RX,cosAngle);
				     		}
				     		if((PolarAimAssist > PolarStart) && (PolarAimAssist <= PolarMid)){
				         		set_val(POLAR_RX,clamp(RX + cosAngle,-32767,32767));
								set_val(POLAR_RY,clamp(RY + sinAngle,-32767,32767));
						    } 
				     		if(PolarAimAssist > PolarMid) {	
			         			set_val(POLAR_RX,clamp(RX + cosAngle,-32767,32767));
								set_val(POLAR_RY,clamp(RY + sinAngle,-32767,32767));
				     		}
				     	}
				     	else { 
				     		offset(POLAR_RY,sinAngle + random(-100,100));
						   	offset(POLAR_RX,cosAngle + random(-100,100));
						}
					}
					if(event_release(Ads) && !get_val(Fire) || event_release(Fire) && !get_ival(Ads)){ 
						PolarAimAssist  = 0;
					} 
				}
				if(aimAssist[profileIdx] == 2){ 
					if(aimAssistActivation(taylorFireType[profileIdx])){ 
						offset(POLAR_RS + 42,cosAngle + random(-100,100));
						offset(POLAR_RS + 43,sinAngle + random(-100,100));
					}
				}
				if(aimAssist[profileIdx] == 3){ 
					if(aimAssistActivation(taylorFireType[profileIdx])){ 
						set_val(POLAR_RX,clamp(RX + cosAngle + random(-100,100),-32767,32767));
						set_val(POLAR_RY,clamp(RY + sinAngle + random(-100,100),-32767,32767));
					}
				}
			}
			if(rotationalAA[profileIdx] == 1){
				LX = get_val(POLAR_LX);
				LY = get_val(POLAR_LY);
				if(!(loopSync++ % 1)){
					leftAngle += leftStickSpeed[profileIdx];
				} 
				getLeftAngle(ceorinShape[profileIdx],leftAngle,random((15 * 32767/100),leftStickStrength[profileIdx] * 32767/100))
            	if(aimAssistActivation(rotationalFireType[profileIdx])) {
            		set_val(POLAR_LX,clamp(LX + cosAngleL + random(-100,100),-32767,32767));
					set_val(POLAR_LY,clamp(LY + sinAngleL + random(-100,100),-32767,32767));
                }
            		
     				
        	}
        	if(toggleAkimbo[profileIdx] == 1){ 
        		HoldTime = 500 / akimboRateOfFire[profileIdx];     
                RestTime = HoldTime -get_rtime();
                if(RestTime < 0) RestTime = 0;
                
				if(get_val(Fire)){
		            combo_run(AkimboRapidFire1)
		        } 
		        else { 
		        	if(get_val(Ads)){ 
		        		combo_run(AkimboRapidFire2);
		        	}
		        }  
		        combo_run(Blink);
				LedOn  = 200;
				LedOff = 150;    
		        
		    } 
		    if(toggleAkimbo[profileIdx] == 2){ 
		    	if(get_ival(Ads) || get_ival(Fire)){ 
		    		set_val(Ads,100);
		    		set_val(Fire,100);
		    	}
		    	combo_run(Blink);
				LedOn  = 200;
				LedOff = 150;    
		    } 
			if(enemyPing){
        		if(get_ival(Fire) && get_ptime(Fire) >= 300 || (get_ival(Ads) && get_brtime(Ads) <= 200))
	         		combo_run(EnemyPing); 
	     		else
	         		combo_stop(EnemyPing);		
        	}      	
			if(bunnyHop) {
		    	if (bunnyHop && get_ival(Jump) && get_ptime(Jump) > 200) 
		    		combo_run(BunnyHop); 
			}
			if(customSens){ 
				 if(get_ival(Ads)){ 
       				if(!get_ival(Fire)){ 
            			GenStr = AdsSens;
        			}else{ 
            			GenStr = AdsFireSens;
        			} 
   				}
    			else if(get_ival(Fire)){ 
        			GenStr = FireSens; 
    			}else{ 
        			GenStr = GeneralSens;
    			}
	            customPolarSens(POLAR_RX,16384,GenStr * 32767/100);
				customPolarSens(POLAR_RY,16384,GenStr * 32768/100);	
    		}
			if(holdBreath[profileIdx] == 1){
				if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
	        }
	        if(holdBreath[profileIdx] == 2){
	        	if(get_ival(Ads)){ 
		            holdBreathTimer += get_rtime(); 
		            if(holdBreathTimer >= holdBreathDelay[profileIdx]){ 
		                set_val(Sprint,100);
		            } 
		        } 
		        if(event_release(Ads)){ 
		            holdBreathTimer = 0;
		        }  
		        if(get_val(Ads) && get_lval(Sprint)) 
		            set_val(Sprint, 0);    
		   }  
	        if(quickScope[profileIdx]){ 
	        	if(quickScopeActivation[profileIdx] == 0){ 
	        		if(event_press(Ads) && get_ptime(Ads) < 140){
						combo_run(QuickScope);
					}
				} 
				if(quickScopeActivation[profileIdx] == 1){ 
					if(event_release(Ads)){ 
						combo_run(QuickScope2);
					} 
				}
				if(get_ival(Ads) && event_press(PS4_R3)){ 
					set_val(Fire,0);
					combo_stop(QuickScope);
				} 
					
			}
	        if(fastMelee[profileIdx] == 1){ 
              	if(get_val(Melee) && get_ptime(Melee) < 200){
              		activateFastMelee = TRUE;
              	}
              	if(get_val(Melee) && get_ptime(Melee) >= 300){ 
               	   activateFastMelee = FALSE;
                }
              	if(activateFastMelee){ 
              		combo_run(FastMelee);
              	} 
              	if(combo_running(FastMelee) && (get_ival(Ads) || get_ival(Fire))){
					combo_stop(FastMelee);
					activateFastMelee = FALSE;
				}
            }
            if(fastMelee[profileIdx] == 2){ 
	        	if(get_val(Melee)){ 
	        		combo_run(FastMelee);
	        	}
	        	if(event_release(Melee)){
	        		combo_stop(FastMelee);
	        	}
	        }
            if(snakePlate){ 
            	if(get_ival(Swap) && get_ptime(Swap) > 650) 
	                combo_run(SnakePlate); 
	        }
	        if(cancelSlideMw2 == 1 || cancelSlideMw2 == 2){ 
	        	if(!get_ival(Ads) && (get_val(moveLY) < -80) || (get_val(moveLX) < -85) || (get_val(moveLX) > 85)){
					if(event_release(Crouch)){ 
						if(cancelSlideMw2 == 1)
							combo_run(CancelSlideMW2);
						else if(cancelSlideMw2 == 2)
							combo_run(CancelSlideMW2Tac);	
					}
				}
			}
			if(tacSprint){ 
				leftStick = getPolar(POLAR_LS,POLAR_RADIUS);
			    if(event_release(Sprint) && get_ptime(Sprint) <= 200 && leftStick > (runningThreshold * 32767/100)){
			        sprintActive = TRUE;
			    }
			    if(sprintActive){ 
			        combo_run(tacSprint);
			    } 
			    if(leftStick < (runningThreshold * 32767/100) && combo_running(tacSprint) || get_val(Ads) || get_val(Fire)){
			        combo_stop(tacSprint);    
			        sprintActive = FALSE;
			    } 
		    }
		    if(mw2GWalk){
	            if(get_val(moveLY) < -80 && get_val(Sprint) && get_ptime(Sprint) > 300){
	            	gorillaWalk = TRUE;
	            } 
	            if(gorillaWalk){ 
	           		combo_run(G_Walk);
	           	}	
	           	if(combo_running(G_Walk) && (event_press(Ads) || event_press(Fire) || (get_val(moveLY) >-80))){
			    	gorillaWalk = FALSE;
			    	combo_stop(G_Walk);
	       	    }
        	}
        	if(dolphinCancel){
		    	if(get_ival(Crouch) && get_val(PS4_LY) < -80 && get_ptime(Crouch) >= 225){        
		        	combo_run(DolphinCancel)
			    }
			}
			if(silentShot[profileIdx] == 1){ 
				if(get_ival(Ads) && get_val(Fire) || get_val(Fire)){
      				combo_run(cancelAnimation);
      			}
      		}
      		if(autoAim[profileIdx] == 1){ 
				if(get_ival(Fire))
					set_val(Ads,100);
			} 
			if(weaponSwap){
				if(weaponSwapActivation == 0){ 
                	if(event_press(PS4_TRIANGLE) && get_brtime(PS4_TRIANGLE) <= 200){
                        combo_run(WeaponSwap);
                    }
	    		}
	    		if(weaponSwapActivation == 1){ 
	    			activateSwap = TRUE;
	    			
	    			if(activateSwap)
	    				combo_run(WeaponSwap);
	    			else 
	    				combo_stop(WeaponSwap);
	    		}	
			}
	    }//!modMenu && !editMenu
	} 
	set_val(TRACE_1,toggleRapidFire[profileIdx]);
	set_val(TRACE_2,dropShotmw2FireType[profileIdx]);
} // END OF MAIN BLOCK

combo burstFireCmb {
    wait(random(burstHoldTime[profileIdx] >> 1,burstHoldTime[profileIdx]));
    set_val(Fire, 0);
    wait(random(burstRestTime[profileIdx] >> 1,burstRestTime[profileIdx]));
}
int activateSwap;
combo WeaponSwap{
wait(200);
set_val(PS4_DOWN, 100);
wait(200);
set_val(PS4_DOWN, 0);
set_val(PS4_LX, 0);
wait(300);
set_val(PS4_SQUARE, 100);
set_val(PS4_LX, 0);
wait(100);
set_val(PS4_SQUARE, 0);
set_val(PS4_LX, 0);
wait(300);
set_val(PS4_CIRCLE,100);
wait(100);
set_val(PS4_CIRCLE,0);
if(weaponSwapActivation == 1){
	activateSwap = FALSE;
	weaponSwap = FALSE;
} 
}
function GetAngle(getShapes,getSinCos,Rad){ 
	Rad = Rad >> 1;
	if(TaylorShapesInfo[getShapes][5] == 0){ 
		if(spiralChange[profileIdx]){ 
			Spiral(Rad)
			cosAngle  = ((cos(TaylorShapesInfo[getShapes][1] + getSinCos) * innerSpiral/TaylorShapesInfo[getShapes][3] )/(23170) << 1) + trackingAngleOne;
    		sinAngle  = ((sin(TaylorShapesInfo[getShapes][2] + getSinCos) * outerSpiral/TaylorShapesInfo[getShapes][4] )/(23170) << 1) + trackingAngleTwo; 
       	}
        else { 
			cosAngle  = ((cos(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/ (23170) << 1) + trackingAngleOne;
			sinAngle  = ((sin(TaylorShapesInfo[getShapes][2] + getSinCos) * Rad/TaylorShapesInfo[getShapes][4])/ (23170) << 1) + trackingAngleTwo;
		} 
	} 
    if(TaylorShapesInfo[getShapes][5] == 1){ 
    	Helix();
    	if(spiralChange[profileIdx]){ 
    		Spiral(Rad)
        	cosAngle  = ((innerSpiral * y)/(23170) << 1)+ trackingAngleOne;
            sinAngle  = ((outerSpiral * x)/(23170) << 1)+ trackingAngleTwo;
        }
        else { 
        	cosAngle  = ((Rad * y)/(23170) << 1)+ trackingAngleOne;
            sinAngle  = ((Rad * x)/(23170) << 1)+ trackingAngleTwo;
        } 	
    } 
	if(TaylorShapesInfo[getShapes][5] == 2){ 
		if(Positionv3 == 0){ 
			cosAngle  = ((cos(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/(23170) << 1) + trackingAngleOne;
			sinAngle  = ((sin(TaylorShapesInfo[getShapes][2] + getSinCos) * Rad/TaylorShapesInfo[getShapes][4])/(23170) << 1) + trackingAngleTwo;
		} 
		if(Positionv3 == 1){ 
			cosAngle  = ((cos(TaylorShapesInfo[getShapes][2] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/(23170) << 1) + trackingAngleOne;
		   	sinAngle  = ((sin(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][4])/(23170) << 1) + trackingAngleTwo;   	
		} 
	    Positionv3 ++ 
		if(Positionv3 == 2){ 
		  	Positionv3= 0;
		}
	} 
	if(getShapes == 9) {  
	    if(spiralChange[profileIdx]){ 
	    	Spiral(Rad);
	    } 
		if(polarAngle < 45) {
			if(spiralChange[profileIdx]){
		    	cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // / 
		   	 	sinAngle = ((outerSpiral * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		   	}
		   	else { 
		   		cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // / 
		   	 	sinAngle = ((Rad * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		   	 }  
		} 
		else if(polarAngle <  90) { 
			if(spiralChange[profileIdx]){ 
				cosAngle = ((innerSpiral/2 * cos(getSinCos))/ (23170) << 1)+ trackingAngleOne; // | 
		    	sinAngle = ((outerSpiral   * sin(getSinCos))/(23170) << 1) + trackingAngleTwo;
		    }
		    else { 
		    	cosAngle = ((Rad/2 * cos(getSinCos))/ (23170) << 1)+ trackingAngleOne; // | 
		    	sinAngle = ((Rad   * sin(getSinCos))/(23170) << 1) + trackingAngleTwo;
		    }
		} 
		else if(polarAngle < 135) { 
			if(spiralChange[profileIdx]){ 
				cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // \ 
		    	sinAngle = ((outerSpiral * sin(225 + getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    }
		    else { 
		    	cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // \ 
		    	sinAngle = ((Rad * sin(225 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }
		}  
		else if(polarAngle < 180) {
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral * cos(getSinCos))/ (23170) << 1)  + trackingAngleOne;
		    	sinAngle = ((outerSpiral/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }
		    else { 
		    	cosAngle = ((Rad * cos(getSinCos))/ (23170) << 1)  + trackingAngleOne;
		    	sinAngle = ((Rad/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }
		}
		else if(polarAngle < 225) { 
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // / 
		    	sinAngle = ((outerSpiral * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }
		    else { 
		    	cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // / 
		    	sinAngle = ((Rad * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }
		}  
		else if(polarAngle < 270) { 
			if(spiralChange[profileIdx]){
		    	cosAngle = ((innerSpiral/2 * cos(getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((outerSpiral * sin(getSinCos))/ (23170) << 1)+ trackingAngleTwo;
		    }
		    else {
		    	cosAngle = ((Rad/2 * cos(getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((Rad * sin(getSinCos))/ (23170) << 1)+ trackingAngleTwo; 
		    }
		}
		else if(polarAngle < 315) { 
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // \ 
		    	sinAngle = ((outerSpiral * sin(225 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }
		    else { 
		    	cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; // \ 
		    	sinAngle = ((Rad * sin(225 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    } 
		}
		else { 
			if(spiralChange[profileIdx]){ 
		  		cosAngle = ((innerSpiral *   cos(getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((outerSpiral/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }else { 
		    	cosAngle = ((Rad *   cos(getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((Rad/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    } 		}
	}
	if(getShapes == 10) { 
		if(spiralChange[profileIdx]){ 
			Spiral(Rad);
		} 
		if(anglePosition == 0){ 
			if(spiralChange[profileIdx]){ 
				cosAngle = ((innerSpiral   * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
			    sinAngle = ((outerSpiral/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
			}else{ 
				cosAngle = ((Rad   * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((Rad/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    }
		} 
		if(anglePosition == 1){  
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((outerSpiral * sin(225 + getSinCos))/ (23170) << 1)+ trackingAngleTwo; 
		    }else { 
		    	cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((Rad * sin(225 + getSinCos))/ (23170) << 1)+ trackingAngleTwo; 
		    } 
		} 
		if(anglePosition == 2){  
			if(spiralChange[profileIdx]){ 
				cosAngle = ((innerSpiral/2 * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((outerSpiral   * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    }else { 
		    	cosAngle = ((Rad/2 * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((Rad   * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    } 
		}  
		if(anglePosition == 3){ 
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((outerSpiral * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }else { 
		    	cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((Rad * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    } 
		}
		if(anglePosition == 4){  
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral   * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((outerSpiral/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    }else{ 
		    	cosAngle = ((Rad   * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((Rad/2 * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    } 
		}  
		if(anglePosition == 5){ 
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((outerSpiral * sin(225 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }else{ 
		    	cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne; 
		    	sinAngle = ((Rad * sin(225 + getSinCos))/ (23170) << 1) + trackingAngleTwo; 
		    }
		}
		if(anglePosition == 6){ 
			if(spiralChange[profileIdx]){ 
		    	cosAngle = ((innerSpiral/2 * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
		        sinAngle = ((outerSpiral   * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    }else { 
		    	cosAngle = ((Rad/2 * cos(getSinCos))/ (23170) << 1) + trackingAngleOne; 
		        sinAngle = ((Rad   * sin(getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    }
		}
		if(anglePosition == 7){ 
			if(spiralChange[profileIdx]){ 
				cosAngle = ((innerSpiral * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((outerSpiral * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    }else {
		    	cosAngle = ((Rad * cos(180 + getSinCos))/ (23170) << 1) + trackingAngleOne;
		    	sinAngle = ((Rad * sin(135 + getSinCos))/ (23170) << 1) + trackingAngleTwo;
		    } 
	    } 
	    timer++
		if(timer >= speedAngle[profileIdx]){ 
			anglePosition ++
			timer = 0;
		} 
		if(anglePosition == 8) 
			anglePosition = 0;
	}
	if(TaylorShapesInfo[getShapes][5] == 4){
		if(spiralChange[profileIdx]){ 
			Spiral(Rad)
			cosAngle  = ((cos(TaylorShapesInfo[getShapes][1] + getSinCos) * innerSpiral/TaylorShapesInfo[getShapes][3] )/(23170) << 1) + trackingAngleOne;
    		sinAngle  = ((sin(TaylorShapesInfo[getShapes][2] + getSinCos * 2) / 2 * outerSpiral/TaylorShapesInfo[getShapes][4] )/(23170) << 1) + trackingAngleTwo; 
       	}
        else { 
			cosAngle  = ((cos(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/ (23170) << 1) + trackingAngleOne;
			sinAngle  = ((sin(TaylorShapesInfo[getShapes][2] + getSinCos * 2) / 2 * Rad/TaylorShapesInfo[getShapes][4])/ (23170) << 1) + trackingAngleTwo;
		} 
	}
}
function getLeftAngle(getShapes,getSinCos,Rad){ 
	Rad = Rad >> 1;
	if(taylorShapeCeorinInfo[getShapes][5] == 0){ 
		cosAngleL  = ((cos(taylorShapeCeorinInfo[getShapes][1] + getSinCos) * Rad/taylorShapeCeorinInfo[getShapes][3])/ (23170) << 1);
		sinAngleL  = ((sin(taylorShapeCeorinInfo[getShapes][2] + getSinCos) * Rad/taylorShapeCeorinInfo[getShapes][4])/ (23170) << 1);	 
	} 
    if(taylorShapeCeorinInfo[getShapes][5] == 1){ 
    	HelixL();
        cosAngleL  = ((Rad * y)/(23170) << 1);
        sinAngleL  = ((Rad * x)/(23170) << 1);   	
    } 
	if(taylorShapeCeorinInfo[getShapes][5] == 2){ 
		if(Positionv3 == 0){ 
			cosAngleL  = ((cos(taylorShapeCeorinInfo[getShapes][1] + getSinCos) * Rad/taylorShapeCeorinInfo[getShapes][3])/(23170) << 1);
			sinAngleL  = ((sin(taylorShapeCeorinInfo[getShapes][2] + getSinCos) * Rad/taylorShapeCeorinInfo[getShapes][4])/(23170) << 1);
		} 
		if(Positionv3 == 1){ 
			cosAngleL  = ((cos(taylorShapeCeorinInfo[getShapes][2] + getSinCos) * Rad/taylorShapeCeorinInfo[getShapes][3])/(23170) << 1);
		   	sinAngleL  = ((sin(taylorShapeCeorinInfo[getShapes][1] + getSinCos) * Rad/taylorShapeCeorinInfo[getShapes][4])/(23170) << 1);   	
		} 
		tartanTimerL ++;
		if(tartanTimerL >= leftStickSpeed[profileIdx]){ 
			Positionv3 ++
			tartanTimerL = 0;
		} 
		if(Positionv3 == 2){ 
		  	Positionv3= 0;
		}
	} 
	if(taylorShapeCeorinInfo[getShapes][5] == 3){ 
		cosAngleL = ((cos(taylorShapeCeorinInfo[getShapes][1] + getSinCos) * Rad/taylorShapeCeorinInfo[getShapes][3])/ (23170) << 1) ;
		sinAngleL = ((sin(taylorShapeCeorinInfo[getShapes][2] + getSinCos * 2) / 2 * Rad/taylorShapeCeorinInfo[getShapes][4])/ (23170) << 1) ;
	}
}
function HelixL(){ 
    increase = (increase % 32767);
    if(helixPosition == 0){ 
        x = increase; y = 32767 - increase;
       } 
    else if (helixPosition == 1){ 
        x = 32767 - increase; y = - increase; 
    }
    else if (helixPosition == 2){
        x = -increase; y = -32767 + increase; 
    }
    else if(helixPosition == 3) {  
        x = -32767 + increase; y = increase; 
    }
    helixTimer ++;
    if(helixTimer >= leftStickSpeed[profileIdx]){ 
    	helixPosition ++;
    	helixTimer = 0;
    }
    if(helixPosition == 4){ 
        helixPosition = 0;
    }    
 } 
function Helix(){ 
    increase = (increase % 32767);
    if(helixPosition == 0){ 
        x = increase; y = 32767 - increase;
       } 
    else if (helixPosition == 1){ 
        x = 32767 - increase; y = - increase; 
    }
    else if (helixPosition == 2){
        x = -increase; y = -32767 + increase; 
    }
    else if(helixPosition == 3) {  
        x = -32767 + increase; y = increase; 
    }
    helixPosition ++
    if(helixPosition == 4){ 
        helixPosition = 0;
    }    
 } 
function Spiral(Rad){ 
	if(!(cycleRefresh++ % timeInterval)){
        if(!spiralPosition1){
            innerSpiral -= 327
            if(innerSpiral < 654)
                spiralPosition1 = 1;   
        }
        else{
            innerSpiral += 327;
            if(innerSpiral > Rad)
                spiralPosition1 = 0;
        }
        if(!spiralPosition2){
            outerSpiral -= 327;
            if(outerSpiral < 654)
                spiralPosition2 = 1;
        }
        else{
            outerSpiral += 327;
            if(outerSpiral > Rad)
                spiralPosition2 = 0
                
        }
        cycleRefresh = 0;
	}    
}	
function correctAngle(angle){
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}
function sin(angle){
	if(aimType[profileIdx] == 0)
  		return lerp_16(pollarArr[(correctAngle(angle - 1))], pollarArr[(correctAngle(angle + 1))], 0x8000);
  	else
  		return lerp_16(linearArr[(correctAngle(angle - 1))], linearArr[(correctAngle(angle + 1))], 0x8000);
  	return 0;
}
function cos(angle){
	if(aimType[profileIdx] == 0)
    	return lerp_16(pollarArr[((correctAngle(angle - 1) + 90) % 360)],  pollarArr[((correctAngle(angle + 1) + 90) % 360)], 0x8000);
    else
    	return lerp_16(linearArr[((correctAngle(angle - 1) + 90) % 360)],  linearArr[((correctAngle(angle + 1) + 90) % 360)], 0x8000);
    return 0;
}
function lerp_16(a, b, t) { return fix_to_int(lerp(int_to_fix(a), int_to_fix(b), t)); }
function int_to_fix(a) { return a * 0x10000; }
function fix_to_int(a) { if (a >= 0) return (a + 0x10000 >> 1) / 0x10000; return (a - 0x10000 >> 1) / 0x10000; }
function fix_mul(v1, v2) { return ((v1 >> 8) * (v2 >> 8)); }
function lerp(a, b, f) { return fix_mul((0x10000 - f), a) + fix_mul(f, b); }
function rumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
function offset(Stick, Value) {
  if (Stick >= POLAR_RX) {
    set_val(Stick, clamp(Value * (32767 - abs(get_val(Stick))) / 32767 + get_val(Stick), -32767, 32767));
    return;
  }
  set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
}
function offsetAR(Stick,Value) {
  set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
  return;
}
combo QuickScope {
set_val(Ads,100);
wait(quickScopeDelay); 
set_val(Ads,100);
set_val(Fire,100);
wait(40);
set_val(Ads,100);
wait(40); 
}     
combo QuickScope2 {
set_val(Fire,100);
wait(200);
wait(10);
} 
combo FastMelee {
set_val(Melee, 100);
wait(random(35,45));
set_val(Melee, 0);
wait(30);  
}
combo JumpShot {
set_val(Jump,100);
wait(20);
set_val(Jump,0);
wait(20);
}
combo CrouchShotCmb {
set_val(Crouch,0);
wait(50);
set_val(Crouch,100);
wait(60);
}
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(PingDelay); 
}
combo RAPIDFIRE { 
	set_val(PS4_LY,0);
    wait(40);
    wait(HoldTime);
    set_val(Fire, 0);
    set_val(PS4_LY,0);
    wait(40);
    wait(RestTime);
}
combo BunnyHop{
    set_val(Jump,100);
    wait(10);
    set_val(Jump,0);
    wait(10);
}
combo cancelAnimation {
  set_val(Lethal,100);
  wait(100);
  set_val(Lethal,100);
  set_val(Swap,100);
  wait(40);
  set_val(Swap,0);
  wait(20);
}
combo DolphinCancel{
wait(800);
set_val(Sprint, 100);
wait(80);
set_val(Sprint, 0);
wait(80);
set_val(Sprint, 100);
wait(80);
set_val(Sprint, 0);
wait(80);
}
combo G_Walk{
set_val(moveLY,0);
wait(50);
set_val(Crouch,100);
wait(450);
set_val(Sprint,100);
wait(50);
set_val(Sprint,0);
wait(50);
set_val(Sprint,100);
wait(50);
set_val(Sprint,0);
wait(gWalkDelayTime);
}
combo antiRecoilCombo{
   AntirecoilVertical = get_val(aimRY) + handGunVert;  
   if(abs(get_val(aimRY)) < abs(handGunVert) +  5)
   		if(aimAssist[profileIdx] || rotationalAA[profileIdx] == 2)
    		set_val(aimRY, (AntirecoilVertical + (sinAngle / 327)));
   		else
    	    set_val(aimRY, (AntirecoilVertical));
	if(!(toggleRapidFire[profileIdx] && legacyARH == 1)){ 
		AntirecoilHorizontal = get_val(aimRX) + HorizontalStrength[profileIdx];
	    if(abs(get_val(aimRX)) < abs(HorizontalStrength[profileIdx])  + 5)
	    	if(aimAssist[profileIdx] || rotationalAA[profileIdx] == 2)
	   			set_val(aimRX, AntirecoilHorizontal + (cosAngle / 327));
	   		else
	   			set_val(aimRX, AntirecoilHorizontal); 	
	}
}
combo AkimboRapidFire1 {
offsetAR(moveLY,0);
wait(40);
set_val(Fire,100);
set_val(Ads,0);
wait(HoldTime);
offsetAR(moveLY,0);
wait(40);
set_val(Ads,100);
set_val(Fire,0);
wait(RestTime);
}
combo AkimboRapidFire2 {
offsetAR(moveLY,0);
wait(40);
set_val(Ads,100);
set_val(Fire,0);
wait(HoldTime);
offsetAR(moveLY,0);
wait(40);
set_val(Fire,100);
set_val(Ads,0);
wait(RestTime);
}
combo SnakeShotmw2{
set_val(Crouch,100);
wait(100);
set_val(moveLY,100);
wait(30);
set_val(Crouch,100);
wait(750);
set_val(Crouch,0);
set_val(moveLY,0);
wait(100);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(60);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(60);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(600);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(60);
}

combo DriveMode { 
cls_oled(OLED_BLACK);
print(centerPosition(getStringLength(misc[2]) ,OLED_FONT_MEDIUM_WIDTH), 10 ,OLED_FONT_MEDIUM , OLED_WHITE , misc[2]);
print(centerPosition(getStringLength(misc[3]) ,OLED_FONT_MEDIUM_WIDTH), 35 ,OLED_FONT_MEDIUM , OLED_WHITE , misc[3]);
wait(1500);
displayTitle = TRUE;
} 
combo driveModeOff { 
cls_oled(OLED_BLACK)
print(centerPosition(getStringLength(misc[2]) ,OLED_FONT_MEDIUM_WIDTH), 10 ,OLED_FONT_MEDIUM , OLED_WHITE , misc[2]);
print(centerPosition(getStringLength(misc[4]) ,OLED_FONT_MEDIUM_WIDTH), 35 ,OLED_FONT_MEDIUM , OLED_WHITE , misc[4]);
wait(1500);
displayTitle = TRUE;
} 
combo saved { 
cls_oled(OLED_BLACK);
print(centerPosition(getStringLength(misc[5]),OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,misc[5])
wait(500);
displayTitle = TRUE;
} 
combo Blink{
set_ledx(0,0);
wait(LedOn);
set_ledx(profileIdx,1);
wait(LedOff);
}
combo dropShotter {
set_val(Crouch,100);
wait(100);
set_val(moveLY,100);
wait(30);
set_val(Crouch,100);
if(aimAssist[profileIdx]){ 
	offsetAR(PS4_RY,-20 + sinAngle/327);
}else{ 
	offsetAR(PS4_RY,-20);
} 
wait(700);
set_val(Crouch,0);
set_val(moveLY,0);
wait(20);
} 
combo tacSprint { 
    set_val(Sprint, 100);
    wait(60);
    set_val(Sprint, 0);
    wait(delayTime);
    set_val(Melee,100);
    wait(40);
    set_val(Melee,0);
    wait(1000);
}
combo CancelSlideMW2Tac {
set_val(Crouch, 100);
wait(80);
set_val(Crouch, 0);
wait(slideDelayMw2);
set_val(Ads, 100);
wait(550);
set_val(Ads, 0);
wait(100);
set_val(Jump, 100);
wait(40);
set_val(Jump, 0);
wait(40);
}
combo CancelSlideMW2 {              
set_val(Crouch, 100);
wait(80);
set_val(Crouch, 0);
wait(slideDelayMw2);
wait(20);
set_val(Swap, 100);
wait(20);
set_val(Swap, 0);
wait(20);
set_val(Swap, 100);
wait(20);
set_val(Swap, 0);
wait(600);
set_val(Jump, 100);
wait(40);
set_val(Jump, 0);
wait(40);
}
function getPolar(Stick, AngleOrRadius) {
  if (AngleOrRadius) return 360 - get_polar(Stick, POLAR_ANGLE);
  return isqrt((get_val(Stick + 42) * get_val(Stick + 42)) + (get_val(Stick + 43) * get_val(Stick + 43)));   
}
function checkAdvancedValues(){  
    if(antiRecoilAdvanced[profileIdx] == 1){ 
        vertAntirecoilStart  = VerticalStart  [profileIdx];
        vertAntirecoilMid    = VerticalMid    [profileIdx];
        vertAntirecoilEnd    = VerticalEnd    [profileIdx];
        horizAntirecoilStart = HorizontalStart[profileIdx];
        horizAntirecoilEnd   = HorizontalEnd  [profileIdx];  
    }
    if(antiRecoilAdvanced[profileIdx] == 2){ 
        smartRumble = get_rumble(rumbleToUse()); 
        if(smartRumble > 10 && smartRumble < 90){  
            vertAntirecoilStart = VerticalStart[profileIdx] + smartRumble / 2;
            vertAntirecoilMid   = VerticalMid  [profileIdx] + smartRumble / 2;
            vertAntirecoilEnd   = VerticalEnd  [profileIdx] + smartRumble / 2;
        }
        else if(smartRumble < 10){ 
            vertAntirecoilStart = VerticalStart[profileIdx];
            vertAntirecoilMid   = VerticalMid  [profileIdx];
            vertAntirecoilEnd   = VerticalEnd  [profileIdx];
        } 
        horizAntirecoilStart = HorizontalStart [profileIdx];
        horizAntirecoilEnd   = HorizontalEnd   [profileIdx];
    }
    if(antiRecoilAdvanced[profileIdx] == 3){ 
        smartRumble = get_rumble(rumbleToUse()); 
        if(smartRumble > 10 && smartRumble < 90){  
            vertAntirecoilStart = VerticalStart[profileIdx] + smartRumble / 2;
            vertAntirecoilMid   = VerticalMid  [profileIdx];
            vertAntirecoilEnd   = VerticalEnd  [profileIdx];
        }
        else if(smartRumble < 10){ 
            vertAntirecoilStart = VerticalStart[profileIdx];
            vertAntirecoilMid   = VerticalMid  [profileIdx];
            vertAntirecoilEnd   = VerticalEnd  [profileIdx];
        } 
        horizAntirecoilStart = HorizontalStart [profileIdx];
        horizAntirecoilEnd   = HorizontalEnd   [profileIdx];
    }
    if(aimAssist[profileIdx] || rotationalAA[profileIdx] == 2){ 
        vertAntirecoilStart  = vertAntirecoilStart  + (sinAngle / 327);
        vertAntirecoilMid    = vertAntirecoilMid    + (sinAngle / 327);
        vertAntirecoilEnd    = vertAntirecoilEnd    + (sinAngle / 327); 
        horizAntirecoilStart = horizAntirecoilStart + (cosAngle / 327);
        horizAntirecoilEnd   = horizAntirecoilEnd   + (cosAngle / 327); 
    }     
} 
combo SnakePlate{
set_val(Crouch, 100);
wait(20);
set_val(Crouch, 0);
wait(20);
offset(PS4_LY, 100);
wait(50);
offset(PS4_LY, 0);
wait(50);
offset(PS4_LY, -75);
wait(50);
offset(PS4_LY, 0);
wait(50);
set_val(Jump, 100);
wait(20);
set_val(Jump, 0);
wait(50);
}
function customPolarSens(fId,fMid,fIndex) {
	fValue = get_val(fId);
    if(fMid != NOT_USE) {
    	fValueSens = -1;
    	if(fValue >= 0) fValueSens = 1;
        	fValue *= fValueSens;
        if(fValue <= fMid) 
        	fValue = (fValue * 16384) / fMid;
        else 
        	fValue = ((16384 * (fValue - fMid)) / (32767 - fMid)) + 16384;
        	fValue *= fValueSens;
    }
    if(fIndex != NOT_USE) {
        fValue = (fValue * fIndex) / 32767;
    }
    set_val(fId,clamp(fValue,-32768,32767));
    return;
}
function menuNavigation(indexVar,fMin,fMax){ 
    if(mainMenu){ 
        if(event_press(PS4_UP)){
           indexVar -= 1;
               updateDisplay = TRUE;
        }
        if(event_press(PS4_DOWN)){
            indexVar += 1;
            updateDisplay = TRUE; 
        }
    }
    if(!get_ival(Ads)){ 
        if(valRangeIdx[modNameIdx][3] == 1){ 
            if(event_release(PS4_RIGHT) && get_ptime(PS4_RIGHT) < 400){ 
                indexVar  += 1;
                highLight  = 0;
                updateDisplay = TRUE;
            }
            if(event_release(PS4_LEFT) && get_ptime(PS4_LEFT) < 400){ 
                indexVar  -= 1;
				highLight  = 0;
				updateDisplay = TRUE;
			}
		}
		else { 
			if(event_press(PS4_RIGHT)){ 
				indexVar  += 1;
				highLight  = 0;
	    		updateDisplay = TRUE;
			} 
			if(event_press(PS4_LEFT)){ 
				indexVar  -= 1;
				highLight  = 0;
				updateDisplay = TRUE;
			}
		}
	}
    if(event_release(PS4_CROSS)){
        if(mainMenu){
            modNameIdx =  mainMenuLimits[ mainNameIdx ][ 0 ];
            updateDisplay = TRUE;
            modMenu       = TRUE;
            mainMenu      = FALSE;
            if(update){ 
				getAdminValues();
			} 
        }
    }
    if(event_press(PS4_CROSS)){ 
        if(modMenu){ 
            if(valRangeIdx[modNameIdx][2] == 1){
                valNameIdx    = valRangeIdx[modNameIdx][0];
                modMenu       = FALSE;
                editMenu      = TRUE;
                updateDisplay = TRUE;
                if(update){ 
					getAdminValues();
				} 
            }
        }
    }
    if(event_press(PS4_CIRCLE) && !recoilEdit){
		if(mainMenu){ 
			updateDisplay = FALSE;
            mainMenu      = FALSE;
            modMenu       = FALSE;
            editMenu      = FALSE;
            displayTitle  = TRUE;
			Save(); 
			combo_run(saved);
			if(update){ 
				getAdminValues();
			} 	
		} 
		if(valRangeIdx[modNameIdx][3] == 0){ 
			if(modMenu){ 
				updateDisplay = TRUE;
            	mainMenu      = TRUE;
           	 	modMenu       = FALSE;
            	editMenu      = FALSE;
            
				if(update){ 
					getAdminValues();
				} 
				
			}
			else if(editMenu){ 
				//getMenuStatus(TRUE,FALSE,TRUE,FALSE,FALSE)
				updateDisplay = TRUE;
            	modMenu       = TRUE;
            	editMenu      = FALSE;
           	    mainMenu      = FALSE;
			
				if(update){ 
					getAdminValues();
				} 
				
			}
		}
	} 
	if(valRangeIdx[modNameIdx][3] == 1){ 
		if(event_release(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) < 300){ 
			if(modMenu){ 
				updateDisplay = TRUE;
            	mainMenu      = TRUE;
           	 	modMenu       = FALSE;
            	editMenu      = FALSE;
            	
			    if(update){ 
					getAdminValues();
				}
				
			}
			else if(editMenu){ 
				updateDisplay = TRUE;
            	modMenu       = TRUE;
            	editMenu      = FALSE;
           	    mainMenu      = FALSE;
				
				if(update){ 
					getAdminValues();
				} 
				
			}
		}
	} 
    if(event_press(PS4_TRIANGLE)){ 
		if(modMenu){ 
			if(valRangeIdx[modNameIdx][6] == 1)
				profileIdx = rotateVar(profileIdx + 1,0,2);
		}
		else if(editMenu){ 
			if(valuesMinMax[valNameIdx][5] == 1)
				profileIdx = rotateVar(profileIdx + 1,0,2);
		} 
		updateDisplay = TRUE;
	} 
	if(mainMenu || modMenu || editMenu && !recoilEdit){ 
		BlockButtonPress ();
	}
    if(recoilEdit){ 
		set_val(PS4_RIGHT,0);set_val(PS4_LEFT,0);set_val(PS4_UP,0);set_val(PS4_DOWN,0);	
		if(menuTimeOut){
			checkRecoilMenuButtons();
			if(update){ 
				getAdminValues();
			} 
		} 
	} 
    indexVar = rotateVar(indexVar,fMin,fMax);
    return indexVar;
}

function fireTypeSwitch(fIdx,fVar,fMax){ 
	if(modNameIdx == fIdx){ 
		if(event_press(PS4_R1)){
			fVar ++;
			updateDisplay = TRUE;
			if(!fVar)
				combo_run(rumbleOff);
			else
				combo_run(rumbleOn); 
		}
		if(event_press(PS4_L1)){ 
			fVar --;
			updateDisplay = TRUE;
			if(!fVar)
				combo_run(rumbleOff);
			else
				combo_run(rumbleOn); 
		}
		fVar    = rotateVar(fVar,0,fMax);  
		
		
		if(modNameIdx == 0|| modNameIdx == 1){ 
			print(centerPosition(getStringLength(arActivation[standardARFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,arActivation[standardARFireType[profileIdx]])	
		}
		else if(modNameIdx == 2){ 
			print(centerPosition(getStringLength(arActivation[progressiveARFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,arActivation[progressiveARFireType[profileIdx]])	
		}
		else if(modNameIdx == 4){ 
			print(centerPosition(getStringLength(aimAssistType[taylorFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,aimAssistType[taylorFireType[profileIdx]])	
		}
		else if(modNameIdx == 5){ 
			print(centerPosition(getStringLength(aimAssistType[rotationalFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,aimAssistType[rotationalFireType[profileIdx]])	
		}
		else if(modNameIdx == 6){ 
			print(centerPosition(getStringLength(handGunFireType[rapidFireType[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),34 ,OLED_FONT_SMALL , OLED_WHITE ,handGunFireType[rapidFireType[profileIdx]]);
		}
		else if(modNameIdx == 8){ 
			print(centerPosition(getStringLength(handGunFireType[burstFireType[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),34 ,OLED_FONT_SMALL , OLED_WHITE ,handGunFireType[burstFireType[profileIdx]]);
		}
		else if(modNameIdx == 9){ 
			print(centerPosition(getStringLength(instaDropOpt[dropShotmw2FireType[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),34  ,OLED_FONT_SMALL , OLED_WHITE ,instaDropOpt[dropShotmw2FireType[profileIdx]]);
		}
		else if(modNameIdx == 10){ 
			print(centerPosition(getStringLength(snakeShotOpt[snakeShotActivationmw2[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),34  ,OLED_FONT_SMALL , OLED_WHITE ,snakeShotOpt[snakeShotActivationmw2[profileIdx]]);
		}
		else if(modNameIdx == 11){ 
			print(centerPosition(getStringLength(crouchShotOpt[crouchShotActivation[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),34  ,OLED_FONT_SMALL , OLED_WHITE ,crouchShotOpt[crouchShotActivation[profileIdx]]);
		}
		else if(modNameIdx == 12){ 
			print(centerPosition(getStringLength(jumpShotOpt[jumpShotActivation[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),34  ,OLED_FONT_SMALL , OLED_WHITE ,jumpShotOpt[jumpShotActivation[profileIdx]]);
		}
		else if(modNameIdx == 16){ 
			print(centerPosition(getStringLength(quickScopeOpt[quickScopeActivation[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),34  ,OLED_FONT_SMALL , OLED_WHITE ,quickScopeOpt[quickScopeActivation[profileIdx]]);
		}
		else if(modNameIdx == 27){ 
			print(centerPosition(getStringLength(weaponSwapOpt[weaponSwapActivation]) ,OLED_FONT_SMALL_WIDTH),34  ,OLED_FONT_SMALL , OLED_WHITE ,weaponSwapOpt[weaponSwapActivation]);
		}
	}
	return fVar;
} 

function antirecoilActivation(fVar){ 
	if(fVar == 0){ 
		if(get_ival(Ads) && get_val(Fire)){ 
			return TRUE;
		}
	}
	if(fVar == 1){ 
		if(get_val(Fire) && !get_ival(Ads)){
			return TRUE;
		}
	} 
	if(fVar == 2){ 
		if(get_ival(Ads) && get_val(Fire) || get_val(Fire)){ 
			return TRUE;
		} 
	}
	return 0;
} 
function aimAssistActivation(fVar){ 
	if(fVar == 0){ 
		if(get_ival(Ads) || get_ival(Fire)){ 
			return TRUE;
		}
	} 
	if(fVar == 1){ 
		if(get_ival(Ads) && get_ival(Fire)){ 
			return TRUE;
		} 
	} 
	if(fVar == 2){ 
		if(get_ival(Fire) && !get_ival(Ads)){
			return TRUE;
		} 
	} 
	if(fVar == 3){ 
		if(get_ival(Ads) && get_ival(Fire) || get_ival(Fire)){ 
			return TRUE;
		}
	} 
	return 0;
} 
function rapidFireActivationType(fVar){ 
	if(fVar == 0){ 
		if(get_val(Fire) && !get_ival(Ads)){ 
			return TRUE;
		}
	}
	if(fVar == 1){ 
		if(get_ival(Ads) && get_val(Fire)){ 
			return TRUE;
		}
	} 
	if(fVar == 2){ 
		if(get_ival(Ads) && get_ival(Fire) || get_val(Fire)){ 
			return TRUE;
		}
	} 
	if(fVar == 3){ 
		if(get_ival(Ads)){
			if(get_val(Lethal)){ 
				swap(Lethal,Fire);
				return TRUE;
			}
			set_val(Lethal,0);
		}
	} 
	return 0;
}
function miscModActivationType(fVar){ 
    if(fVar  == 0){   
        if(get_val(Fire) && get_ptime(Fire) <= 200 && !get_val(Ads)){ 
            return TRUE;
        }
    }
    if(fVar  == 1){            
         if(get_ival(Ads) && get_val(Fire) && get_ptime(Fire) <= 200){ 
            return TRUE;
        }
    }
    if(fVar  == 2){    
        if(get_val(Ads) && get_val(Fire) && event_press(Crouch) && get_ptime(Crouch) <= 200){
            return TRUE;
        }
    }    
    if(fVar == 3){  // Fire Tap Crouch 
        if(get_ival(Fire) && event_press(Crouch) && get_ptime(Crouch) <1720){
            return TRUE;
        }
    }
    if(fVar  == 4){ 
        if(get_ival(Ads)){
            if(get_val(Lethal)){ 
                swap(Lethal,Fire);
            }
            if(get_ptime(Lethal) <= 200){ 
                return TRUE;
            }
            set_val(Lethal,0);
        }
    }         
    return 0;
}
 const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		

function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
function rotateVar(Value,Min,Max){  
    if(Value > Max) 
        return Min;         
    if(Value < Min)
        return Max;     
    
    return Value;    
}
combo rumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
}
combo rumbleOff {                        
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
}
function getStringLength(offset) { 
    stringLength = 0;
    do { 
        offset++;
        stringLength++;
    } while (duint8(offset));
    return stringLength;
 } 
/*
============================================================================================================================================
 Center X Function (Made By Batts) 
============================================================================================================================================
*/
function centerPosition(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
/*
============================================================================================================================================
  NumberToString () (Made By Batts)                                                                                                                     
============================================================================================================================================
*/   
function NumberToString(f_val,f_digits) {
    bufferIndex = 1;  
    digitIndex = 10000;
    if(f_val < 0) {                    //--neg numbers
         putc_oled(bufferIndex,45);    //--add leading "-"
         bufferIndex += 1;
         f_val = abs(f_val);
    } 
    for(charIndex = 5; charIndex >= 1; charIndex--) {
        if(f_digits >= charIndex) {
            putc_oled(bufferIndex,(f_val / digitIndex) + 48);
            f_val %= digitIndex;
            bufferIndex ++; 
            if(charIndex == 4) {
                putc_oled(bufferIndex,44);//--add ","
                bufferIndex ++;
            }
        }
        digitIndex /= 10;
    } 
    if(valuesMinMax[valNameIdx][4] == 0){
    	puts_oled(centerPosition(bufferIndex - 1,OLED_FONT_MEDIUM_WIDTH),26,OLED_FONT_MEDIUM,bufferIndex - 1,OLED_WHITE);
    } 
    if(valuesMinMax[valNameIdx][4] == 1){
    	puts_oled(centerPosition(bufferIndex - 1,OLED_FONT_MEDIUM_WIDTH),31,OLED_FONT_MEDIUM,bufferIndex - 1,OLED_WHITE);
    } 
} 
function FindDigits(num) {
   logVal = 0;
   do {
      num /= 10;
      logVal++;
   } while (num);
   return logVal;
}
const uint8 BlockButtons [] = {  
  PS4_L2,PS4_OPTIONS,PS4_LEFT, PS4_RIGHT,PS4_UP,PS4_DOWN,PS4_CROSS,PS4_CIRCLE,PS4_SQUARE,PS4_TRIANGLE,PS4_L1,PS4_R1,PS4_R2}; 
function BlockButtonPress (){  
    for(i = 0; i < 13; i++){
    	if(get_ival(BlockButtons[i]) || event_press(BlockButtons[i])){
        	set_val(BlockButtons[i],0);
        	set_val(Tactical,0);
        	set_val(Ping,0);
        	set_val(Melee,0);
        	set_val(Reload,0);
        	set_val(Swap,0);
        	set_val(Lethal,0);
        }    
    }
}
//======================================================================
//       Toggle Switch Function                                         
//======================================================================
function toggleSwitch(fVar,fIdx){ 
    if(modNameIdx == fIdx){ 
        if(event_press(PS4_UP)){ 
            fVar = rotateVar(fVar + 1,0,toggleMax[modNameIdx]);  // Max Amount of Toggles From Array
            updateDisplay = TRUE;
            if(modNameIdx == 3){ 
				update = TRUE;
			}
            if(!fVar)
	            combo_run(rumbleOff);
            else
	            combo_run(rumbleOn); 
        }
        if(event_press(PS4_DOWN)){ 
            fVar = rotateVar(fVar - 1,0,toggleMax[modNameIdx]); // Max Amount of Toggles From Array
            updateDisplay = TRUE; 
            if(modNameIdx == 3){ 
				update = TRUE;
			}
            if(!fVar)
	            combo_run(rumbleOff);
            else
	            combo_run(rumbleOn); 
        }
        if(modNameIdx == 0){ 
			if(fVar == 1){ 
				antiRecoilAdvanced[profileIdx] = 0;
				antiRecoilPolar[profileIdx] = 0;
			}
		} 
		if(modNameIdx == 1){ 
			if(fVar == 1){ 
				antiRecoilAdvanced[profileIdx] = 0;
				antiRecoilBasic[profileIdx]    = 0;
			}
		} 
		if(modNameIdx == 2){ 
			if(fVar == 1){ 
				antiRecoilBasic[profileIdx] = 0;
				antiRecoilPolar[profileIdx] = 0;
			}
		} 
		if(modNameIdx == 6){ 
			rapidQT[profileIdx] = fVar;
			if(fVar == 1){ 
				toggleAkimbo[profileIdx] = 0;
			}
		}
		if(modNameIdx == 7){ 
			akimboQT[profileIdx] = fVar;
			if(fVar == 1){ 
				toggleRapidFire[profileIdx] = 0;
				toggleBurstFire[profileIdx] = 0;
				autoAim[profileIdx]         = 0;
			}
		}
		if(modNameIdx == 8){ 
			if(fVar == 1){ 
				toggleAkimbo[profileIdx]    = 0;
			}
		}
		if(modNameIdx == 13){ 
			if(fVar == 1){ 
				toggleAkimbo[profileIdx]    = 0;
			}
		}
		if(modNameIdx == 11){
			crouchQT[profileIdx] = fVar;
		}
		if(modNameIdx == 12){
			jumpQT[profileIdx] = fVar;
		}
		if(modNameIdx == 15){
			hBreathQT[profileIdx] = fVar;
		}
		if(modNameIdx == 16){
			qScopeQT[profileIdx] = fVar;
		}
		if(modNameIdx == 9){ 
			dropShotQT[profileIdx] = fVar;
		} 
		if(modNameIdx == 10){ 
			mw2SnakeQT[profileIdx] = fVar;
		} 
		if(modNameIdx == 17){ 
			sScopeQT[profileIdx] = fVar;
		} 
		if(modNameIdx == 27){
			wSwapQT[profileIdx] = fVar;
		} 
        /* Print Strings here... */ 
        if(modNameIdx == 0 ){ 
            print(centerPosition(getStringLength(antiRecoilBasic_Opt[antiRecoilBasic[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),49  ,OLED_FONT_SMALL , OLED_WHITE ,antiRecoilBasic_Opt[antiRecoilBasic[profileIdx]]);
        }   
        else if(modNameIdx == 1 ){ 
            print(centerPosition(getStringLength(antiRecoilPolar_Opt[antiRecoilPolar[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),49  ,OLED_FONT_SMALL , OLED_WHITE ,antiRecoilPolar_Opt[antiRecoilPolar[profileIdx]]);
        }   
        else if(modNameIdx == 2 ){ 
            print(centerPosition(getStringLength(antiRecoilAdvanced_Opt[antiRecoilAdvanced[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),49  ,OLED_FONT_SMALL , OLED_WHITE ,antiRecoilAdvanced_Opt[antiRecoilAdvanced[profileIdx]]);
        }   
        else if(modNameIdx == 3 ){ 
            print(centerPosition(getStringLength(adminAA[adminAimAssistValues[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,adminAA[adminAimAssistValues[profileIdx]]);
        }   
        else if(modNameIdx == 4 ){ 
            print(centerPosition(getStringLength(aimAssist_Opt[aimAssist[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),49  ,OLED_FONT_SMALL , OLED_WHITE ,aimAssist_Opt[aimAssist[profileIdx]]);
        }   
        else if(modNameIdx == 7 ){ 
            print(centerPosition(getStringLength(toggleAkimbo_Opt[toggleAkimbo[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,toggleAkimbo_Opt[toggleAkimbo[profileIdx]]);
        }   
        else if(modNameIdx == 15){ 
            print(centerPosition(getStringLength(holdBreath_Opt[holdBreath[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,holdBreath_Opt[holdBreath[profileIdx]]);
        }   
        else if(modNameIdx == 19){ 
            print(centerPosition(getStringLength(cancelSlideMw2_Opt[cancelSlideMw2]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,cancelSlideMw2_Opt[cancelSlideMw2]);
        }   
        else if(modNameIdx == 21){ 
        	fMeleeQT[profileIdx] = fVar;
            print(centerPosition(getStringLength(fastMelee_Opt[fastMelee[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,fastMelee_Opt[fastMelee[profileIdx]]);
        }   
        else if(modNameIdx == 23){ 
            print(centerPosition(getStringLength(vmSpeed_Opt[vmSpeed]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,vmSpeed_Opt[vmSpeed]);
        }   
        else if(modNameIdx == 28){ 
            print(centerPosition(getStringLength(buttonLayouts_Opt[buttonLayouts]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,buttonLayouts_Opt[buttonLayouts]);
        }   
        else if(modNameIdx == 29){ 
            print(centerPosition(getStringLength(stickLayouts_Opt[stickLayouts]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,stickLayouts_Opt[stickLayouts]);
        } 
        else if(modNameIdx == 36){ 
			print(centerPosition(getStringLength(UnmapButtons[UnmapBtnIdx[0]]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,UnmapButtons[UnmapBtnIdx[0]])	
	    } 
	    else if(modNameIdx == 37){ 
			print(centerPosition(getStringLength(UnmapButtons[UnmapBtnIdx[1]]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,UnmapButtons[UnmapBtnIdx[1]])	
	    } 
        else if(modNameIdx == 43){ 
            print(centerPosition(getStringLength(weaponName_Opt[weaponName[profileIdx]]) ,OLED_FONT_SMALL_WIDTH),40  ,OLED_FONT_SMALL , OLED_WHITE ,weaponName_Opt[weaponName[profileIdx]]);
        } 
        else { 
			if(valRangeIdx[modNameIdx][7] == 0){ 
				if(fVar == 1)
					print(centerPosition(getStringLength(Toggle[1]),OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Toggle[1])	
				else
					print(centerPosition(getStringLength(Toggle[0]),OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Toggle[0])	
			}
			
			if(valRangeIdx[modNameIdx][7] == 1){ 
				if(fVar == 1)
					print(centerPosition(getStringLength(Toggle[1]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,Toggle[1])	
				else
					print(centerPosition(getStringLength(Toggle[0]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,Toggle[0])	
			}
			
		}
    }
    return fVar; 
} 
//======================================================================
//       Edit Switch Function                                         
//======================================================================
function editSwitch(fVar,fIdx){ 
    if(valNameIdx == fIdx){ // Which valNameIdx number we are on \\
        if(event_press(PS4_UP)){ 
            fVar += valuesMinMax[valNameIdx][2] // Increase value by desired in Array 
            updateDisplay = TRUE;
            if(!fVar)
	            combo_run(rumbleOff);
            else
	            combo_run(rumbleOn); 
        }
        if(event_press(PS4_DOWN)){ 
            fVar -= valuesMinMax[valNameIdx][2] // Increase value by desired in Array 
            updateDisplay = TRUE;
            if(!fVar)
	            combo_run(rumbleOff);
            else
	            combo_run(rumbleOn); 
        }
        fVar = rotateVar(fVar,valuesMinMax[valNameIdx][0],valuesMinMax[valNameIdx][1]);// Min and Max Value
        
        /*===============================================================================================================================
        Display Toggle Strings 
        =================================================================================================================================
        */
		if(valNameIdx == 13){ 
			print(centerPosition(getStringLength(aimType_Opt[aimType[profileIdx]]),OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,OLED_WHITE,aimType_Opt[aimType[profileIdx]]) 
		}       
		else if(valNameIdx == 14){ 
			print(centerPosition(getStringLength(aimAssistTypeRS_Opt[aimAssistTypeRS[profileIdx]]),OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,OLED_WHITE,aimAssistTypeRS_Opt[aimAssistTypeRS[profileIdx]]) 
		}       
		else if(valNameIdx == 15){ 
			if(aimType[profileIdx] == 0)
				print(centerPosition(getStringLength(taylorShapes_Opt[taylorShapes[profileIdx]]),OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,OLED_WHITE,taylorShapes_Opt[taylorShapes[profileIdx]]) 
			else
				print(centerPosition(getStringLength(aimShapeLinear[taylorShapes[profileIdx]]),OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,OLED_WHITE,aimShapeLinear[taylorShapes[profileIdx]])
		}       
		else if(valNameIdx == 19){ 
			print(centerPosition(getStringLength(spiralChange_Opt[spiralChange[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,spiralChange_Opt[spiralChange[profileIdx]]) 
		}       
		else if(valNameIdx == 20){ 
			print(centerPosition(getStringLength(boostOnFire_Opt[boostOnFire[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,boostOnFire_Opt[boostOnFire[profileIdx]]) 
		}       
		else if(valNameIdx == 24){ 
			print(centerPosition(getStringLength(taylorTracking_Opt[taylorTracking[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,taylorTracking_Opt[taylorTracking[profileIdx]]) 
		}       
		else if(valNameIdx == 27){ 
			print(centerPosition(getStringLength(trackingBoostOnFire_Opt[trackingBoostOnFire[profileIdx]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,trackingBoostOnFire_Opt[trackingBoostOnFire[profileIdx]]) 
		}       
		else if(valNameIdx == 30){ 
			print(centerPosition(getStringLength(ceorinShape_Opt[ceorinShape[profileIdx]]),OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,OLED_WHITE,ceorinShape_Opt[ceorinShape[profileIdx]]) 
		}       
		else if(valNameIdx == 34){ 
			print(centerPosition(getStringLength(legacyARH_Opt[legacyARH]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,legacyARH_Opt[legacyARH]) 
		}       
        else { 
            if(fVar == 1)
            print(centerPosition(getStringLength(Toggle[1]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Toggle[1])    
        else
            print(centerPosition(getStringLength(Toggle[0]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Toggle[0])    
        }
    }
    return fVar;
}
/*
==================================================================================================================
Edit Values Function For Edit Menu 
==================================================================================================================
*/
function editValues(fVar,fIdx){ 
	if(valNameIdx == fIdx){ 
		if(get_ival(Ads)){ // Ads 
			if(event_press(PS4_RIGHT)){ 
				fVar += valuesMinMax[valNameIdx][2] // Increase value by desired in Array 
				updateDisplay = TRUE;
			}
			if(event_press(PS4_LEFT)){ 
				fVar -= valuesMinMax[valNameIdx][2] // Decrease value by desired in Array 
				updateDisplay = TRUE;
			}
			if(event_press(PS4_UP)){ 
				fVar += valuesMinMax[valNameIdx][3] // Increase value by desired in Array 
				updateDisplay = TRUE;
			}
			if(event_press(PS4_DOWN)){ 
				fVar -= valuesMinMax[valNameIdx][3] // Increase value by desired in Array 
				updateDisplay = TRUE;
			}
			fVar = clamp(fVar,valuesMinMax[valNameIdx][0],valuesMinMax[valNameIdx][1]);// Min and Max Value
		}
		if(valNameIdx == 9  || valNameIdx == 12){ 
			NumberToString(fVar * 100,FindDigits(fVar * 100));   
		}
		else { 
			NumberToString(fVar,FindDigits(fVar)); 
		} 		
	}
	return fVar;
}
function displayMainIdx(activeString,previousString,nextString){
	if(mainNameIdx == activeString){ 
		print(centerPosition(getStringLength(mainmenuNames[activeString]),OLED_FONT_SMALL_WIDTH),21,OLED_FONT_SMALL,OLED_BLACK,mainmenuNames[activeString])
		print(centerPosition(getStringLength(mainmenuNames[nextString]),OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,mainmenuNames[nextString])
		print(centerPosition(getStringLength(mainmenuNames[previousString]),OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,OLED_WHITE,mainmenuNames[previousString])
	} 
} 
int displayToggles;
function presetQuickToggles(fHold,fPress,fVar,fIdx,fMax,fState) {  
	if(get_ival(fHold)){
		if(event_release(fPress) && get_ptime(fPress) < 300){ 
		    modNameIdx = fIdx;
			if(fVar){
				fVar = rotateVar(fVar++,0,fMax);
			}
			else {
				if(!fState){ 
					fVar = rotateVar(fVar++,0,fMax);
					fState = fVar;
				}
				else 
					fVar = fState;
		    } 	
			displayToggles = TRUE;
		}
		if(get_val(fPress) && get_ptime(fPress) == 300){ 
			if(fVar){
				fVar = 0;
			}
			else { 
				if(!fState){ 
					fVar = rotateVar(fVar++,0,0);
					fState = fVar;
				}
				else 
					fVar = fState;
		    } 	
			displayToggles = TRUE;		
		}
		set_val(fPress, 0) 
	} 
	if(modNameIdx == 6){ 
		if(fVar == 1){ 
			toggleAkimbo[profileIdx] = 0;
		}
	} 
	else if(modNameIdx == 7){ 
		if(fVar >= 1){ 
			toggleRapidFire[profileIdx] = 0;
			toggleBurstFire[profileIdx] = 0;
		}
	}
	else if(modNameIdx == 8){ 
		if(fVar == 1){ 
			toggleAkimbo[profileIdx] = 0;	
		}
	} 
	if(displayToggles){
		combo_run(QuickToggles);
		screenSaver = FALSE;
		cls_oled(OLED_BLACK);
		rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
		displayToggles = FALSE;
		print(centerPosition(getStringLength(modNames[modNameIdx]) ,OLED_FONT_SMALL_WIDTH), 8  ,OLED_FONT_SMALL , OLED_WHITE , modNames[modNameIdx]);
	
	    if(modNameIdx == 21){
			if(fVar == 0) 
				print(centerPosition(getStringLength(fastMelee_Opt[0]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,fastMelee_Opt[0])	
			else if(fVar == 1)
				print(centerPosition(getStringLength(fastMelee_Opt[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,fastMelee_Opt[1])
			else if(fVar == 2)
				print(centerPosition(getStringLength(fastMelee_Opt[2]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,fastMelee_Opt[2])
		}
		else if(modNameIdx == 7){ 
			if(fVar == 0) 
				print(centerPosition(getStringLength(toggleAkimbo_Opt[0]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,toggleAkimbo_Opt[0])	
			else if(fVar == 1)
				print(centerPosition(getStringLength(toggleAkimbo_Opt[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,toggleAkimbo_Opt[1])
			else if(fVar == 2)
				print(centerPosition(getStringLength(toggleAkimbo_Opt[2]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,toggleAkimbo_Opt[2])
		} 
		else { 
		
			if(fVar == 1)
				print(centerPosition(getStringLength(Toggle[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[1])	
			else
				print(centerPosition(getStringLength(Toggle[0]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[0])	
		} 
		
		
	}   
	set_val(TRACE_1,fState);
	set_val(TRACE_2,fVar);
	return fVar;
} 
combo QuickToggles{ 
wait(1500) 
displayTitle  = TRUE; 
} 
/*
==============================================================================================================================================
 Customisable Menu Options For Re-Map Buttons Via OLED
==============================================================================================================================================
*/
const int8 RemapBtns  [] = 
{ -1,PS4_L2,PS4_R2,PS4_L1,PS4_R1,PS4_L3,PS4_R3,PS4_TRIANGLE,PS4_CROSS,PS4_CIRCLE,PS4_SQUARE,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT,PS4_SHARE,PS4_OPTIONS,PS4_TOUCH,PS4_ACCX,PS4_ACCY,PS4_PS,XB1_XBOX,XB1_PR1,XB1_PR2,XB1_PL1,XB1_PL2}; 
const string AllButtons[] = 
{"Choose Btn 1","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","TRIANGLE/Y","CROSS/A","CIRCLE/B","SQUARE/X","DOWN","UP","LEFT","RIGHT","SHARE/VIEW","OPTIONS/MENU","TOUCH/SYNC","ACCX/SHARE","ACCY",
"PS","XBOX","XB1 PR1","XB1 PR2","XB1 PL1","XB1 PL2"};
const string AllButtonsTwo[] = 
{"Choose Btn 2","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","TRIANGLE/Y","CROSS/A","CIRCLE/B","SQUARE/X","DOWN","UP","LEFT","RIGHT","SHARE/VIEW","OPTIONS/MENU","TOUCH/SYNC","ACCX/SHARE","ACCY",
"PS","XBOX","XB1 PR1","XB1 PR2","XB1 PL1","XB1 PL2"};
function RemapButtons(ActiveBtn,RemapBtn){ 
	if(get_ival(ActiveBtn) || event_press(ActiveBtn)){ 
		set_val(RemapBtn,100);
		set_val(ActiveBtn,0);
	}
}
define InitiateButtons = 3;
int ActiveButtonRemap[InitiateButtons]
int RemapButtonActive[InitiateButtons]
int AllButtonsIdx[InitiateButtons]
int AllButtonsOneIdx[InitiateButtons]

function RemapButtonsConfig(){
    
    for (i = 0; i < InitiateButtons; i++) 
    {
    	ActiveButtonRemap[i] = RemapBtns[clamp(AllButtonsIdx[i], 0, sizeof(RemapBtns))];
    	RemapButtonActive[i] = RemapBtns[clamp(AllButtonsOneIdx[i], 0, sizeof(RemapBtns))];	
    }
    return;   
}
function ButtonConfig(i,fIdx){ 
	if(modNameIdx == fIdx){ 
 		if(event_press(PS4_UP)){ 
 			highLight = rotateVar(highLight ++,0,1);
 			updateDisplay = TRUE;
 		}
 		if(event_press(PS4_DOWN)){ 
 			highLight = rotateVar(highLight --,0,1);
 			updateDisplay = TRUE;
 		} 
	    if(get_ival(Ads)){
	    	if(highLight == 0){
	    		if(event_press(PS4_RIGHT)){ 
	    			AllButtonsIdx[i] = rotateVar(AllButtonsIdx[i] + 1,0,25);
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			AllButtonsIdx[i] = rotateVar(AllButtonsIdx[i] - 1,0,25);
	    		    updateDisplay = TRUE;
	    		} 
	    	}
	    	if(highLight == 1){ 
	    		if(event_press(PS4_RIGHT)){ 
	    			AllButtonsOneIdx[i] = rotateVar(AllButtonsOneIdx[i] + 1,0,25);
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			AllButtonsOneIdx[i] = rotateVar(AllButtonsOneIdx[i] - 1,0,25);
	    		    updateDisplay = TRUE;
	    		} 
	    	} 
        }
		if(highLight == 0){
       		rect_oled(115,34, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,34, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(highLight == 1){
		    rect_oled(115,49, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
   			rect_oled(6,49, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		}  
		print(centerPosition(getStringLength(AllButtons[AllButtonsIdx[i]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,AllButtons[AllButtonsIdx[i]])
        print(centerPosition(getStringLength(AllButtonsTwo[AllButtonsOneIdx[i]]),OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,AllButtonsTwo[AllButtonsOneIdx[i]])
	}  
} 
/*
============================================================================================================================================
  Unmap Buttons Config ()                                                                                                                     
============================================================================================================================================
*/
const string UnmapButtons[] = 
{"Unmap Btn","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","TRIANGLE/Y","CROSS/A","CIRCLE/B","SQUARE/X","DOWN","UP","LEFT","RIGHT","SHARE/VIEW","OPTIONS/MENU","TOUCH/SYNC","ACCX/SHARE","ACCY",
"PS","XBOX","XB1 PR1","XB1 PR2","XB1 PL1","XB1 PL2"};

define UnmapButtonId = 3;
int UnmapButton[UnmapButtonId]
int UnmapBtnIdx[UnmapButtonId]

function UnmapButtonsConfig(){
    
    for (i = 0; i < UnmapButtonId; i++) 
    {	
   	 	UnmapButton[i] = RemapBtns[clamp(UnmapBtnIdx[i], 0, sizeof(RemapBtns))]; 	
    }
    return;   
}
function UnmapButtonID(UnmappedButtonID){ 
	set_val(UnmappedButtonID,0);
} 
/*
============================================================================================================================================
 Customisable Menu Options For Buttons (Hold & Press Options) 
============================================================================================================================================
*/
const string HoldButtons[]     = { "Press Button","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","Dpad Down","Dpad Up","Dpad Left","Dpad Right","Triangle/Y","Cross/A","Circle/B","Square/X"};
const int8   HoldBtns []       = { -1,  PS4_L2  ,PS4_R2 , PS4_L1, PS4_R1  , PS4_L3 , PS4_R3 ,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT,PS4_TRIANGLE,PS4_CROSS, PS4_CIRCLE,PS4_SQUARE}; 
const string pressButtons[]    = { "Press Button","Triangle/Y","Cross/A","Circle/B","Square/X","Dpad Down","Dpad UP","Dpad Left","Dpad Right","L1/LB","R1/RB","L3/LS","R3/RS",
"Share/View","Options/Menu","Touch/Sync","L2/LT","R2/RT","Accx","Accy","PS Btn","Xbox Btn"};

const int8 PressBtns[]= { -1,PS4_TRIANGLE,PS4_CROSS,PS4_CIRCLE,PS4_SQUARE,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT,PS4_L1,PS4_R1, PS4_L3 ,PS4_R3,PS4_SHARE,PS4_OPTIONS,PS4_TOUCH,PS4_L2,PS4_R2,PS4_ACCX,PS4_ACCY,PS4_PS,XB1_XBOX};
define ActivateButtonCount = 16;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
function singleButtonActivation(j,fIdx){ 
	if(modNameIdx == fIdx){ 
		for (i = 0; i < sizeof(PressBtns); i++) {
			if(get_ival(PressBtns[i]) && get_ptime(PressBtns[i]) > 400){
    			ActivatePressBtnIdx[j] = i;	
    			rect_oled(5,40,120,10,1,0);
    		}	
    	}
    	if(event_press(PS4_SHARE)){ 
    		ActivatePressBtnIdx[j] = 0;
    	}
    	print(centerPosition(getStringLength(pressButtons[ActivatePressBtnIdx[j]]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,pressButtons[ActivatePressBtnIdx[j]])      
    }
}
function dualButtonActivation(j,fIdx){ 
	if(modNameIdx == fIdx){ 
		if(event_release(PS4_UP) && get_ptime(PS4_UP) < 200){ 
 			highLight = rotateVar(highLight ++,0,1);
 			updateDisplay = TRUE;
 		}
 		if(event_release(PS4_DOWN) && get_ptime(PS4_DOWN) < 200){ 
 			highLight = rotateVar(highLight --,0,1);
 			updateDisplay = TRUE;
 		} 
		if(highLight == 0){ 
			for (i = 0; i < sizeof(HoldBtns); i++) {
	    		if(get_ival(HoldBtns[i]) && get_ptime(HoldBtns[i]) > 500 ){
	    			ActivateHoldBtnIdx[j] = i;
	    			rect_oled(10,34,108,10,1,0);	
	    		} 
		    }
		} 
		else if(highLight == 1){ 
			for (i = 0; i < sizeof(PressBtns); i++) {
    			if(get_ival(PressBtns[i]) && get_ptime(PressBtns[i]) > 500){
	    			ActivatePressBtnIdx[j] = i;	
	    			rect_oled(10,49,108,10,1,0);
	    		}
	    	}
	    } 
	    if(event_press(PS4_SHARE)){ 
	    	ActivateHoldBtnIdx[j]  = 0;
    		ActivatePressBtnIdx[j] = 0;
    	}
	    highLight = rotateVar(highLight,0,1);
    	if(highLight == 0){
       		rect_oled(115,34, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,34, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(highLight == 1){
		    rect_oled(115,49, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
   			rect_oled(6,49, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		}  
    	print(centerPosition(getStringLength(HoldButtons[ActivateHoldBtnIdx[j]]),OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,HoldButtons[ActivateHoldBtnIdx[j]])
    	print(centerPosition(getStringLength(pressButtons[ActivatePressBtnIdx[j]]),OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,pressButtons[ActivatePressBtnIdx[j]])      
    }
}
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++){
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
    }
    return;   
} 
int buttonIdx
int menuTimeOut;
define activeMenuTime = 5000;
function checkRecoilMenuButtons (){  
    for(buttonIdx = 0; buttonIdx < 3; buttonIdx++){
         if(event_press(recoilAdjustButtons[buttonIdx]) ){
             menuTimeOut = activeMenuTime;
         }
         if(menuTimeOut){              
            menuTimeOut -=1;
            if(menuTimeOut <= 0 ){    
                recoilEdit    = FALSE;
                updateDisplay = FALSE;      
                displayTitle   = TRUE; 
                Save();
            }
        }
    }
}
const uint8 recoilAdjustButtons [] = {  
  PS4_RIGHT ,
  PS4_LEFT ,
  PS4_UP , 
  PS4_DOWN  
};
 /*
============================================================================================================================================
  Controller Stick Layouts ()                                                                                                                      
============================================================================================================================================
*/
int aimRY,aimRX,moveLY,moveLX;
const uint8  StickLayouts[][] = { 
//  0       1      2      3    //
{ PS4_RY,PS4_RX,PS4_LY,PS4_LX},// Default Sticks 
{ PS4_LY,PS4_LX,PS4_RY,PS4_RX},// SouthPaw
{ PS4_RY,PS4_LX,PS4_LY,PS4_RX},// Legacy 
{ PS4_LY,PS4_RX,PS4_LY,PS4_LX} // Legacy SouthPaw
};
function ControllerRSLS(sticks){ 
  aimRY      = StickLayouts[sticks][0];
  aimRX      = StickLayouts[sticks][1];
  moveLY     = StickLayouts[sticks][2];
  moveLX     = StickLayouts[sticks][3];
 
 }
const int16 TaylorShapesInfo[][] = {
{      0    ,    0     ,    0     ,          1         ,         1          ,     0 }, // Circular 
{      1    ,    0     ,    0     ,          2         ,         1          ,     0 }, // TallOval
{      2    ,    0     ,    0     ,          1         ,         2          ,     0 }, // WideOval
{      3    ,    0     ,    0     ,          1         ,         1          ,     1 }, // Helix
{      4    ,    0     ,    0     ,          1         ,         0          ,     0 }, // Kitt 
{      5    ,    0     ,    0     ,          0         ,         1          ,     0 }, // Vertical Flare
{      6    ,   45    ,   135     ,          1         ,         1          ,     2 }, // Tartan 
{      7    ,  180    ,   315     ,          1         ,         1          ,     0 }, // Jupiter
{      8    ,  315    ,   180     ,          1         ,         1          ,     0 }, // Osclirate  //  Rose // Atomic 
{      9    ,    0    ,     0     ,          1         ,         1          ,     0 }, // 
{     10    ,    0    ,     0     ,          1         ,         1          ,     0 }, // 
{     11    ,    0    ,     0     ,          1         ,         1          ,     4 }  //  
} 
const int16 taylorShapeCeorinInfo[][] = { 
{      0    ,    0     ,    0     ,          1         ,         1          ,     1 }, // Helix
{      1    ,    0     ,    0     ,          1         ,         0          ,     0 }, // Kitt 
{      2    ,    0     ,    0     ,          0         ,         1          ,     0 }, // Vertical Flare
{      3    ,   45    ,   135     ,          1         ,         1          ,     2 }, // Tartan 
{      4    ,    0    ,     0     ,          1         ,         1          ,     3 }, // Infinity 
{      0    ,    0     ,    0     ,          1         ,         1          ,     0 }  // Circle 
} 
function getAdminValues(){ 
// Toggles For Aim Assist
	aimAssist[profileIdx]           = adminValueArrayToggles[adminAimAssistValues[profileIdx]][ 0];
	rotationalAA[profileIdx]        = adminValueArrayToggles[adminAimAssistValues[profileIdx]][ 1];
// Values For TAA 
	aimType            [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 0]; 
	aimAssistTypeRS    [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 1]; 
	taylorShapes       [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 2];
	radiusSize         [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 3];
	adsSpeedAngle      [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 4];
	speedAngle         [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 5];
	spiralChange       [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 6];
	boostOnFire        [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 7];
	boostSpeed         [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 8];
	boostMinRadius     [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][ 9];
	boostMaxRadius     [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][10];
	taylorTracking     [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][11];
	trackingSize       [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][12];
	trackingSpeed      [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][13];
	trackingBoostOnFire[profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][14];
	trackingBoostSize  [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][15];
	trackingBoostSpd   [profileIdx] = adminValueArrayTAA[adminAimAssistValues[profileIdx]][16];
// Values For CAA 
	
	ceorinShape        [profileIdx] = adminValueArrayCAA[adminAimAssistValues[profileIdx]][ 0];
	leftStickStrength  [profileIdx] = adminValueArrayCAA[adminAimAssistValues[profileIdx]][ 1];
	leftStickSpeed     [profileIdx] = adminValueArrayCAA[adminAimAssistValues[profileIdx]][ 2];
	
	update = FALSE;
} 
const uint8 adminValueArrayTAA[][] = {
// AA Type - AA Curve - Shape - Radius - Ads Speed - Speed - Spiral - Boost - BSpd - BMinRad - BMaxRad - TrackTog - TSize - TSpd - Tboost - TBSize - TBSpd  
 
{    0     ,    0     ,   6   ,   8    ,    10     ,   10  ,    0   ,   1   ,   8  ,    2    ,    8    ,    0      ,  2   ,  3   ,    0   ,   1    ,   1    }, //TD21 1
{    0     ,    1     ,   3   ,   6    ,     5     ,    5  ,    0   ,   1   ,  12  ,    2    ,    7    ,    0      ,  2   ,  3   ,    0   ,   1    ,   1    }, //TD21 2 
{    1     ,    0     ,   0   ,   15   ,    15     ,   15  ,    0   ,   0   ,   2  ,    2    ,    5    ,    0      ,  2   ,  3   ,    0   ,   1    ,   1    }, //WayneO OPM
{    1     ,    0     ,   4   ,   9    ,    30     ,   30  ,    0   ,   0   ,   2  ,    2    ,    5    ,    0      ,  2   ,  3   ,    0   ,   1    ,   1    }, //Wayne0 Snipe
{    0     ,    1     ,   3   ,   11   ,    35     ,   35  ,    0   ,   0   ,   0  ,    0    ,    0    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //CROW  Uno
{    0     ,    0     ,   0   ,   8    ,    80     ,   80  ,    0   ,   0   ,   0  ,    0    ,    0    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //CROW  Deux
{    0     ,    0     ,   3   ,   13   ,    23     ,   23  ,    0   ,   0   ,   0  ,    0    ,    0    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //CROW  Tri
{    1     ,    0     ,   1   ,   8    ,    11     ,   15  ,    1   ,   0   ,   0  ,    0    ,    0    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //Ceorin LR
{    1     ,    0     ,  11   ,   12   ,    15     ,   18  ,    0   ,   1   ,   5  ,    1    ,    5    ,    1      ,  2   ,  8   ,    0   ,   0    ,   0    }, //Ceorin SR
{    0     ,    0     ,   0   ,   0    ,    0      ,   0   ,    0   ,   0   ,   0  ,    0    ,    0    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //Ceorin OPM
{    0     ,    1     ,   0   ,   9    ,    18     ,   26  ,    0   ,   1   ,   15 ,    0    ,    7    ,    3      ,  3   ,  4   ,    1   ,   1    ,   2    }, //ZKultra LR
{    0     ,    2     ,   3   ,   14   ,    20     ,   32  ,    0   ,   1   ,   15 ,    2    ,    4    ,    3      ,  5   ,  7   ,    1   ,   2    ,   1    }, //ZKultra SR
{    0     ,    1     ,   1   ,   7    ,    28     ,   28  ,    0   ,   1   ,   12 ,    1    ,    3    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //ZKultra S
{    0     ,    1     ,   0   ,   7    ,    10     ,   15  ,    0   ,   1   ,   15 ,    0    ,    7    ,    2      ,  0   ,  0   ,    1   ,   4    ,   20   }, //MattJK LR
{    0     ,    0     ,   0   ,   14   ,    15     ,   20  ,    0   ,   0   ,   0  ,    0    ,    0    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //MattJK SR
{    0     ,    1     ,   0   ,   12   ,    15     ,   20  ,    0   ,   2   ,   0  ,    0    ,    4    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //MattJK OPM
{    1     ,    1     ,   2   ,   12   ,    28     ,   30  ,    1   ,   0   ,   0  ,    0    ,    0    ,    0      ,  0   ,  0   ,    0   ,   0    ,   0    }, //Scuba LR
{    0     ,    1     ,   3   ,   16   ,    30     ,   33  ,    1   ,   1   ,   5  ,    1    ,    12   ,    1      ,  3   ,  6   ,    0   ,   0    ,   0    }, //Scuba SR
{    1     ,    1     ,   2   ,   14   ,    28     ,   30  ,    1   ,   1   ,   5  ,    1    ,    10   ,    1      ,  2   ,  5   ,    0   ,   0    ,   0    }, //ScubaGL
{    0     ,    1     ,   0   ,   10   ,    13     ,   13  ,    0   ,   2   ,   0  ,    3    ,    3    ,    0      ,  3   ,  2   ,    0   ,   1    ,   1    }, //Hstlr Long
{    0     ,    2     ,   0   ,   10   ,    13     ,   13  ,    0   ,   1   ,  20  ,    2    ,    4    ,    3      ,  2   ,  9   ,    1   ,   1    ,   1    }, //Hstlr Short
{    0     ,    1     ,   1   ,   7    ,    33     ,   33  ,    1   ,   0   ,   2  ,    2    ,    5    ,    0      ,  3   ,  2   ,    0   ,   1    ,   1    }, //Hstlr Snipe
{    0     ,    0     ,   3   ,   11   ,    16     ,   24  ,    1   ,   0   ,   0  ,    0    ,    0    ,    2      ,  2   ,  13  ,    0   ,   0    ,   0    }, //DooBZ OPM
{    0     ,    0     ,   1   ,   12   ,    15     ,   21  ,    1   ,   0   ,   0  ,    0    ,    0    ,    1      ,  4   ,  6   ,    0   ,   0    ,   0    }, //DooBz SMG
{    0     ,    0     ,   10  ,   10   ,    15     ,   21  ,    0   ,   0   ,   0  ,    0    ,    0    ,    1      ,  2   ,  7   ,    0   ,   0    ,   0    }, //DooBz OPM
{    0     ,    1     ,   0   ,   11   ,    17     ,   17  ,    1   ,   1   ,   8  ,    2    ,    2    ,    2      ,  3   ,  15  ,    0   ,   0    ,   0    }, //Blues Fav OPM 1
{    0     ,    1     ,   6   ,   10   ,    17     ,   25  ,    0   ,   0   ,   0  ,    0    ,    0    ,    1      ,  2   ,  2   ,    0   ,   0    ,   0    }, //Blues Fav OPM 2
{    0     ,    1     ,   9   ,    9   ,    10     ,   15  ,    0   ,   1   ,   5  ,    2    ,    2    ,    1      ,  2   ,  6   ,    0   ,   0    ,   0    }, //Blues Fav OPM 3
{    0     ,    0     ,   0   ,   10   ,    26     ,   28  ,    0   ,   1   ,   6  ,    2    ,    2    ,    1      ,  1   ,  6   ,    0   ,   0    ,   0    }, //Braderz LR 
{    0     ,    0     ,   1   ,   12   ,    18     ,   20  ,    1   ,   1   ,   4  ,    1    ,    4    ,    1      ,  2   ,  2   ,    1   ,   2    ,   0    }, //Braderz SMG
{    0     ,    1     ,   0   ,   4    ,    17     ,   4   ,    1   ,   1   ,   10 ,    3    ,    1    ,    1      ,  2   ,  40  ,    0   ,   0    ,   0    }, //IBPopN LR
{    0     ,    2     ,   6   ,   11   ,    23     ,   13  ,    1   ,   1   ,   5  ,    9    ,    2    ,    3      ,  4   ,  22  ,    0   ,   0    ,   0    }, //IBPopN SR
{    1     ,    0     ,   11  ,   9    ,    21     ,   11  ,    0   ,   0   ,   0  ,    0    ,    0    ,    2      ,  3   ,  15  ,    0   ,   0    ,   0    }, //IBPopN OPM
{    0     ,    1     ,   0   ,   12   ,    15     ,   15  ,    1   ,   0   ,   2  ,    2    ,    5    ,    0      ,  5   ,  8   ,    0   ,   1    ,   1    }, //Booba_LR 
{    0     ,    1     ,   0   ,   17   ,    20     ,   20  ,    1   ,   0   ,   2  ,    2    ,    5    ,    0      ,  5   ,  8   ,    0   ,   1    ,   1    }, //Booba_SMG 
{    0     ,    1     ,   0   ,   14   ,    17     ,   17  ,    1   ,   0   ,   2  ,    2    ,    5    ,    0      ,  3   ,  8   ,    0   ,   1    ,   1    }, //Booba_GL
{    0     ,    1     ,   0   ,   10   ,    19     ,   24  ,    0   ,   0   ,   0  ,    0    ,    0    ,    1      ,  5   ,  8   ,    0   ,   0    ,   0    }, //KSC AR
{    0     ,    1     ,   6   ,   15   ,    30     ,   35  ,    0   ,   0   ,   0  ,    0    ,    0    ,    3      ,  15  ,  40  ,    0   ,   0    ,   0    }, //KSC SMG
{    1     ,    0     ,   4   ,   6    ,    23     ,   28  ,    0   ,   0   ,   0  ,    0    ,    0    ,    1      ,  3   ,  6   ,    0   ,   0    ,   0    }, //KSC SNIPER
{    0     ,    0     ,   0   ,   9    ,    18     ,   25  ,    0   ,   0   ,   2  ,    2    ,    5    ,    3      ,  5   ,  8   ,    0   ,   1    ,   1    }, //Mike_LR 
{    0     ,    0     ,   6   ,   13   ,    18     ,   25  ,    0   ,   0   ,   2  ,    2    ,    5    ,    3      ,  5   ,  8   ,    0   ,   1    ,   1    }, //Mike_SMG
{    0     ,    0     ,   0   ,   11   ,    18     ,   25  ,    0   ,   0   ,   2  ,    2    ,    5    ,    3      ,  3   ,  8   ,    0   ,   1    ,   1    }, //Mike_GL
{    0     ,    1     ,   0   ,   12   ,    18     ,   18  ,    0   ,   0   ,   0  ,    2    ,    2    ,    2      ,  3   ,  15  ,    0   ,   0    ,   0    }, //Gods Fav OPM 1
{    0     ,    2     ,   6   ,   13   ,    15     ,   25  ,    0   ,   1   ,   10 ,    3    ,    3    ,    2      ,  2   ,  2   ,    0   ,   0    ,   0    }, //Gods Fav OPM 2
{    0     ,    1     ,   0   ,   11   ,    10     ,   15  ,    0   ,   1   ,   5  ,    2    ,    2    ,    1      ,  2   ,  6   ,    0   ,   0    ,   0    }, //Gods Fav OPM 3
{    1     ,    1     ,   0   ,   11   ,    11     ,   9   ,    1   ,   0   ,   0  ,    0    ,    0    ,    2      ,  2   ,  3   ,    0   ,   0    ,   0    }, //QuesoWastedAR 
{    1     ,    1     ,   0   ,   13   ,    13     ,   13  ,    1   ,   1   ,   10 ,    1    ,    5    ,    3      ,  3   ,  3   ,    0   ,   0    ,   0    }, //QuesoWastedSMG 
{    0     ,    0     ,   0   ,   12   ,    12     ,   11  ,    1   ,   1   ,   10 ,    1    ,    5    ,    2      ,  3   ,  3   ,    0   ,   0    ,   0    }, //QuesoWastedGL 
{    0     ,    1     ,   0   ,   3    ,    18     ,   3   ,    1   ,   1   ,   10 ,    3    ,    1    ,    1      ,  2   ,  50  ,    0   ,   0    ,   0    }, //Qique1 LR
{    0     ,    1     ,   1   ,   10   ,    15     ,   14  ,    0   ,   0   ,   0  ,    0    ,    0    ,    3      ,  5   ,  5   ,    0   ,   0    ,   0    }, //Qique2 SR
{    0     ,    1     ,   0   ,   7    ,    14     ,   3   ,    1   ,   2   ,   15 ,    2    ,    3    ,    3      ,  3   ,  25  ,    0   ,   0    ,   0    }, //xSikx LR
{    0     ,    2     ,   1   ,   11   ,    25     ,   3   ,    1   ,   2   ,   15 ,    2    ,    3    ,    2      ,  5   ,  20  ,    0   ,   0    ,   0    }, //xSIKx SR
{    0     ,    2     ,   7   ,   8    ,    25     ,   15  ,    1   ,   2   ,   10 ,    2    ,    0    ,    4      ,  3   ,  7   ,    10  ,   0    ,   0    }, //xSIKx OPM
{    0     ,    0     ,   0   ,   10   ,    18     ,   25  ,    0   ,   0   ,   0  ,    0    ,    0    ,    3      ,  3   ,  5   ,    0   ,   0    ,   0    }, //MikeS LR
{    0     ,    0     ,   6   ,   13   ,    18     ,   25  ,    0   ,   0   ,   0  ,    0    ,    0    ,    3      ,  3   ,  5   ,    0   ,   0    ,   0    }, //MikeS SR
{    0     ,    0     ,   0   ,   11   ,    15     ,   25  ,    0   ,   0   ,   0  ,    0    ,    0    ,    1      ,  3   ,  5   ,    0   ,   0    ,   0    }  //MikeS GL
}
const uint8 adminValueArrayCAA[][] = { 
//    Shape    -     Size   - Speed   
{       3      ,      20    ,   40   }, //TD21 1
{       0      ,      22    ,   50   }, //TD21 2
{       4      ,      27    ,   20   }, //WayneO OPM 
{       0      ,      25    ,   10   }, //WayneO Snipe
{       0      ,      0     ,   0    }, //CROW  Uno 
{       0      ,      0     ,   0    }, //CROW  Deux
{       0      ,      0     ,   0    }, //CROW  Tri
{       3      ,      20    ,   40   }, //Ceorin LR 
{       4      ,      25    ,   40   }, //Ceorin SR
{       4      ,      25    ,   40   }, //Ceorin OPM
{       3      ,      35    ,   40   }, //ZKultra LR
{       3      ,      40    ,   40   }, //ZKultra SR
{       5      ,      25    ,   40   }, //ZKultra S
{       5      ,      25    ,   90   }, //MattJK LR
{       5      ,      45    ,   90   }, //MattJK SR
{       5      ,      30    ,   90   }, //MattJK OPM4   
{       4      ,      30    ,   50   }, //Scuba LR 
{       0      ,      40    ,   70   }, //Scuba SR
{       0      ,      35    ,   60   }, //Scuba GL
{       1      ,      30    ,   40   }, //Hstlr Long 
{       4      ,      50    ,   30   }, //Hstlr Short
{       1      ,      30    ,   40   }, //Hstlr Snipe
{       4      ,      25    ,   40   }, //DooBz OPM 
{       4      ,      35    ,   50   }, //DooBz SMG
{       4      ,      25    ,   40   }, //DooBz OPM
{       4 	   ,      20    ,   20   }, //Blues Fav OPM 1
{       4	   ,      25    ,   50   }, //Blues Fav OPM 2
{       1	   ,      30    ,   60   }, //Blues Fav OPM 3
{       4 	   ,      35    ,   50   }, //Braderz LR 
{       4	   ,      35    ,   40   }, //Braderz SMG 
{       4      ,      20    ,   20   }, //IBPopN LR
{       3      ,      40    ,   40   }, //IBPopN SR
{       4      ,      30    ,   30   }, //IBPopN OPM
{       0      ,      20    ,   20   }, //Booba_LR 
{       0      ,      20    ,   20   }, //Booba_SMG 
{       0      ,      20    ,   20   }, //Booba 3
{       0      ,      10    ,   20   }, //KSC AR 
{       0      ,      20    ,   30   }, //KSC SMG
{       0      ,      0     ,   0    }, //KSC SNIP
{       1      ,      25    ,   60   }, //Mike_LR 
{       1      ,      25    ,   70   }, //Mike_SMG 
{       1      ,      30    ,   60   }, //MikeS_GL
{       4 	   ,      20    ,   20   }, //Gods Fav OPM 1
{       4	   ,      35    ,   30   }, //Gods Fav OPM 2
{       5	   ,      35    ,   40   }, //Gods Fav OPM 3
{       1	   ,      20    ,   25   }, //QuesoWastedAR 
{       1      ,      20    ,   25   }, //QuesoWastedSMG 
{       1      ,      20    ,   25   }, //QuesoWastedGL 
{       4      ,      20    ,   40   }, //Qique1 LR 
{       4      ,      30    ,   50   }, //Qique2 SR
{       1      ,      25    ,   30   }, //xSIKx LR 
{       4      ,      30    ,   30   }, //xSIKX SR
{       4      ,      40    ,   35   }, //xSIKxOPM
{       4      ,      25    ,   60   }, //MikeS LR 
{       4      ,      25    ,   70   }, //MikeS SR
{       4      ,      30    ,   60   }  //MikeS GL
}
const uint8 adminValueArrayToggles[][] = { 
// Taylor Assist - Ceorin AA 
{        2       ,     1      }, //TD21 1
{        3       ,     1      }, //TD21 2
{        3       ,     1      }, //WayneO 1
{        1       ,     1      }, //WayneO 2
{        1       ,     0      }, //CROW  Uno
{        1       ,     0      }, //CROW  Deux
{        1       ,     0      }, //CROW  Tri
{        3       ,     1      }, //Ceorin LR
{        3       ,     1      }, //Ceorin SR
{        0       ,     1      }, //Ceorin OPM
{        1       ,     1      }, //ZKultra LR
{        1       ,     1      }, //ZKultra SR
{        1       ,     1      }, //ZKultra S
{        3       ,     1      }, //MattJK LR
{        3       ,     1      }, //MattJK SR
{        3       ,     1      }, //MattJK OPM
{        1       ,     1      }, //Scuba LR
{        1       ,     1      }, //Scuba SR
{        1       ,     1      }, //Scuba GL
{        1       ,     1      }, //Hstlr Long
{        1       ,     1      }, //Hstlr Short
{        1       ,     1      }, //Hstlr Snipe
{        2       ,     1      }, //DooBz OPM
{        3       ,     1      }, //DooBz SMG
{        2       ,     1      }, //DooBz OPM
{        1       ,     1      }, //Blues Fav OPM 1
{        1       ,     1      }, //Blues Fav OPM 2
{        1       ,     1      }, //Blues Fav OPM 3
{        1       ,     1      }, //Braderz LR 
{        3       ,     1      }, //Braderz SMG
{        3       ,     1      }, //IBPopN LR
{        2       ,     1      }, //IBPopN SR
{        1       ,     1      }, //IBPopN OPM
{        1       ,     1      }, //Booba_LR 
{        3       ,     1      }, //Booba_SMG 
{        1       ,     1      }, //Booba 3
{        1       ,     1      }, //KSC AR
{        1       ,     1      }, //KSC SMG
{        0       ,     0      }, //KSC SNIPER
{        2       ,     1      }, //Mike Long_AR 
{        3       ,     1      }, //Mike_SMG 
{        1       ,     1      }, //Mike 3 
{        1       ,     1      }, //Gods Fav OPM 1
{        1       ,     1      }, //Gods Fav OPM 2
{        1       ,     1      }, //Gods Fav OPM 3
{        1       ,     1      }, //QuesoWastedAR 
{        2       ,     1      }, //QuesoWastedSMG 
{        2       ,     1      }, //QuesoWastedGL 
{        2       ,     1      }, //Qique1 LR
{        3       ,     1      }, //Qique2 SR
{        3       ,     1      }, //xSIKx LR
{        3       ,     1      }, //xSIKx SR
{        3       ,     1      }, //xSIKx OPM
{        2       ,     1      }, //MikeS LR
{        3       ,     1      }, //MikeS SR
{        1       ,     1      }  //MikeS GL

}
function Load() {
	for(i = 0; i < 3; i++){ 
	// Toggles For Aim Assist
		aimAssist          [i] = adminValueArrayToggles[adminAimAssistValues[i]][ 0];
		rotationalAA       [i] = adminValueArrayToggles[adminAimAssistValues[i]][ 1];
	// Values For TAA 
		aimType            [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 0]; 
		aimAssistTypeRS    [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 1]; 
		taylorShapes       [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 2];
		radiusSize         [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 3];
		adsSpeedAngle      [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 4];
		speedAngle         [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 5];
		spiralChange       [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 6];
		boostOnFire        [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 7];
		boostSpeed         [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 8];
		boostMinRadius     [i] = adminValueArrayTAA[adminAimAssistValues[i]][ 9];
		boostMaxRadius     [i] = adminValueArrayTAA[adminAimAssistValues[i]][10];
		taylorTracking     [i] = adminValueArrayTAA[adminAimAssistValues[i]][11];
		trackingSize       [i] = adminValueArrayTAA[adminAimAssistValues[i]][12];
		trackingSpeed      [i] = adminValueArrayTAA[adminAimAssistValues[i]][13];
		trackingBoostOnFire[i] = adminValueArrayTAA[adminAimAssistValues[i]][14];
		trackingBoostSize  [i] = adminValueArrayTAA[adminAimAssistValues[i]][15];
		trackingBoostSpd   [i] = adminValueArrayTAA[adminAimAssistValues[i]][16];
	// Values For CAA 
		ceorinShape        [i] = adminValueArrayCAA[adminAimAssistValues[i]][ 0];
		leftStickStrength  [i] = adminValueArrayCAA[adminAimAssistValues[i]][ 1];
		leftStickSpeed     [i] = adminValueArrayCAA[adminAimAssistValues[i]][ 2];
	}
    reset_spvar();   
    if (read_spvar(0, 1, 0)) { // Read and check the first bit, if it is set, we know something should have been saved, otherwise we fall back on our default setting
		antiRecoilBasic[0]         = read_spvar(       0,       2,       0); // 0 
		antiRecoilBasic[1]         = read_spvar(       0,       2,       0); // 1 
		antiRecoilBasic[2]         = read_spvar(       0,       2,       0); // 2 
		antiRecoilPolar[0]         = read_spvar(       0,       2,       0); // 3 
		antiRecoilPolar[1]         = read_spvar(       0,       2,       0); // 4 
		antiRecoilPolar[2]         = read_spvar(       0,       2,       0); // 5 
		antiRecoilAdvanced[0]      = read_spvar(       0,       3,       0); // 6 
		antiRecoilAdvanced[1]      = read_spvar(       0,       3,       0); // 7 
		antiRecoilAdvanced[2]      = read_spvar(       0,       3,       0); // 8 
		adminAimAssistValues[0]    = read_spvar(       0,      55,       0); // 9 
		adminAimAssistValues[1]    = read_spvar(       0,      55,       0); // 10
		adminAimAssistValues[2]    = read_spvar(       0,      55,       0); // 11
		aimAssist[0]               = read_spvar(       0,       3,       0); // 12
		aimAssist[1]               = read_spvar(       0,       3,       0); // 13
		aimAssist[2]               = read_spvar(       0,       3,       0); // 14
		rotationalAA[0]            = read_spvar(       0,       1,       0); // 15
		rotationalAA[1]            = read_spvar(       0,       1,       0); // 16
		rotationalAA[2]            = read_spvar(       0,       1,       0); // 17
		toggleRapidFire[0]         = read_spvar(       0,       1,       0); // 18
		toggleRapidFire[1]         = read_spvar(       0,       1,       0); // 19
		toggleRapidFire[2]         = read_spvar(       0,       1,       0); // 20
		toggleAkimbo[0]            = read_spvar(       0,       2,       0); // 21
		toggleAkimbo[1]            = read_spvar(       0,       2,       0); // 22
		toggleAkimbo[2]            = read_spvar(       0,       2,       0); // 23
		toggleBurstFire[0]         = read_spvar(       0,       1,       0); // 21
		toggleBurstFire[1]         = read_spvar(       0,       1,       0); // 22
		toggleBurstFire[2]         = read_spvar(       0,       1,       0); // 23
		dropShotmw2[0]             = read_spvar(       0,       1,       0); // 24
		dropShotmw2[1]             = read_spvar(       0,       1,       0); // 25
		dropShotmw2[2]             = read_spvar(       0,       1,       0); // 26
		mw2SnakeShot[0]            = read_spvar(       0,       1,       0); // 27
		mw2SnakeShot[1]            = read_spvar(       0,       1,       0); // 28
		mw2SnakeShot[2]            = read_spvar(       0,       1,       0); // 29
		crouchShot[0]              = read_spvar(       0,       1,       0); // 30
		crouchShot[1]              = read_spvar(       0,       1,       0); // 31
		crouchShot[2]              = read_spvar(       0,       1,       0); // 32
		jumpShot[0]                = read_spvar(       0,       1,       0); // 33
		jumpShot[1]                = read_spvar(       0,       1,       0); // 34
		jumpShot[2]                = read_spvar(       0,       1,       0); // 35
		autoAim[0]                 = read_spvar(       0,       1,       0); // 36
		autoAim[1]                 = read_spvar(       0,       1,       0); // 37
		autoAim[2]                 = read_spvar(       0,       1,       0); // 38
		enemyPing                  = read_spvar(       0,       1,       0); // 39
		holdBreath[0]              = read_spvar(       0,       2,       0); // 40
		holdBreath[1]              = read_spvar(       0,       2,       0); // 41
		holdBreath[2]              = read_spvar(       0,       2,       0); // 42
		quickScope[0]              = read_spvar(       0,       1,       0); // 43
		quickScope[1]              = read_spvar(       0,       1,       0); // 44
		quickScope[2]              = read_spvar(       0,       1,       0); // 45
		silentShot[0]              = read_spvar(       0,       1,       0); // 46
		silentShot[1]              = read_spvar(       0,       1,       0); // 47
		silentShot[2]              = read_spvar(       0,       1,       0); // 48
		mw2GWalk                   = read_spvar(       0,       1,       0); // 49
		cancelSlideMw2             = read_spvar(       0,       2,       0); // 50
		bunnyHop                   = read_spvar(       0,       1,       0); // 51
		fastMelee[0]               = read_spvar(       0,       2,       0); // 52
		fastMelee[1]               = read_spvar(       0,       2,       0); // 53
		fastMelee[2]               = read_spvar(       0,       2,       0); // 54
		snakePlate                 = read_spvar(       0,       1,       0); // 55
		vmSpeed                    = read_spvar(       0,       3,       0); // 56
		customSens                 = read_spvar(       0,       1,       0); // 57
		tacSprint                  = read_spvar(       0,       1,       0); // 58
		dolphinCancel              = read_spvar(       0,       1,       0); // 59
		weaponSwap                 = read_spvar(       0,       1,       0); // 59
		buttonLayouts              = read_spvar(       0,      21,       0); // 60
		stickLayouts               = read_spvar(       0,       3,       0); // 61
		useInverted                = read_spvar(       0,       1,       0); // 62
		blockRumble                = read_spvar(       0,       1,       0); // 63
		hairTriggers               = read_spvar(       0,       1,       0); // 64
		swapPS4Btns                = read_spvar(0, 1,0);
		weaponName[0]              = read_spvar(       0,       8,       0); // 73
		weaponName[1]              = read_spvar(       0,       8,       0); // 74
		weaponName[2]              = read_spvar(       0,       8,       0); // 75
		setLedColour[0] 		   = read_spvar(       0,       1,       0); // 75
		setLedColour[1] 		   = read_spvar(       0,       1,       0); // 75
		setLedColour[2] 		   = read_spvar(       0,       1,       0); // 75
		getColour[0] 		       = read_spvar(       0,     360,       0); // 75
		getColour[1] 		       = read_spvar(       0,     360,       0); // 75
		getColour[2] 		       = read_spvar(       0,     360,       0); // 75
		standardARFireType[0]      = read_spvar(0, 2,0);
		standardARFireType[1]      = read_spvar(0, 2,0);
		standardARFireType[2]      = read_spvar(0, 2,0);
		progressiveARFireType[0]   = read_spvar(0, 2,0);
		progressiveARFireType[1]   = read_spvar(0, 2,0);
		progressiveARFireType[2]   = read_spvar(0, 2,0);
		taylorFireType[0]	       = read_spvar(0, 3,0);
		taylorFireType[1]	       = read_spvar(0, 3,0);
		taylorFireType[2]	       = read_spvar(0, 3,0);
		rotationalFireType[0]      = read_spvar(0, 3,0);
		rotationalFireType[1]      = read_spvar(0, 3,0);
		rotationalFireType[2]      = read_spvar(0, 3,0);
		rapidFireType[0]	       = read_spvar(0, 3,0);
		rapidFireType[1]	       = read_spvar(0, 3,0);
		rapidFireType[2]	       = read_spvar(0, 3,0);
		burstFireType[0]           = read_spvar(0, 3,0);
		burstFireType[1]           = read_spvar(0, 3,0);
		burstFireType[2]           = read_spvar(0, 3,0);
		quickScopeActivation[0]    = read_spvar(0, 1,0);
		quickScopeActivation[1]    = read_spvar(0, 1,0);
		quickScopeActivation[2]    = read_spvar(0, 1,0);
		snakeShotActivationmw2[0]  = read_spvar(0, 4,0);
		snakeShotActivationmw2[1]  = read_spvar(0, 4,0);
		snakeShotActivationmw2[2]  = read_spvar(0, 4,0);
		crouchShotActivation[0]    = read_spvar(0, 4,0);
		crouchShotActivation[1]    = read_spvar(0, 4,0);
		crouchShotActivation[2]    = read_spvar(0, 4,0);
		jumpShotActivation[0]      = read_spvar(0, 4,0);
		jumpShotActivation[1]      = read_spvar(0, 4,0);
		jumpShotActivation[2]      = read_spvar(0, 4,0);
	    dropShotmw2FireType[0]     = read_spvar(0, 4,0);
	    dropShotmw2FireType[1]     = read_spvar(0, 4,0);
	    dropShotmw2FireType[2]     = read_spvar(0, 4,0);
	    weaponSwapActivation	   = read_spvar(0, 1,0);
	    ActivateHoldBtnIdx[0]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[1]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[2]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[3]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[4]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[5]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[6]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[7]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[8]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[9]      = read_spvar(0,14,0);
		ActivateHoldBtnIdx[10]     = read_spvar(0,14,0);
		ActivateHoldBtnIdx[11]     = read_spvar(0,14,0);
		ActivateHoldBtnIdx[12]     = read_spvar(0,14,0);
		ActivateHoldBtnIdx[13]     = read_spvar(0,14,0);
		ActivateHoldBtnIdx[14]     = read_spvar(0,14,0);
		ActivateHoldBtnIdx[15]     = read_spvar(0,14,0);
		ActivatePressBtnIdx[0]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[1]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[2]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[3]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[4]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[5]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[6]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[7]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[8]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[9]     = read_spvar(0,21,0);
		ActivatePressBtnIdx[10]    = read_spvar(0,21,0);
		ActivatePressBtnIdx[11]    = read_spvar(0,21,0);
		ActivatePressBtnIdx[12]    = read_spvar(0,21,0);
		ActivatePressBtnIdx[13]    = read_spvar(0,21,0);
		ActivatePressBtnIdx[14]    = read_spvar(0,21,0);
		ActivatePressBtnIdx[15]    = read_spvar(0,21,0);
		AllButtonsIdx[0]           = read_spvar(0,25,0);
	    AllButtonsIdx[1]           = read_spvar(0,25,0);
	    AllButtonsOneIdx[0]	       = read_spvar(0,25,0);
	    AllButtonsOneIdx[1]	       = read_spvar(0,25,0);
	    UnmapBtnIdx[0]             = read_spvar(0,25,0);
	    UnmapBtnIdx[1]             = read_spvar(0,25,0);
		                        
		verticalStrength[0]        = read_spvar(     -99,      99,       0); // 86
		verticalStrength[1]        = read_spvar(     -99,      99,       0); // 87
		verticalStrength[2]        = read_spvar(     -99,      99,       0); // 88
		HorizontalStrength[0]      = read_spvar(     -99,      99,       0); // 89
		HorizontalStrength[1]      = read_spvar(     -99,      99,       0); // 90
		HorizontalStrength[2]      = read_spvar(     -99,      99,       0); // 91
		Vertical[0]                = read_spvar(     -99,      99,       0); // 92
		Vertical[1]                = read_spvar(     -99,      99,       0); // 93
		Vertical[2]                = read_spvar(     -99,      99,       0); // 94
		Horizontal[0]              = read_spvar(     -99,      99,       0); // 95
		Horizontal[1]              = read_spvar(     -99,      99,       0); // 96
		Horizontal[2]              = read_spvar(     -99,      99,       0); // 97
		doubleStrengthTime[0]      = read_spvar(       0,    5000,     450); // 98
		doubleStrengthTime[1]      = read_spvar(       0,    5000,     450); // 99
		doubleStrengthTime[2]      = read_spvar(       0,    5000,     450); // 100
		deadzone                   = read_spvar(       0,      20,       4); // 101
		VerticalStart[0]           = read_spvar(     -99,      99,       0); // 102
		VerticalStart[1]           = read_spvar(     -99,      99,       0); // 103
		VerticalStart[2]           = read_spvar(     -99,      99,       0); // 104
		VerticalMid[0]             = read_spvar(     -99,      99,       0); // 105
		VerticalMid[1]             = read_spvar(     -99,      99,       0); // 106
		VerticalMid[2]             = read_spvar(     -99,      99,       0); // 107
		VerticalEnd[0]             = read_spvar(     -99,      99,       0); // 108
		VerticalEnd[1]             = read_spvar(     -99,      99,       0); // 109
		VerticalEnd[2]             = read_spvar(     -99,      99,       0); // 110
		VerticalTime[0]            = read_spvar(       0,      99,       0); // 111
		VerticalTime[1]            = read_spvar(       0,      99,       0); // 112
		VerticalTime[2]            = read_spvar(       0,      99,       0); // 113
		HorizontalStart[0]         = read_spvar(     -99,      99,       0); // 114
		HorizontalStart[1]         = read_spvar(     -99,      99,       0); // 115
		HorizontalStart[2]         = read_spvar(     -99,      99,       0); // 116
		HorizontalEnd[0]           = read_spvar(     -99,      99,       0); // 117
		HorizontalEnd[1]           = read_spvar(     -99,      99,       0); // 118
		HorizontalEnd[2]           = read_spvar(     -99,      99,       0); // 119
		HorizontalTime[0]          = read_spvar(       0,      99,       0); // 120
		HorizontalTime[1]          = read_spvar(       0,      99,       0); // 121
		HorizontalTime[2]          = read_spvar(       0,      99,       0); // 122
		aimType[0]                 = read_spvar(       0,       1,       0); // 123
		aimType[1]                 = read_spvar(       0,       1,       0); // 124
		aimType[2]                 = read_spvar(       0,       1,       0); // 125
		aimAssistTypeRS[0]         = read_spvar(       0,       2,       0); // 126
		aimAssistTypeRS[1]         = read_spvar(       0,       2,       0); // 127
		aimAssistTypeRS[2]         = read_spvar(       0,       2,       0); // 128
		taylorShapes[0]            = read_spvar(       0,      11,       0); // 129
		taylorShapes[1]            = read_spvar(       0,      11,       0); // 130
		taylorShapes[2]            = read_spvar(       0,      11,       0); // 131
		radiusSize[0]              = read_spvar(       0,      99,      10); // 132
		radiusSize[1]              = read_spvar(       0,      99,      10); // 133
		radiusSize[2]              = read_spvar(       0,      99,      10); // 134
		adsSpeedAngle[0]           = read_spvar(       0,      99,      10); // 135
		adsSpeedAngle[1]           = read_spvar(       0,      99,      10); // 136
		adsSpeedAngle[2]           = read_spvar(       0,      99,      10); // 137
		speedAngle[0]              = read_spvar(       0,      99,      15); // 138
		speedAngle[1]              = read_spvar(       0,      99,      15); // 139
		speedAngle[2]              = read_spvar(       0,      99,      15); // 140
		spiralChange[0]            = read_spvar(       0,       1,       0); // 141
		spiralChange[1]            = read_spvar(       0,       1,       0); // 142
		spiralChange[2]            = read_spvar(       0,       1,       0); // 143
		boostOnFire[0]             = read_spvar(       0,       2,       0); // 144
		boostOnFire[1]             = read_spvar(       0,       2,       0); // 145
		boostOnFire[2]             = read_spvar(       0,       2,       0); // 146
		boostSpeed[0]              = read_spvar(       0,      99,       5); // 147
		boostSpeed[1]              = read_spvar(       0,      99,       5); // 148
		boostSpeed[2]              = read_spvar(       0,      99,       5); // 149
		boostMinRadius[0]          = read_spvar(       0,      99,       2); // 150
		boostMinRadius[1]          = read_spvar(       0,      99,       2); // 151
		boostMinRadius[2]          = read_spvar(       0,      99,       2); // 152
		boostMaxRadius[0]          = read_spvar(       0,      99,       5); // 153
		boostMaxRadius[1]          = read_spvar(       0,      99,       5); // 154
		boostMaxRadius[2]          = read_spvar(       0,      99,       5); // 155
		taylorTracking[0]          = read_spvar(       0,       3,       0); // 156
		taylorTracking[1]          = read_spvar(       0,       3,       0); // 157
		taylorTracking[2]          = read_spvar(       0,       3,       0); // 158
		trackingSize[0]            = read_spvar(       0,      99,       2); // 159
		trackingSize[1]            = read_spvar(       0,      99,       2); // 160
		trackingSize[2]            = read_spvar(       0,      99,       2); // 161
		trackingSpeed[0]           = read_spvar(       0,      99,       3); // 162
		trackingSpeed[1]           = read_spvar(       0,      99,       3); // 163
		trackingSpeed[2]           = read_spvar(       0,      99,       3); // 164
		trackingBoostOnFire[0]     = read_spvar(       0,       1,       0); // 165
		trackingBoostOnFire[1]     = read_spvar(       0,       1,       0); // 166
		trackingBoostOnFire[2]     = read_spvar(       0,       1,       0); // 167
		trackingBoostSize[0]       = read_spvar(       0,      99,       1); // 168
		trackingBoostSize[1]       = read_spvar(       0,      99,       1); // 169
		trackingBoostSize[2]       = read_spvar(       0,      99,       1); // 170
		trackingBoostSpd[0]        = read_spvar(       0,      99,       2); // 171
		trackingBoostSpd[1]        = read_spvar(       0,      99,       2); // 172
		trackingBoostSpd[2]        = read_spvar(       0,      99,       2); // 173
		ceorinShape[0]             = read_spvar(       0,       5,       0); // 174
		ceorinShape[1]             = read_spvar(       0,       5,       0); // 175
		ceorinShape[2]             = read_spvar(       0,       5,       0); // 176
		leftStickStrength[0]       = read_spvar(       0,      99,      25); // 177
		leftStickStrength[1]       = read_spvar(       0,      99,      25); // 178
		leftStickStrength[2]       = read_spvar(       0,      99,      25); // 179
		leftStickSpeed[0]          = read_spvar(       0,     100,      30); // 180
		leftStickSpeed[1]          = read_spvar(       0,     100,      30); // 181
		leftStickSpeed[2]          = read_spvar(       0,     100,      30); // 182
		rateOfFire[0]              = read_spvar(       0,      25,       1); // 183
		rateOfFire[1]              = read_spvar(       0,      25,       1); // 184
		rateOfFire[2]              = read_spvar(       0,      25,       1); // 185
		legacyARH                  = read_spvar(       0,       2,       0); // 186
		handGunVertical[0]         = read_spvar(     -99,      99,       0); // 187
		handGunVertical[1]         = read_spvar(     -99,      99,       0); // 188
		handGunVertical[2]         = read_spvar(     -99,      99,       0); // 189
		akimboRateOfFire[0]        = read_spvar(       0,      25,       1); // 190
		akimboRateOfFire[1]        = read_spvar(       0,      25,       1); // 191
		akimboRateOfFire[2]        = read_spvar(       0,      25,       1); // 192
		burstHoldTime[0]           = read_spvar(       0,     900,     150); // 190
		burstHoldTime[1]           = read_spvar(       0,     900,     150); // 190
		burstHoldTime[2]           = read_spvar(       0,     900,     150); // 190
		burstRestTime[0]           = read_spvar(       0,     900,     150); // 190
		burstRestTime[1]           = read_spvar(       0,     900,     150); // 190
		burstRestTime[2]           = read_spvar(       0,     900,     150); // 190
		mw2JumpDelay               = read_spvar(       0,     500,     200); // 193
		PingDelay                  = read_spvar(       0,    5000,    1000); // 194
		holdBreathDelay[0]         = read_spvar(       0,    5000,    1000); // 195
		holdBreathDelay[1]         = read_spvar(       0,    5000,    1000); // 196
		holdBreathDelay[2]         = read_spvar(       0,    5000,    1000); // 197
		quickScopeDelay            = read_spvar(       0,     900,     350); // 198
		gWalkDelayTime             = read_spvar(       0,     700,     350); // 199
		slideDelayMw2              = read_spvar(       0,     500,     300); // 200
		GeneralSens                = read_spvar(       0,     327,     100); // 201
		AdsSens                    = read_spvar(       0,     327,     100); // 202
		FireSens                   = read_spvar(       0,     327,     100); // 203
		AdsFireSens                = read_spvar(       0,     327,     100); // 204
     }
     else {
		antiRecoilBasic[0]         =        0; // 0 
		antiRecoilBasic[1]         =        0; // 1 
		antiRecoilBasic[2]         =        0; // 2 
		antiRecoilPolar[0]         =        0; // 3 
		antiRecoilPolar[1]         =        0; // 4 
		antiRecoilPolar[2]         =        0; // 5 
		antiRecoilAdvanced[0]      =        0; // 6 
		antiRecoilAdvanced[1]      =        0; // 7 
		antiRecoilAdvanced[2]      =        0; // 8 
		adminAimAssistValues[0]    =        0; // 9 
		adminAimAssistValues[1]    =        0; // 10
		adminAimAssistValues[2]    =        0; // 11
		aimAssist[0]               = adminValueArrayToggles[adminAimAssistValues[0]][ 0];
		aimAssist[1]               = adminValueArrayToggles[adminAimAssistValues[1]][ 0];
		aimAssist[2]               = adminValueArrayToggles[adminAimAssistValues[2]][ 0];
		rotationalAA[0]            = adminValueArrayToggles[adminAimAssistValues[0]][ 1];
		rotationalAA[1]            = adminValueArrayToggles[adminAimAssistValues[1]][ 1];
		rotationalAA[2]            = adminValueArrayToggles[adminAimAssistValues[2]][ 1];
		toggleRapidFire[0]         =        0; // 18
		toggleRapidFire[1]         =        0; // 19
		toggleRapidFire[2]         =        0; // 20
		toggleAkimbo[0]            =        0; // 21
		toggleAkimbo[1]            =        0; // 22
		toggleAkimbo[2]            =        0; // 23
		toggleBurstFire[0]         =        0;
		toggleBurstFire[1]         =        0;
		toggleBurstFire[2]         =        0;
		dropShotmw2[0]             =        0; // 24
		dropShotmw2[1]             =        0; // 25
		dropShotmw2[2]             =        0; // 26
		mw2SnakeShot[0]            =        0; // 27
		mw2SnakeShot[1]            =        0; // 28
		mw2SnakeShot[2]            =        0; // 29
		crouchShot[0]              =        0; // 30
		crouchShot[1]              =        0; // 31
		crouchShot[2]              =        0; // 32
		jumpShot[0]                =        0; // 33
		jumpShot[1]                =        0; // 34
		jumpShot[2]                =        0; // 35
		autoAim[0]                 =        0; // 36
		autoAim[1]                 =        0; // 37
		autoAim[2]                 =        0; // 38
		enemyPing                  =        0; // 39
		holdBreath[0]              =        0; // 40
		holdBreath[1]              =        0; // 41
		holdBreath[2]              =        0; // 42
		quickScope[0]              =        0; // 43
		quickScope[1]              =        0; // 44
		quickScope[2]              =        0; // 45
		silentShot[0]              =        0; // 46
		silentShot[1]              =        0; // 47
		silentShot[2]              =        0; // 48
		mw2GWalk                   =        0; // 49
		cancelSlideMw2             =        0; // 50
		bunnyHop                   =        0; // 51
		fastMelee[0]               =        0; // 52
		fastMelee[1]               =        0; // 53
		fastMelee[2]               =        0; // 54
		snakePlate                 =        0; // 55
		vmSpeed                    =        0; // 56
		customSens                 =        0; // 57
		tacSprint                  =        0; // 58
		dolphinCancel              =        0; // 59
		weaponSwap                 =        0; // 59
		buttonLayouts              =        0; // 60
		stickLayouts               =        0; // 61
		useInverted                =        0; // 62
		blockRumble                =        0; // 63
		hairTriggers               =        0; // 64 
		swapPS4Btns                =        0;
		weaponName[0]              =        0; // 73
		weaponName[1]              =        0; // 74
		weaponName[2]              =        0; // 75
		setLedColour[0] 		   =        0;
		setLedColour[1] 		   =        0;
		setLedColour[2] 		   =        0;
		getColour[0] 		       =        0;
		getColour[1] 		       =        0;
		getColour[2] 		       =        0;
		standardARFireType[0]      =        0;
		standardARFireType[1]      =        0;
		standardARFireType[2]      =        0;
		progressiveARFireType[0]   =        0;
		progressiveARFireType[1]   =        0;
		progressiveARFireType[2]   =        0;
		taylorFireType[0]	       =        0;
		taylorFireType[1]	       =        0;
		taylorFireType[2]	       =        0;
		rotationalFireType[0]      =        0;
		rotationalFireType[1]      =        0;
		rotationalFireType[2]      =        0;
		rapidFireType[0]	       =        2;
		rapidFireType[1]	       =        2;
		rapidFireType[2]	       =        2;
		burstFireType[0]	       =        2;
		burstFireType[1]	       =        2;
		burstFireType[2]	       =        2;
		quickScopeActivation[0]    =        0;
		quickScopeActivation[1]    =        0;
		quickScopeActivation[2]    =        0;
		snakeShotActivationmw2[0]  =        0;
		snakeShotActivationmw2[1]  =        0;
		snakeShotActivationmw2[2]  =        0;
		crouchShotActivation[0]    =        1;
		crouchShotActivation[1]    =        1;
		crouchShotActivation[2]    =        1;
		jumpShotActivation[0]      =        1;
		jumpShotActivation[1]      =        1;
		jumpShotActivation[2]      =        1;
		dropShotmw2FireType[0]     =        2;
		dropShotmw2FireType[1]     =        2;
		dropShotmw2FireType[2]     =        2;
		weaponSwapActivation	   =        0;
	    ActivateHoldBtnIdx[0]      = 0;
		ActivateHoldBtnIdx[1]      = 0;
		ActivateHoldBtnIdx[2]      = 0;
		ActivateHoldBtnIdx[3]      = 0;
		ActivateHoldBtnIdx[4]      = 0;
		ActivateHoldBtnIdx[5]      = 0;
		ActivateHoldBtnIdx[6]      = 0;
		ActivateHoldBtnIdx[7]      = 0;
		ActivateHoldBtnIdx[8]      = 0;
		ActivateHoldBtnIdx[9]      = 0;
		ActivateHoldBtnIdx[10]     = 0;
		ActivateHoldBtnIdx[11]     = 0;
		ActivateHoldBtnIdx[12]     = 0;
		ActivateHoldBtnIdx[13]     = 0;
		ActivateHoldBtnIdx[14]     = 0;
		ActivateHoldBtnIdx[15]     = 0;
		ActivatePressBtnIdx[0]     = 0;
		ActivatePressBtnIdx[1]     = 0;
		ActivatePressBtnIdx[2]     = 0;
		ActivatePressBtnIdx[3]     = 0;
		ActivatePressBtnIdx[4]     = 0;
		ActivatePressBtnIdx[5]     = 0;
		ActivatePressBtnIdx[6]     = 0;
		ActivatePressBtnIdx[7]     = 0;
		ActivatePressBtnIdx[8]     = 0;
		ActivatePressBtnIdx[9]     = 0;
		ActivatePressBtnIdx[10]    = 0;
		ActivatePressBtnIdx[11]    = 0;
		ActivatePressBtnIdx[12]    = 0;
		ActivatePressBtnIdx[13]    = 0;
		ActivatePressBtnIdx[14]    = 0;
		ActivatePressBtnIdx[15]    = 0;
		AllButtonsIdx[0]           = 0;
		AllButtonsIdx[1]           = 0;
		AllButtonsOneIdx[0]	       = 0;
		AllButtonsOneIdx[1]	       = 0;
		UnmapBtnIdx[0]             = 0;
		UnmapBtnIdx[1]             = 0;
		                           
		verticalStrength[0]        =        0; // 86
		verticalStrength[1]        =        0; // 87
		verticalStrength[2]        =        0; // 88
		HorizontalStrength[0]      =        0; // 89
		HorizontalStrength[1]      =        0; // 90
		HorizontalStrength[2]      =        0; // 91
		Vertical[0]                =        0; // 92
		Vertical[1]                =        0; // 93
		Vertical[2]                =        0; // 94
		Horizontal[0]              =        0; // 95
		Horizontal[1]              =        0; // 96
		Horizontal[2]              =        0; // 97
		doubleStrengthTime[0]      =      450; // 98
		doubleStrengthTime[1]      =      450; // 99
		doubleStrengthTime[2]      =      450; // 100
		deadzone                   =        4; // 101
		VerticalStart[0]           =        0; // 102
		VerticalStart[1]           =        0; // 103
		VerticalStart[2]           =        0; // 104
		VerticalMid[0]             =        0; // 105
		VerticalMid[1]             =        0; // 106
		VerticalMid[2]             =        0; // 107
		VerticalEnd[0]             =        0; // 108
		VerticalEnd[1]             =        0; // 109
		VerticalEnd[2]             =        0; // 110
		VerticalTime[0]            =        0; // 111
		VerticalTime[1]            =        0; // 112
		VerticalTime[2]            =        0; // 113
		HorizontalStart[0]         =        0; // 114
		HorizontalStart[1]         =        0; // 115
		HorizontalStart[2]         =        0; // 116
		HorizontalEnd[0]           =        0; // 117
		HorizontalEnd[1]           =        0; // 118
		HorizontalEnd[2]           =        0; // 119
		HorizontalTime[0]          =        0; // 120
		HorizontalTime[1]          =        0; // 121
		HorizontalTime[2]          =        0; // 122
		aimType[0]                 = adminValueArrayTAA[adminAimAssistValues[0]][0];
		aimType[1]                 = adminValueArrayTAA[adminAimAssistValues[1]][0];
		aimType[2]                 = adminValueArrayTAA[adminAimAssistValues[2]][0];
		aimAssistTypeRS[0]         = adminValueArrayTAA[adminAimAssistValues[0]][1];
		aimAssistTypeRS[1]         = adminValueArrayTAA[adminAimAssistValues[1]][1];
		aimAssistTypeRS[2]         = adminValueArrayTAA[adminAimAssistValues[2]][1];
		taylorShapes[0]            = adminValueArrayTAA[adminAimAssistValues[0]][2];
		taylorShapes[1]            = adminValueArrayTAA[adminAimAssistValues[1]][2];
		taylorShapes[2]            = adminValueArrayTAA[adminAimAssistValues[2]][2];
		radiusSize[0]              = adminValueArrayTAA[adminAimAssistValues[0]][3];
		radiusSize[1]              = adminValueArrayTAA[adminAimAssistValues[1]][3];
		radiusSize[2]              = adminValueArrayTAA[adminAimAssistValues[2]][3];
		adsSpeedAngle[0]           = adminValueArrayTAA[adminAimAssistValues[0]][4];
		adsSpeedAngle[1]           = adminValueArrayTAA[adminAimAssistValues[1]][4];
		adsSpeedAngle[2]           = adminValueArrayTAA[adminAimAssistValues[2]][4];
		speedAngle[0]              = adminValueArrayTAA[adminAimAssistValues[0]][5];
		speedAngle[1]              = adminValueArrayTAA[adminAimAssistValues[1]][5];
		speedAngle[2]              = adminValueArrayTAA[adminAimAssistValues[2]][5];
		spiralChange[0]            = adminValueArrayTAA[adminAimAssistValues[0]][6];
		spiralChange[1]            = adminValueArrayTAA[adminAimAssistValues[1]][6];
		spiralChange[2]            = adminValueArrayTAA[adminAimAssistValues[2]][6];
		boostOnFire[0]             = adminValueArrayTAA[adminAimAssistValues[0]][7];
		boostOnFire[1]             = adminValueArrayTAA[adminAimAssistValues[1]][7];
		boostOnFire[2]             = adminValueArrayTAA[adminAimAssistValues[2]][7];
		boostSpeed[0]              = adminValueArrayTAA[adminAimAssistValues[0]][8];
		boostSpeed[1]              = adminValueArrayTAA[adminAimAssistValues[1]][8];
		boostSpeed[2]              = adminValueArrayTAA[adminAimAssistValues[2]][8];
		boostMinRadius[0]          = adminValueArrayTAA[adminAimAssistValues[0]][9];
		boostMinRadius[1]          = adminValueArrayTAA[adminAimAssistValues[1]][9];
		boostMinRadius[2]          = adminValueArrayTAA[adminAimAssistValues[2]][9];
		boostMaxRadius[0]          = adminValueArrayTAA[adminAimAssistValues[0]][10];
		boostMaxRadius[1]          = adminValueArrayTAA[adminAimAssistValues[1]][10];
		boostMaxRadius[2]          = adminValueArrayTAA[adminAimAssistValues[2]][10];
		taylorTracking[0]          = adminValueArrayTAA[adminAimAssistValues[0]][11];
		taylorTracking[1]          = adminValueArrayTAA[adminAimAssistValues[1]][11];
		taylorTracking[2]          = adminValueArrayTAA[adminAimAssistValues[2]][11];
		trackingSize[0]            = adminValueArrayTAA[adminAimAssistValues[0]][12];
		trackingSize[1]            = adminValueArrayTAA[adminAimAssistValues[1]][12];
		trackingSize[2]            = adminValueArrayTAA[adminAimAssistValues[2]][12];
		trackingSpeed[0]           = adminValueArrayTAA[adminAimAssistValues[0]][13];
		trackingSpeed[1]           = adminValueArrayTAA[adminAimAssistValues[1]][13];
		trackingSpeed[2]           = adminValueArrayTAA[adminAimAssistValues[2]][13];
		trackingBoostOnFire[0]     = adminValueArrayTAA[adminAimAssistValues[0]][14];
		trackingBoostOnFire[1]     = adminValueArrayTAA[adminAimAssistValues[1]][14];
		trackingBoostOnFire[2]     = adminValueArrayTAA[adminAimAssistValues[2]][14];
		trackingBoostSize[0]       = adminValueArrayTAA[adminAimAssistValues[0]][15];
		trackingBoostSize[1]       = adminValueArrayTAA[adminAimAssistValues[1]][15];
		trackingBoostSize[2]       = adminValueArrayTAA[adminAimAssistValues[2]][15];
		trackingBoostSpd[0]        = adminValueArrayTAA[adminAimAssistValues[0]][16];
		trackingBoostSpd[1]        = adminValueArrayTAA[adminAimAssistValues[1]][16];
		trackingBoostSpd[2]        = adminValueArrayTAA[adminAimAssistValues[2]][16];
		ceorinShape[0]             = adminValueArrayCAA[adminAimAssistValues[0]][ 0];
		ceorinShape[1]             = adminValueArrayCAA[adminAimAssistValues[1]][ 0];
		ceorinShape[2]             = adminValueArrayCAA[adminAimAssistValues[2]][ 0];
		leftStickStrength[0]       = adminValueArrayCAA[adminAimAssistValues[0]][ 1];
		leftStickStrength[1]       = adminValueArrayCAA[adminAimAssistValues[1]][ 1];
		leftStickStrength[2]       = adminValueArrayCAA[adminAimAssistValues[2]][ 1];
		leftStickSpeed[0]          = adminValueArrayCAA[adminAimAssistValues[0]][ 2];
		leftStickSpeed[1]          = adminValueArrayCAA[adminAimAssistValues[1]][ 2];
		leftStickSpeed[2]          = adminValueArrayCAA[adminAimAssistValues[2]][ 2];
		rateOfFire[0]              =        1; // 183
		rateOfFire[1]              =        1; // 184
		rateOfFire[2]              =        1; // 185
		legacyARH                  =        0; // 186
		handGunVertical[0]         =        0; // 187
		handGunVertical[1]         =        0; // 188
		handGunVertical[2]         =        0; // 189
		akimboRateOfFire[0]        =        1; // 190
		akimboRateOfFire[1]        =        1; // 191
		akimboRateOfFire[2]        =        1; // 192
		burstHoldTime[0]           =      150;
		burstHoldTime[1]           =      150;
		burstHoldTime[2]           =      150;
		burstRestTime[0]           =      150;
		burstRestTime[1]           =      150;
		burstRestTime[2]           =      150;
		mw2JumpDelay               =      200; // 193
		PingDelay                  =     1000; // 194
		holdBreathDelay[0]         =     1000; // 195
		holdBreathDelay[1]         =     1000; // 196
		holdBreathDelay[2]         =     1000; // 197
		quickScopeDelay            =      350; // 198
		gWalkDelayTime             =      350; // 199
		slideDelayMw2              =      300; // 200
		GeneralSens                =      100; // 201
		AdsSens                    =      100; // 202
		FireSens                   =      100; // 203
		AdsFireSens                =      100; // 204
     }
} // end of LOAD FUNCTION 
function Save(){  
	reset_spvar(); //  
	save_spvar(1,0, 1); //  
	save_spvar(antiRecoilBasic[0]  ,       0,       2); // 0 
	save_spvar(antiRecoilBasic[1]  ,       0,       2); // 1 
	save_spvar(antiRecoilBasic[2]  ,       0,       2); // 2 
	save_spvar(antiRecoilPolar[0]  ,       0,       2); // 3 
	save_spvar(antiRecoilPolar[1]  ,       0,       2); // 4 
	save_spvar(antiRecoilPolar[2]  ,       0,       2); // 5 
	save_spvar(antiRecoilAdvanced[0],       0,       3); // 6 
	save_spvar(antiRecoilAdvanced[1],       0,       3); // 7 
	save_spvar(antiRecoilAdvanced[2],       0,       3); // 8 
	save_spvar(adminAimAssistValues[0],       0,      55); // 9 
	save_spvar(adminAimAssistValues[1],       0,      55); // 10
	save_spvar(adminAimAssistValues[2],       0,      55); // 11
	save_spvar(aimAssist[0]        ,       0,       3); // 12
	save_spvar(aimAssist[1]        ,       0,       3); // 13
	save_spvar(aimAssist[2]        ,       0,       3); // 14
	save_spvar(rotationalAA[0]     ,       0,       1); // 15
	save_spvar(rotationalAA[1]     ,       0,       1); // 16
	save_spvar(rotationalAA[2]     ,       0,       1); // 17
	save_spvar(toggleRapidFire[0]  ,       0,       1); // 18
	save_spvar(toggleRapidFire[1]  ,       0,       1); // 19
	save_spvar(toggleRapidFire[2]  ,       0,       1); // 20
	save_spvar(toggleAkimbo[0]     ,       0,       2); // 21
	save_spvar(toggleAkimbo[1]     ,       0,       2); // 22
	save_spvar(toggleAkimbo[2]     ,       0,       2); // 23
	save_spvar(toggleBurstFire[0]  ,       0,       1);       
	save_spvar(toggleBurstFire[1]  ,       0,       1);       
	save_spvar(toggleBurstFire[2]  ,       0,       1);       
	save_spvar(dropShotmw2[0]      ,       0,       1); // 24
	save_spvar(dropShotmw2[1]      ,       0,       1); // 25
	save_spvar(dropShotmw2[2]      ,       0,       1); // 26
	save_spvar(mw2SnakeShot[0]     ,       0,       1); // 27
	save_spvar(mw2SnakeShot[1]     ,       0,       1); // 28
	save_spvar(mw2SnakeShot[2]     ,       0,       1); // 29
	save_spvar(crouchShot[0]       ,       0,       1); // 30
	save_spvar(crouchShot[1]       ,       0,       1); // 31
	save_spvar(crouchShot[2]       ,       0,       1); // 32
	save_spvar(jumpShot[0]         ,       0,       1); // 33
	save_spvar(jumpShot[1]         ,       0,       1); // 34
	save_spvar(jumpShot[2]         ,       0,       1); // 35
	save_spvar(autoAim[0]          ,       0,       1); // 36
	save_spvar(autoAim[1]          ,       0,       1); // 37
	save_spvar(autoAim[2]          ,       0,       1); // 38
	save_spvar(enemyPing           ,       0,       1); // 39
	save_spvar(holdBreath[0]       ,       0,       2); // 40
	save_spvar(holdBreath[1]       ,       0,       2); // 41
	save_spvar(holdBreath[2]       ,       0,       2); // 42
	save_spvar(quickScope[0]       ,       0,       1); // 43
	save_spvar(quickScope[1]       ,       0,       1); // 44
	save_spvar(quickScope[2]       ,       0,       1); // 45
	save_spvar(silentShot[0]       ,       0,       1); // 46
	save_spvar(silentShot[1]       ,       0,       1); // 47
	save_spvar(silentShot[2]       ,       0,       1); // 48
	save_spvar(mw2GWalk            ,       0,       1); // 49
	save_spvar(cancelSlideMw2      ,       0,       2); // 50
	save_spvar(bunnyHop            ,       0,       1); // 51
	save_spvar(fastMelee[0]        ,       0,       2); // 52
	save_spvar(fastMelee[1]        ,       0,       2); // 53
	save_spvar(fastMelee[2]        ,       0,       2); // 54
	save_spvar(snakePlate          ,       0,       1); // 55
	save_spvar(vmSpeed             ,       0,       3); // 56
	save_spvar(customSens          ,       0,       1); // 57
	save_spvar(tacSprint           ,       0,       1); // 58
	save_spvar(dolphinCancel       ,       0,       1); // 59
	save_spvar(weaponSwap          ,       0,       1); // 59
	save_spvar(buttonLayouts       ,       0,      21); // 60
	save_spvar(stickLayouts        ,       0,       3); // 61
	save_spvar(useInverted         ,       0,       1); // 62
	save_spvar(blockRumble         ,       0,       1); // 63
	save_spvar(hairTriggers        ,       0,       1); // 64
	save_spvar(swapPS4Btns         ,       0,       1);
	save_spvar(weaponName[0]       ,       0,       8); // 73
	save_spvar(weaponName[1]       ,       0,       8); // 74
	save_spvar(weaponName[2]       ,       0,       8); // 75
	save_spvar(setLedColour[0]     ,       0,       1);
	save_spvar(setLedColour[1]     ,       0,       1);
	save_spvar(setLedColour[2]     ,       0,       1);
	save_spvar(getColour[0] 	   ,       0,     360);
	save_spvar(getColour[1] 	   ,       0,     360);
	save_spvar(getColour[2] 	   ,       0,     360);
	save_spvar(standardARFireType[0]  ,0, 2);
	save_spvar(standardARFireType[1]  ,0, 2);
	save_spvar(standardARFireType[2]  ,0, 2);
	save_spvar(progressiveARFireType[0],0, 2);
	save_spvar(progressiveARFireType[1],0, 2);
	save_spvar(progressiveARFireType[2],0, 2);
	save_spvar(taylorFireType[0]      ,0, 3);
	save_spvar(taylorFireType[1]      ,0, 3);
	save_spvar(taylorFireType[2]      ,0, 3);
	save_spvar(rotationalFireType[0]  ,0, 3);
	save_spvar(rotationalFireType[1]  ,0, 3);
	save_spvar(rotationalFireType[2]  ,0, 3);
	save_spvar(rapidFireType[0]       ,0, 3);
	save_spvar(rapidFireType[1]       ,0, 3);
	save_spvar(rapidFireType[2]       ,0, 3);
	save_spvar(burstFireType[0]       ,0, 3);
	save_spvar(burstFireType[1]       ,0, 3);
	save_spvar(burstFireType[2]       ,0, 3);
	save_spvar(quickScopeActivation[0],0, 1);
	save_spvar(quickScopeActivation[1],0, 1);
	save_spvar(quickScopeActivation[2],0, 1);
	save_spvar(snakeShotActivationmw2[0],0, 4);
	save_spvar(snakeShotActivationmw2[1],0, 4);
	save_spvar(snakeShotActivationmw2[2],0, 4);
	save_spvar(crouchShotActivation[0]  ,0, 4);
	save_spvar(crouchShotActivation[1]  ,0, 4);
	save_spvar(crouchShotActivation[2]  ,0, 4);
	save_spvar(jumpShotActivation[0]   ,0, 4);
	save_spvar(jumpShotActivation[1]   ,0, 4);
	save_spvar(jumpShotActivation[2]   ,0, 4);
    save_spvar(dropShotmw2FireType[0]  ,0, 4);
    save_spvar(dropShotmw2FireType[1]  ,0, 4);
    save_spvar(dropShotmw2FireType[2]  ,0, 4);
    save_spvar(weaponSwapActivation    ,0, 1);
    save_spvar(ActivateHoldBtnIdx[0]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[1]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[2]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[3]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[4]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[5]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[6]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[7]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[8]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[9]  ,0,14);
	save_spvar(ActivateHoldBtnIdx[10] ,0,14);
	save_spvar(ActivateHoldBtnIdx[11] ,0,14);
	save_spvar(ActivateHoldBtnIdx[12] ,0,14);
	save_spvar(ActivateHoldBtnIdx[13] ,0,14);
	save_spvar(ActivateHoldBtnIdx[14] ,0,14);
	save_spvar(ActivateHoldBtnIdx[15] ,0,14);
	save_spvar(ActivatePressBtnIdx[0] ,0,21);
	save_spvar(ActivatePressBtnIdx[1] ,0,21);
	save_spvar(ActivatePressBtnIdx[2] ,0,21);
	save_spvar(ActivatePressBtnIdx[3] ,0,21);
	save_spvar(ActivatePressBtnIdx[4] ,0,21);
	save_spvar(ActivatePressBtnIdx[5] ,0,21);
	save_spvar(ActivatePressBtnIdx[6] ,0,21);
	save_spvar(ActivatePressBtnIdx[7] ,0,21);
	save_spvar(ActivatePressBtnIdx[8] ,0,21);
	save_spvar(ActivatePressBtnIdx[9] ,0,21);
	save_spvar(ActivatePressBtnIdx[10],0,21);
	save_spvar(ActivatePressBtnIdx[11],0,21);
	save_spvar(ActivatePressBtnIdx[12],0,21);
	save_spvar(ActivatePressBtnIdx[13],0,21);
	save_spvar(ActivatePressBtnIdx[14],0,21);
	save_spvar(ActivatePressBtnIdx[15],0,21);
	save_spvar(AllButtonsIdx[0]       ,0,25);
	save_spvar(AllButtonsIdx[1]       ,0,25);
	save_spvar(AllButtonsOneIdx[0]	  ,0,25);
	save_spvar(AllButtonsOneIdx[1]	  ,0,25);
	save_spvar(UnmapBtnIdx[0]         ,0,25);
	save_spvar(UnmapBtnIdx[1]         ,0,25);
	save_spvar(verticalStrength[0] ,     -99,      99); // 86
	save_spvar(verticalStrength[1] ,     -99,      99); // 87
	save_spvar(verticalStrength[2] ,     -99,      99); // 88
	save_spvar(HorizontalStrength[0],     -99,      99); // 89
	save_spvar(HorizontalStrength[1],     -99,      99); // 90
	save_spvar(HorizontalStrength[2],     -99,      99); // 91
	save_spvar(Vertical[0]         ,     -99,      99); // 92
	save_spvar(Vertical[1]         ,     -99,      99); // 93
	save_spvar(Vertical[2]         ,     -99,      99); // 94
	save_spvar(Horizontal[0]       ,     -99,      99); // 95
	save_spvar(Horizontal[1]       ,     -99,      99); // 96
	save_spvar(Horizontal[2]       ,     -99,      99); // 97
	save_spvar(doubleStrengthTime[0],       0,    5000); // 98
	save_spvar(doubleStrengthTime[1],       0,    5000); // 99
	save_spvar(doubleStrengthTime[2],       0,    5000); // 100
	save_spvar(deadzone            ,       0,      20); // 101
	save_spvar(VerticalStart[0]    ,     -99,      99); // 102
	save_spvar(VerticalStart[1]    ,     -99,      99); // 103
	save_spvar(VerticalStart[2]    ,     -99,      99); // 104
	save_spvar(VerticalMid[0]      ,     -99,      99); // 105
	save_spvar(VerticalMid[1]      ,     -99,      99); // 106
	save_spvar(VerticalMid[2]      ,     -99,      99); // 107
	save_spvar(VerticalEnd[0]      ,     -99,      99); // 108
	save_spvar(VerticalEnd[1]      ,     -99,      99); // 109
	save_spvar(VerticalEnd[2]      ,     -99,      99); // 110
	save_spvar(VerticalTime[0]     ,       0,      99); // 111
	save_spvar(VerticalTime[1]     ,       0,      99); // 112
	save_spvar(VerticalTime[2]     ,       0,      99); // 113
	save_spvar(HorizontalStart[0]  ,     -99,      99); // 114
	save_spvar(HorizontalStart[1]  ,     -99,      99); // 115
	save_spvar(HorizontalStart[2]  ,     -99,      99); // 116
	save_spvar(HorizontalEnd[0]    ,     -99,      99); // 117
	save_spvar(HorizontalEnd[1]    ,     -99,      99); // 118
	save_spvar(HorizontalEnd[2]    ,     -99,      99); // 119
	save_spvar(HorizontalTime[0]   ,       0,      99); // 120
	save_spvar(HorizontalTime[1]   ,       0,      99); // 121
	save_spvar(HorizontalTime[2]   ,       0,      99); // 122
	save_spvar(aimType[0]          ,       0,       1); // 123
	save_spvar(aimType[1]          ,       0,       1); // 124
	save_spvar(aimType[2]          ,       0,       1); // 125
	save_spvar(aimAssistTypeRS[0]  ,       0,       2); // 126
	save_spvar(aimAssistTypeRS[1]  ,       0,       2); // 127
	save_spvar(aimAssistTypeRS[2]  ,       0,       2); // 128
	save_spvar(taylorShapes[0]     ,       0,      11); // 129
	save_spvar(taylorShapes[1]     ,       0,      11); // 130
	save_spvar(taylorShapes[2]     ,       0,      11); // 131
	save_spvar(radiusSize[0]       ,       0,      99); // 132
	save_spvar(radiusSize[1]       ,       0,      99); // 133
	save_spvar(radiusSize[2]       ,       0,      99); // 134
	save_spvar(adsSpeedAngle[0]    ,       0,      99); // 135
	save_spvar(adsSpeedAngle[1]    ,       0,      99); // 136
	save_spvar(adsSpeedAngle[2]    ,       0,      99); // 137
	save_spvar(speedAngle[0]       ,       0,      99); // 138
	save_spvar(speedAngle[1]       ,       0,      99); // 139
	save_spvar(speedAngle[2]       ,       0,      99); // 140
	save_spvar(spiralChange[0]     ,       0,       1); // 141
	save_spvar(spiralChange[1]     ,       0,       1); // 142
	save_spvar(spiralChange[2]     ,       0,       1); // 143
	save_spvar(boostOnFire[0]      ,       0,       2); // 144
	save_spvar(boostOnFire[1]      ,       0,       2); // 145
	save_spvar(boostOnFire[2]      ,       0,       2); // 146
	save_spvar(boostSpeed[0]       ,       0,      99); // 147
	save_spvar(boostSpeed[1]       ,       0,      99); // 148
	save_spvar(boostSpeed[2]       ,       0,      99); // 149
	save_spvar(boostMinRadius[0]   ,       0,      99); // 150
	save_spvar(boostMinRadius[1]   ,       0,      99); // 151
	save_spvar(boostMinRadius[2]   ,       0,      99); // 152
	save_spvar(boostMaxRadius[0]   ,       0,      99); // 153
	save_spvar(boostMaxRadius[1]   ,       0,      99); // 154
	save_spvar(boostMaxRadius[2]   ,       0,      99); // 155
	save_spvar(taylorTracking[0]   ,       0,       3); // 156
	save_spvar(taylorTracking[1]   ,       0,       3); // 157
	save_spvar(taylorTracking[2]   ,       0,       3); // 158
	save_spvar(trackingSize[0]     ,       0,      99); // 159
	save_spvar(trackingSize[1]     ,       0,      99); // 160
	save_spvar(trackingSize[2]     ,       0,      99); // 161
	save_spvar(trackingSpeed[0]    ,       0,      99); // 162
	save_spvar(trackingSpeed[1]    ,       0,      99); // 163
	save_spvar(trackingSpeed[2]    ,       0,      99); // 164
	save_spvar(trackingBoostOnFire[0],       0,       1); // 165
	save_spvar(trackingBoostOnFire[1],       0,       1); // 166
	save_spvar(trackingBoostOnFire[2],       0,       1); // 167
	save_spvar(trackingBoostSize[0],       0,      99); // 168
	save_spvar(trackingBoostSize[1],       0,      99); // 169
	save_spvar(trackingBoostSize[2],       0,      99); // 170
	save_spvar(trackingBoostSpd[0] ,       0,      99); // 171
	save_spvar(trackingBoostSpd[1] ,       0,      99); // 172
	save_spvar(trackingBoostSpd[2] ,       0,      99); // 173
	save_spvar(ceorinShape[0]      ,       0,       5); // 174
	save_spvar(ceorinShape[1]      ,       0,       5); // 175
	save_spvar(ceorinShape[2]      ,       0,       5); // 176
	save_spvar(leftStickStrength[0],       0,      99); // 177
	save_spvar(leftStickStrength[1],       0,      99); // 178
	save_spvar(leftStickStrength[2],       0,      99); // 179
	save_spvar(leftStickSpeed[0]   ,       0,     100); // 180
	save_spvar(leftStickSpeed[1]   ,       0,     100); // 181
	save_spvar(leftStickSpeed[2]   ,       0,     100); // 182
	save_spvar(rateOfFire[0]       ,       0,      25); // 183
	save_spvar(rateOfFire[1]       ,       0,      25); // 184
	save_spvar(rateOfFire[2]       ,       0,      25); // 185
	save_spvar(legacyARH           ,       0,       2); // 186
	save_spvar(handGunVertical[0]  ,     -99,      99); // 187
	save_spvar(handGunVertical[1]  ,     -99,      99); // 188
	save_spvar(handGunVertical[2]  ,     -99,      99); // 189
	save_spvar(akimboRateOfFire[0] ,       0,      25); // 190
	save_spvar(akimboRateOfFire[1] ,       0,      25); // 191
	save_spvar(akimboRateOfFire[2] ,       0,      25); // 192
	save_spvar(burstHoldTime[0]    ,       0,     900);      
	save_spvar(burstHoldTime[1]    ,       0,     900);      
	save_spvar(burstHoldTime[2]    ,       0,     900); 
	save_spvar(burstRestTime[0]    ,       0,     900);
	save_spvar(burstRestTime[1]    ,       0,     900);  
	save_spvar(burstRestTime[2]    ,       0,     900);  
	save_spvar(mw2JumpDelay        ,       0,     500); // 193
	save_spvar(PingDelay           ,       0,    5000); // 194
	save_spvar(holdBreathDelay[0]  ,       0,    5000); // 195
	save_spvar(holdBreathDelay[1]  ,       0,    5000); // 196
	save_spvar(holdBreathDelay[2]  ,       0,    5000); // 197
	save_spvar(quickScopeDelay     ,       0,     900); // 198
	save_spvar(gWalkDelayTime      ,       0,     700); // 199
	save_spvar(slideDelayMw2       ,       0,     500); // 200
	save_spvar(GeneralSens         ,       0,     327); // 201
	save_spvar(AdsSens             ,       0,     327); // 202
	save_spvar(FireSens            ,       0,     327); // 203
	save_spvar(AdsFireSens         ,       0,     327); // 204
}// end of SAVE FUNCTION
function reset_spvar() {
	spvar_current_slot = SPVAR_1; // Change this to say where it's safe to start storing data
	spvar_current_bit = 0; // Should always be 0, unless you're using part of the first SPVAR in which case you should also change the next line to include the value you are storing in the bits you are using
	spvar_current_value = 0;
}

// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ 

int spvar_current_bit, 		// Variable used to keep track of the next available bit
	spvar_current_slot,		// Variable used to keep track of the currently used SPVAR slot
    spvar_current_value,    // Variable used to keep track of the current value with all the bits from the previous variables saved in the current SPVAR
    spvar_tmp,                // Variable used temporarily during the various calculation steps
    spvar_bits;                // Variable used to keep track of the number of bits required to represent the currently saved/loaded variable

// Function used to count the number of bits used by the given value
function get_bit_count(val) {
    spvar_tmp = 0; // We need to start at 0, we use spvar_tmp here as we need to track the bits during our loop below
    while (val) { // Loop while val is anything but 0
        spvar_tmp++; // Increment the bit count by 1
        val = abs(val >> 1); // Shift the value down 1 bit, once we have no more bits set this will result in 0, unless the value is negative - in which case this will be endless, we do abs here to make it always
    }
    return spvar_tmp;
}
// Function used to count the number of bits used by 2 given values
function get_bit_count2(val1, val2) {    
    spvar_tmp = max(get_bit_count(val1), get_bit_count(val2)); // Get the highest bit count required for either min or max
    if (is_signed2(val1, val2)) { // Check if we need to know if the value is negative or not
        spvar_tmp++; // If we need to track if the saved value is negative, we need 1 bit for that specifically - the others are used to store the actual value
    }
    return spvar_tmp;
}
// Function used to determine if either of 2 given values is negative
function is_signed2(val1, val2) { return val1 < 0 || val2 < 0; }
// Function used to generate a bitmask for the sign bit, this will always be the highest bit in the range we're requesting it for, to do that - we need to start with the lowest bit set and move it up the number of steps there is between 1 and the bits we need, this needs to be a maximum of 31 but can never be negative
function make_sign(bits) { return 1 << clamp(bits - 1, 0, 31); }
// Function used to generate a full bitmask (essentially all bits set up to and including the number of bits given)
function make_full_mask(bits) {    
    if (bits == 32) { // If we're wanting a bitmask for all bits, we can simply return -1 (which is all bits set to 1)
        return -1;
    }
    return 0x7FFFFFFF >> (31 - bits); // What we do here is basically take a value with all bits except the highest set and shift them down as many times as we need to get a mask that fits the bit count we're looking for
}
// Function used to generate a bitmask for just the bits required for the value part of a signed range, this means all the bits below the sign bit
function make_sign_mask(bits) { return make_full_mask(bits - 1); }
// Function used to pack a value that has potential for being negative in a way that we use the least number of bits we really need to represent the value
function pack_i(val, bits) {
    if (val < 0) { // Check if we have a negative value, if so - handle it accordingly
        return (abs(val) & make_sign_mask(bits)) | make_sign(bits); // Get the positive version of the value and keep the bits that are within range of what we're doing and add the sign bit since we have a negative value and return the result
    }
    return val & make_sign_mask(bits); // Get the bits that are within our range
}
// Function used to unpack (restore) a value that has potential for being negative, essentially reversing what pack_i does above
function unpack_i(val, bits) {
    if (val & make_sign(bits)) { // Check if the stored value is supposed to ve negative
        return 0 - (val & make_sign_mask(bits)); // Retrieve the stored positive value and subtract it from 0 (resulting in the same value except negative), return the result
    }
    return val & make_sign_mask(bits); // Retrieve the stored positive value and return it
}
// Function used to read the value of a SPVAR without any limits
function read_spvar_slot(slot) { return get_pvar(slot, 0x80000000, 0x7FFFFFFF, 0); }
// Function used to save your value in the SPVARs, this is the function you'll be calling when saving a value. You need to provide the value to save aswell as the range (minimum and maximum value, this is how we determine how many bits to use when saving this value)
function save_spvar(val, min, max) {
    spvar_bits = get_bit_count2(min, max); // Set spvar_bits to the number of bits we need for this range
    
    val = clamp(val, min, max); // Make sure the value is within our defined range to begin with
    
    if (is_signed2(min, max)) { // If either min or max is negative, we need to pack this value as a possibly negative value
        val = pack_i(val, spvar_bits); // Pack as signed value (possibly negative)
    }
    val = val & make_full_mask(spvar_bits); // Pack as unsigned value (always positive), this essentially just makes the resulting value not have any extra bits set - it's safe to use after the signed packing since we're not using any bits outside of the unsigned range anyways
    
    if (spvar_bits >= 32 - spvar_current_bit) { // Check if there is not enough bits remaining to save this value as-is. if there aren't enough bits, we save what we can here and store the remaining bits in the next spvar, if this means we're hitting the end, we can make this smaller by handling the case where we use all bits here aswell
        spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Add what we can to the current value where there is bits available to use
        set_pvar(spvar_current_slot, spvar_current_value); // Save the current SPVAR before advancing to the next one
        spvar_current_slot++; // Move to the next slot
        spvar_bits -= (32 - spvar_current_bit); // Update the required bits according to our needs for the next slot, if we don't do this here, we'll screw up the saved value by moving it too far out of range
        val = val >> (32 - spvar_current_bit); // Move the remaining bits down, discarding the bits we've already saved
        spvar_current_bit = 0; // Reset the current bit counter since we're starting with a new SPVAR
        spvar_current_value = 0; // Reset our value so we start clean, we aren't currently using any bits anyways
    }
    
    spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Merge the current SPVAR value with our currently value where there is space to keep our value
    spvar_current_bit += spvar_bits; // Move up the counter of next available bit to where we are currently saving data at
    if (!spvar_current_bit) {
        spvar_current_value = 0; // Reset our value so we start clean, we aren't currently using any bits anyways
    }
    set_pvar(spvar_current_slot, spvar_current_value); // Save the SPVAR with the current value, this won't write anything to flash unless the value changed - so we can do this for each variable saved to no risk missing anything
}
// Function used to read your value from the SPVARs, this is the function you'll be calling when reading a value. You need to provide the range (minimum and maximum value, this is how we determine how many bits to use when reading the value) aswell as a default value if what we read is out of range
function read_spvar(min, max, def) {
    spvar_bits = get_bit_count2(min, max); // Set spvar_bits to the number of bits we need for this range
        spvar_current_value = (read_spvar_slot(spvar_current_slot) >> spvar_current_bit) & make_full_mask(spvar_bits); // Read the current SPVAR value from flash and shift them into position, we'll handle split values next
    
    if (spvar_bits >= 32 - spvar_current_bit) { // Check if we are dealing with a split SPVAR value, essentially if the current position means we're using more than 32 bits in the SPVAR, we need to retrieve the missing bits from the next SPVAR and put them back to our current value, we use the same space saving trick here as in the save function
        spvar_current_value = (spvar_current_value & make_full_mask(32 - spvar_current_bit)) | ((read_spvar_slot(spvar_current_slot + 1) & make_full_mask(spvar_bits - (32 - spvar_current_bit))) << (32 - spvar_current_bit));
        //Below is a breakdown of the line above, with each step done one at a time instead of all at once - this however increases codesize - the below code is to explain how it all works tho
        //spvar_tmp = read_spvar_slot(spvar_current_slot + 1); // Read the SPVAR slot coming after the initial one we used to spvar_tmp from flash, we need to maintain the data we've read thus far, but also add on what we have in flash for the next SPVAR
        //spvar_tmp = spvar_tmp & make_full_mask(spvar_bits - (32 - spvar_current_bit)); // Extract the bits we need need (the ones that didn't fit in the previous SPVAR)
        //spvar_tmp = spvar_tmp << (32 - spvar_current_bit); // Move the bits into their original position, they were stored at the beginning of the new SPVAR but belong at the top of the currently read value
        //spvar_current_value = (spvar_current_value & make_full_mask(32 - spvar_current_bit)) | spvar_tmp; // put all bits together again with the part read from the first SPVAR cleaned up to only include the bits from this variable/value and not all bits set in the upper range like they normally are
    }    
    spvar_current_bit += spvar_bits; // Move up the counter of next available bit to where we are will be reading data from next
    spvar_current_value = spvar_current_value & make_full_mask(spvar_bits); // Extract all bits included for this value and discard any other bits
    if (spvar_current_bit >= 32) {
        spvar_current_slot++; // Move to the next SPVAR slot
        spvar_current_bit -= 32; // Remove 32 from the spvar_current_bit tracker since we've gone beyond what we can do here
    }
    
    if (is_signed2(min, max)) { // Check if the value can be negative and handle it accordingly
        spvar_current_value = unpack_i(spvar_current_value, spvar_bits); // Restore the signed, possibly negative value
    }
    
    if (spvar_current_value < min || spvar_current_value > max) { // Check if the value is below our specified min or above our specified max, if so - return the default value instead
        return def; // This can be changed to min instead as a reasonable default with the default parameter being removed if you don't need to have a override value for the default when out of range, that will save a bit of code size
    }
    
    // Return the retrieved value to the user since it's within the expected range
    return spvar_current_value;
}  
 /*
============================================================================================================================================
  Menu Scroll ()                                                                                                                      
============================================================================================================================================
*/
int introScrollTimer, introScrollPauseTime;
int introScrollTextOffset;
int introScrollTextIndex;
int introScrollCharIndex = 1;

function menuScroll() {
    introScrollTimer += get_rtime();
    if(introScrollTimer >= introScrollPauseTime) {
        introScrollPauseTime = 50;
        for (introScrollTextIndex = 1; introScrollTextIndex <= 20; introScrollTextIndex++) {
            if (introScrollTextIndex + introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + (introScrollTextOffset - sizeof(MENU_SCROLL_TEXT))]);
            }
            else {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + introScrollTextOffset]);
            }
        }
        puts_oled(1, 53,OLED_FONT_SMALL, introScrollTextIndex, OLED_WHITE);
        introScrollTextOffset++;
        if (introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
            introScrollTextOffset = 0;
        }
        introScrollCharIndex--;
        if (introScrollCharIndex < 1) {
            introScrollCharIndex = 20;
            introScrollPauseTime = 2000;

        }
        introScrollTimer = 0;
    }
}
 const uint8 MENU_SCROLL_TEXT[] = {
//    1			2		   3	4	     5		    6		 7		  8		    9      10	     11	     12		  13	   14		 15		  16		17        18
     
     space, space, _P , _R , _E ,_S ,_S ,space , _U,_P , space , _O , _R , space , _D , _O , _W , _N , space , space,
     
     _P , _R , _E ,_S ,_S ,space , _L,_E,_F,_T, space , _O , _R , space , _R, _I , _G ,_H, _T , space,
     
     space, space, _T,_O , space, _C,_Y,_C,_L,_E , space , _T , _H , _E , space , _M,_O,_D,_S, space,
     
     space, space, space,_P,_R,_E,_S,_S, space, _A,space,slash,space,_C,_R,_O,_S,_S,space,space,
     
     space, _T,_O,space,_E,_N,_T,_E,_R,space,_A,_N,_Y,space,_M,_E,_N,_U,_S,space,
     
     space,_T,_O,space,_E,_X,_I,_T,space,_A,_N,_Y,space,_M,_E,_N,_U,_S,space,space,
     
     space,space,_P,_R,_E,_S,_S , space, _B, space,slash,space,_C,_I,_R,_C,_L,_E,space,space,
     
     space, _P , _R , _E ,_S ,_S ,space , _Y, space , slash,space,_T,_R,_I,_A,_N,_G,_L,_E,space,
     
     space,_T,_O,space,_C,_H,_A,_N,_G,_E,space,_P,_R,_O,_F,_I,_L,_E,_S,space,
     
     space,space,space,_H,_O,_L,_D,space,_L,_T,space,slash,space,_L,_2,space,space,space,space,space,
     
     _P , _R , _E ,_S ,_S ,space , _L,_E,_F,_T, space , _O , _R , space , _R, _I , _G ,_H, _T , space,
     
     space, space, _P , _R , _E ,_S ,_S ,space , _U,_P , space , _O , _R , space , _D , _O , _W , _N , space , space,
     
     space ,space, _T,_O , space, _C,_H,_A,_N,_G,_E,space,_V,_A,_L,_U,_E,_S,space,space 
          
};  
define  _0 = 48,   _A = 65,   _K = 75,   _U =  85,   _e = 101,   _o = 111,   _y      = 121,    _plus      = 43, slash     = 47 , _dot     =  46, _minus = 45;
define  _1 = 49,   _B = 66,   _L = 76,   _V =  86,   _f = 102,   _p = 112,   _z      = 122;
define  _2 = 50,   _C = 67,   _M = 77,   _W =  87,   _g = 103,   _q = 113,   space   =  32;
define  _3 = 51,   _D = 68,   _N = 78,   _X =  88,   _h = 104,   _r = 114,   bang    =  33;
define  _4 = 52,   _E = 69,   _O = 79,   _Y =  89,   _i = 105,   _s = 115,   quote   =  34;
define  _5 = 53,   _F = 70,   _P = 80,   _Z =  90,   _j = 106,   _t = 116,   hash    =  35;
define  _6 = 54,   _G = 71,   _Q = 81,   _a =  97,   _k = 107,   _u = 117,   dollar  =  36;
define  _7 = 55,   _H = 72,   _R = 82,   _b =  98,   _l = 108,   _v = 118,   percent =  37;
define  _8 = 56,   _I = 73,   _S = 83,   _c =  99,   _m = 109,   _w = 119,   and     =  38;
define  _9 = 57,   _J = 74,   _T = 84,   _d = 100,   _n = 110,   _x = 120,   tick    =  39;

/*
============================================
Menu Stuff & Variables 
============================================
*/
int Ads,Fire,Tactical,Lethal,Crouch,Jump,Reload,Melee,Swap,Sprint,Ping;
/* Menu Variables */
int modMenu,editMenu,recoilEdit,CustomProfile,selectedProfileIdx,driveMode,LedOn,LedOff; 
int modNameIdx,valNameIdx;
int mainMenu,mainNameIdx;

/* Display Variables / ScreenSaver / Strings/Text  */
int screenSaver,blankScreen;
int displayTitle = TRUE;
int updateDisplay,profileIdx;
/* Mod Menu Variables */
int antiRecoilBasic[3]     ;// 0  0
int antiRecoilPolar[3]     ;// 1  0
int antiRecoilAdvanced[3]  ;// 2  0
int adminAimAssistValues[3];// 3  1
int aimAssist[3]           ;// 4  1
int rotationalAA[3]        ;// 5  1
int toggleRapidFire[3]     ;// 6  2
int toggleAkimbo[3]        ;// 7  2
int toggleBurstFire[3]     ;
int dropShotmw2[3]         ;// 8  2
int mw2SnakeShot[3]        ;// 9  2
int crouchShot[3]          ;// 10 2
int jumpShot[3]            ;// 11 2
int autoAim[3]             ;// 12 2
int enemyPing              ;// 13 2
int holdBreath[3]          ;// 14 3
int quickScope[3]          ;// 15 3
int silentShot[3]          ;// 16 3
int mw2GWalk               ;// 17 3
int cancelSlideMw2         ;// 18 3
int bunnyHop               ;// 19 3
int fastMelee[3]           ;// 20 3
int snakePlate             ;// 21 3
int vmSpeed                ;// 22 3
int customSens             ;// 23 3
int tacSprint              ;// 24 3
int dolphinCancel          ;// 25 3
int weaponSwap;
int buttonLayouts          ;// 26 4
int stickLayouts           ;// 27 4
int useInverted            ;// 28 4
int blockRumble            ;// 29 4
int hairTriggers           ;// 30 4
int swapPS4Btns            ;
// 31 4
// 32 4
// 33 4
// 34 4
// 35 5
// 36 5
// 37 5
int setLedColour[3];
int getColour[3];
int weaponName[3]          ;// 40 5
// 41 6
// 41 6
// 42 6
// 43 6
// 44 6
// 45 6
// 46 6
// 47 6
// 48 6
// 49 6
                        
/* Edit Menu Variables */
int verticalStrength[3];// 0  0
int HorizontalStrength[3];// 1  0
int Vertical[3]        ;// 2  0
int Horizontal[3]      ;// 3  0
int doubleStrengthTime[3];// 4  0
int deadzone           ;// 5  0
int VerticalStart[3]   ;// 6  0
int VerticalMid[3]     ;// 7  0
int VerticalEnd[3]     ;// 8  0
int VerticalTime[3]    ;// 9  0
int HorizontalStart[3] ;// 10 0
int HorizontalEnd[3]   ;// 11 0
int HorizontalTime[3]  ;// 12 0
int aimType[3]         ;// 13 1
int aimAssistTypeRS[3] ;// 14 1
int taylorShapes[3]    ;// 15 1
int radiusSize[3]      ;// 16 1
int adsSpeedAngle[3]   ;// 17 1
int speedAngle[3]      ;// 18 1
int spiralChange[3]    ;// 19 1
int boostOnFire[3]     ;// 20 1
int boostSpeed[3]      ;// 21 1
int boostMinRadius[3]  ;// 22 1
int boostMaxRadius[3]  ;// 23 1
int taylorTracking[3]  ;// 24 1
int trackingSize[3]    ;// 25 1
int trackingSpeed[3]   ;// 26 1
int trackingBoostOnFire[3];// 27 1
int trackingBoostSize[3];// 28 1
int trackingBoostSpd[3];// 29 1
int ceorinShape[3]     ;// 30 1
int leftStickStrength[3];// 31 1
int leftStickSpeed[3]  ;// 32 1
int rateOfFire[3]      ;// 33 2
int legacyARH          ;// 34 2
int handGunVertical[3] ;// 35 2
int akimboRateOfFire[3];// 36 2
int burstHoldTime[3];
int burstRestTime[3];
int mw2JumpDelay       ;// 37 2
int PingDelay          ;// 38 2
int holdBreathDelay[3] ;// 39 3
int quickScopeDelay    ;// 40 3
int gWalkDelayTime     ;// 41 3
int slideDelayMw2      ;// 42 3
int GeneralSens        ;// 43 3
int AdsSens            ;// 44 3
int FireSens           ;// 45 3
int AdsFireSens        ;// 46 3
//====================================================================
define MaxAmountOfMODs = 55;
//====================================================================
//====================================================================
define maxAmountOfCategories = 6; 
//====================================================================
/*
Mod Activations 
*/
int standardARFireType[3];
int progressiveARFireType[3];
int taylorFireType[3];
int rotationalFireType[3];
int rapidFireType[3];
int burstFireType[3];
int quickScopeActivation[3];
int snakeShotActivationmw2[3];
int crouchShotActivation[3];
int jumpShotActivation[3];
int dropShotmw2FireType[3];
int weaponSwapActivation;
const string mainmenuNames[] = {"AntiRecoil","Aim Assist","Fire Mods","Misc Mods","Controller Config","Profiles","Quick Toggles","" }
enum { 
mainMenuAR,mainMenuAA,mainMenuFR,mainMenuMisc,mainMenuController,mainMenuProfiles,mainMenuQT
///  0         1           2            3           4                5                 6             7                         
} 
const uint8 mainMenuLimits[][] = {
{ 0 , 2 }, // 0  AntiRecoil
{ 3 , 5 }, // 1  AimAssist
{ 6 , 14 }, // 2  Fire Mods
{ 15 , 27 }, // 3  Misc Mods
{ 28 , 37 }, // 4  Controller Config
{ 38 , 43 }, // 5  Profiles
{ 44 , 55 }  // 6  QuickToggles
}
                    
const int16 valRangeIdx[][] = {
// ValRangeMin - ValRangeMax - Editables            ProfileBtn   TogStr
{        0     ,       1     ,       1     ,  0,  1,  0,     1	,	 0	}, // 0  antiRecoilBasic
{        2     ,       5     ,       1     ,  0,  1,  0,     1	,	 0	}, // 1  antiRecoilPolar
{        6     ,      12     ,       1     ,  0,  1,  0,     1	,	 0	}, // 2  antiRecoilAdvanced
{        0     ,       0     ,       0     ,  0,  1,  0,     1	,	 0	}, // 3  adminAimAssistValues
{       13     ,      29     ,       1     ,  0,  1,  0,     1	,	 0	}, // 4  aimAssist
{       30     ,      32     ,       1     ,  0,  1,  0,     1	,	 0	}, // 5  rotationalAA
{       33     ,      35     ,       1     ,  0,  1,  0,     1	,	 0	}, // 6  toggleRapidFire
{       36     ,      36     ,       1     ,  0,  1,  0,     1	,	 0	}, // 7  toggleAkimbo
{       37     ,      38     ,       1     ,  0,  1,  0,     1	,	 0	}, // 8  toggleBurstFire
{        0     ,       0     ,       0     ,  0,  1,  0,     1	,   0	}, // 8  dropShotmw2
{        0     ,       0     ,       0     ,  0,  1,  0,     1	,   0	}, // 9  mw2SnakeShot
{        0     ,       0     ,       0     ,  0,  1,  0,     1	,	 0	}, // 10 crouchShot
{       39     ,      39     ,       1     ,  0,  1,  0,     1	,	 0	}, // 11 jumpShot
{        0     ,       0     ,       0     ,  0,  1,  0,     1	,	 1	}, // 12 autoAim
{       40     ,      40     ,       1     ,  0,  0,  0,     0	,	 1	}, // 13 enemyPing
{       41     ,      41     ,       1     ,  0,  1,  0,     1	,	 0	}, // 14 holdBreath
{       42     ,      42     ,       1     ,  0,  1,  0,     1	,   0	}, // 15 quickScope
{        0     ,       0     ,       0     ,  0,  1,  0,     1	,   1	}, // 16 silentShot
{       43     ,      43     ,       1     ,  0,  0,  0,     0	,   1	}, // 17 mw2GWalk
{       44     ,      44     ,       1     ,  0,  0,  0,     0	,   0	}, // 18 cancelSlideMw2
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 19 bunnyHop
{        0     ,       0     ,       0     ,  0,  1,  0,     1	,	1	}, // 20 fastMelee
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1   }, // 21 snakePlate
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 22 vmSpeed
{       45     ,      48     ,       1     ,  0,  0,  0,     0	,   1	}, // 23 customSens
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 24 tacSprint
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 25 dolphinCancel
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   0	}, //    weaponSwap
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   0	}, // 26 buttonLayouts
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   0	}, // 27 stickLayouts
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 28 useInverted
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 29 blockRumble
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 30 hairTriggers
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 31 SwapPS4Buttons
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 31 
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 32 
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 33 
{        0     ,       0     ,       0     ,  0,  0,  0,     0	,   1	}, // 34 
{        0     ,       0     ,       0     ,  1,  0,  0,     0	,   0	}, // 35 
{        0     ,       0     ,       0     ,  1,  0,  0,     0	,   0	}, // 36 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 37 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 38 
{        0     ,       0     ,       0     ,  1,  1,  1,     1	,   0	}, // 39 profileLED
{        0     ,       0     ,       0     ,  1,  1,  1,     1	,   0	}, // 40 weaponName
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 41 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 42 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 43 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 44 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 45 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 46 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 47 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 48 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 49 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 50 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}, // 50 
{        0     ,       0     ,       0     ,  1,  0,  1,     0	,   0	}  // 50 
}// end of valRangeIdx 
                    
const uint8 toggleMax[] = {
2, // 0  antiRecoilBasic
2, // 1  antiRecoilPolar
3, // 2  antiRecoilAdvanced
55, //3  adminAimAssistValues
3, // 4  aimAssist
1, // 5  rotationalAA
1, // 6  toggleRapidFire
2, // 7  toggleAkimbo
1, // 8  toggleBurstFire
1, // 8  dropShotmw2
1, // 9  mw2SnakeShot
1, // 10 crouchShot
1, // 11 jumpShot
1, // 12 autoAim
1, // 13 enemyPing
2, // 14 holdBreath
1, // 15 quickScope
1, // 16 silentShot
1, // 17 mw2GWalk
2, // 18 cancelSlideMw2
1, // 19 bunnyHop
2, // 20 fastMelee
1, // 21 snakePlate
3, // 22 vmSpeed
1, // 23 customSens
1, // 24 tacSprint
1, // 25 dolphinCancel
1, //    weaponSwap
21, // 26 buttonLayouts
3, // 27 stickLayouts
1, // 28 useInverted
1, // 29 blockRumble
1, // 30 hairTriggers
1, // 31 SwapShare/Menu
1, // 31 
1, // 32 
25,// 33 
25,// 34 
1, // 35 
1, // 36 
1, // 37 
1, // 38 
1, // 39 profileLED 
8, // 40 weaponName
1, // 41 
1, // 42 
1, // 43 
1, // 44 
1, // 45 
1, // 46 
1, // 47 
1, // 48 
1, // 49 
1, // 49 
1, // 49 
1  // 50 
}

const int16 valuesMinMax[][] = {
//Min/Max/inc/dec             
{  -99,   99,    1,   10,  1,  1  }, //0  verticalStrength
{  -99,   99,    1,   10,  1,  1  }, //1  HorizontalStrength
{  -99,   99,    1,   10,  1,  1  }, //2  Vertical
{  -99,   99,    1,   10,  1,  1  }, //3  Horizontal
{    0, 5000,   10,  100,  1,  1  }, //4  doubleStrengthTime
{    0,   20,    1,   10,  0,  0  }, //5  deadzone
{  -99,   99,    1,   10,  1,  1  }, //6  VerticalStart
{  -99,   99,    1,   10,  1,  1  }, //7  VerticalMid
{  -99,   99,    1,   10,  1,  1  }, //8  VerticalEnd
{    0,   99,    1,   10,  1,  1  }, //9 VerticalTime
{  -99,   99,    1,   10,  1,  1  }, //10 HorizontalStart
{  -99,   99,    1,   10,  1,  1  }, //11 HorizontalEnd
{    0,   99,    1,   10,  1,  1  }, //12 HorizontalTime
{    0,    1,    1,   10,  1,  1  }, //13 aimType
{    0,    2,    1,   10,  1,  1  }, //14 aimAssistTypeRS
{    0,   11,    1,   10,  1,  1  }, //15 taylorShapes
{    0,   99,    1,   10,  1,  1  }, //16 radiusSize
{    0,   99,    1,   10,  1,  1  }, //17 adsSpeedAngle
{    0,   99,    1,   10,  1,  1  }, //18 speedAngle
{    0,    1,    1,   10,  1,  1  }, //19 spiralChange
{    0,    2,    1,   10,  1,  1  }, //20 boostOnFire
{    0,   99,    1,   10,  1,  1  }, //21 boostSpeed
{    0,   99,    1,   10,  1,  1  }, //22 boostMinRadius
{    0,   99,    1,   10,  1,  1  }, //23 boostMaxRadius
{    0,    3,    1,   10,  1,  1  }, //24 taylorTracking
{    0,   99,    1,   10,  1,  1  }, //25 trackingSize
{    0,   99,    1,   10,  1,  1  }, //26 trackingSpeed
{    0,    1,    1,   10,  1,  1  }, //27 trackingBoostOnFire
{    0,   99,    1,   10,  1,  1  }, //28 trackingBoostSize
{    0,   99,    1,   10,  1,  1  }, //29 trackingBoostSpd
{    0,    5,    1,   10,  1,  1  }, //30 ceorinShape
{    0,   99,    1,   10,  1,  1  }, //31 leftStickStrength
{    0,  100,   10,   10,  1,  1  }, //32 leftStickSpeed
{    0,   25,    1,   10,  1,  1  }, //33 rateOfFire
{    0,    2,    1,   10,  0,  0  }, //34 legacyARH
{  -99,   99,    1,   10,  1,  1  }, //35 handGunVertical
{    0,   25,    1,   10,  1,  1  }, //36 akimboRateOfFire
{    0,  900,   10,  100,  1,  1  }, //37 burstFireDelay
{    0,  900,   10,  100,  1,  1  }, //37 burstRestDelay
{    0,  500,   10,  100,  0,  0  }, //37 mw2JumpDel
{    0, 5000,   10,  100,  0,  0  }, //38 PingDelay
{    0, 5000,   10,  100,  1,  1  }, //39 holdBreathDelay
{    0,  900,   10,  100,  0,  0  }, //40 quickScopeDelay
{    0,  700,   10,  100,  0,  0  }, //41 gWalkDelayTime
{    0,  500,    1,   10,  0,  0  }, //42 slideDelayMw2
{    0,  327,    1,   10,  0,  0  }, //43 GeneralSens
{    0,  327,    1,   10,  0,  0  }, //44 AdsSens
{    0,  327,    1,   10,  0,  0  }, //45 FireSens
{    0,  327,    1,   10,  0,  0  }  //46 AdsFireSens
}      
      
/*  
==================================================================================================================
 Const String Arrays                                                                                       
==================================================================================================================
*/                                                                                                                
const string modNames[] = { 
"Legacy/Rumble","Polar v2.0","Advanced AR",
"Admin Values","Taylor Assist","Ceorin AA",
"Rapid Fire","Akimbo RF","Burst Fire","Drop Shot","Burpee Shot","Crouch Shot","Jump Shot","Auto Aim","Enemy Ping",
"Hold Breath","Quick Scope","Silent Shot","G Walk","Slide Cancel","Bunny Hop","Fast Melee","Snake Plate","Vm Speed","Taylor Sens","InfiniteTacSprint","Dolphin Cancel","Weapon Swap","Controller Layout","Stick Layout","Inverted","Block Rumble","HairTriggers","Swap Touch/Share","Button Remap 1","Button Remap 2","Unmap Button 1","Unmap Button 2","Profile Button","Resync Button","Custom Profile","Profile Switch","Profile Leds","Weapon Name","Rapid Fire QT","Akimbo RF QT","BurstFire QT","CrouchShot QT","JumpShot QT","HoldBreath QT","QuickScope QT","SilentScope QT","Fast Melee QT","Drop Shot QT","Burpee Shot QT","WeaponSwap QT","" };

const string valNames[] = { "Vertical","Horizontal","Vertical","Horizontal","Boost Time","Deadzone","Vert Start","Vert Mid","Vert End","Vert Time","Horiz Start","Horiz End","Horiz Time","Aim Assist Type","Curve Type","Shape","Radius","Ads Speed","Fire Speed","Spiral","Boost On Fire","Boost Speed","Boost Min Radius","Boost Max Radius","Taylor Tracking","Tracking Size","Tracking Speed","Tracking Boost","Tracking FireBoost","Tracking Fire Spd","LS Shape","LS Size","LS Speed","RPS","Recoil Type","Vertical","RPS","Hold Time","Release Time","Jump Delay","Ping Delay","HB Delay","QuickScope Delay","GWalk Delay","Slide Delay","General Sens","ADS Sens","FIRE Sens","ADS/FIRE Sens", "" };
const string antiRecoilBasic_Opt [] = { "Off","Legacy","Rumble", "" };
const string antiRecoilPolar_Opt [] = { "Off","Legacy","Rumble", "" };
const string antiRecoilAdvanced_Opt [] = { "Off","Legacy","Rumble","Hybrid", "" };
const string aimAssist_Opt [] = { "Off","TD21 v1","TD21 v2","TD21 v3", "" };
const string toggleAkimbo_Opt [] = { "Off","Semi","Auto", "" };
const string holdBreath_Opt [] = { "Off","Instant","Delayed", "" };
const string cancelSlideMw2_Opt [] = { "Off","Standard","Tactical", "" };
const string fastMelee_Opt [] = { "Off","Auto","Manual", "" };
const string vmSpeed_Opt [] = { "0","-2","-4","-6", "" };
const string buttonLayouts_Opt [] = { "Default","Tactical","Lefty","N0M4D/Charlie","N0M4D/Charlie Tac","N0M4D/Charlie Left","Bumper Jumper","Bumper Jumper Tac","1-Hand Gunslinger","Stick & Move","Brawler","Beast","Bumper Ping","Bumper Ping Tac","Default Flipped","Tactical Flipped","B.Jumper Flipped","B.JumprTac Flipped","Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped", "" };
const string stickLayouts_Opt [] = { "Default","Southpaw","Legacy","Legacy Southpaw", "" };
const string weaponName_Opt [] = { "Assault R","SMG","LMG","Sniper","Semi Auto R","ShotGun","HandGun","Launcher","Ground Loot", "" };
const string taylorShapes_Opt [] = { "Circle","T.Oval","W.Oval","Helix","Kitt","V.Flare","Tartan","Jupiter","Oscilirate","Rose","Atomic","Infinity", "" };
const string boostOnFire_Opt [] = { "Off","Normal Boost","Reduced Boost", "" };
const string taylorTracking_Opt [] = { "Off","Original","Dynamic Small","Dynamic Big", "" };
const string trackingBoostOnFire_Opt [] = { "Off","On", "" };
const string aimType_Opt [] = { "Circular","Square", "" };
const string aimAssistTypeRS_Opt [] = { "Standard","Dynamic","Elevated", "" };
const string spiralChange_Opt [] = { "Off","On", "" };
const string ceorinShape_Opt [] = { "Helix","Kitt","V.Flare","Tartan","Infinity","Circle", "" };
const string legacyARH_Opt [] = { "Off","Legacy","Rumble", "" };
const string aimShapeLinear[] = {"Diamond","T.Diamond","W.Diamond","Helix","Kitt","V.Flare","D.Tartan","D.Jupiter","D.Osclrate","D.Rose","D.Atomic","D.Infinity",""}; 
const string quickScopeOpt[]         = {"On Ads","Release On Ads",""};
const string arActivation[]          = {"Ads & Fire","Fire Only","Ads+Fire & Fire"}; 
const string aimAssistType[]         = {"Ads Or Fire","Ads & Fire","Fire Only","Ads&Fire Or Fire"}; 
const string snakeShotOpt []         = {"Fire Only","Ads & Fire","Ads+Fire+Crouch","Fire & Tap Crouch","Ads & Lethal"};//4
const string crouchShotOpt[]         = {"Fire Only","Ads & Fire","Ads+Fire+Crouch","Fire & Tap Crouch","Ads & Lethal"};//4
const string jumpShotOpt[]           = {"Fire Only","Ads & Fire","Ads+Fire+Jump"  ,"Fire & Tap Jump"  ,"Ads & Lethal"};
const string instaDropOpt[]          = {"Fire Only","Ads & Fire","Ads+Fire+Crouch","Fire & Tap Crouch","Ads & Lethal"}; 
const string handGunFireType[]       = {"Fire Only","Ads & Fire","Ads&Fire Or Fire","Ads & Lethal"};
const string adminAA[] = {"TD21 All Ranges","TD21 Aimbot" ,"Wayne0 OPM","Wayne0 S","CROW Uno","CROW Deux"  ,"CROW Tri"   ,"Ceorin LR"   ,"Ceorin SR"  ,"Ceorin OPM"     ,"Zkultra LR"    ,"Zkultra SR"    ,"Zkultra S","MattJK LR"  ,"MattJK SR","MattJK OPM","Scuba LR","Scuba SR",
               //             0        1         2          3          4           5             6           7                8               9              10             11         12         13        14        15
                        "Scuba GL" ,"Hstlr LR","Hstlr SR" ,"Hstlr S" ,"Doobz LR" ,"Doobz SR"    ,"Doobz OPM"    ,"Waffle OPM1"   ,"Waffle OPM2"     ,"Waffle OPM3"     ,"Braderz LR"    ,"Braderz SR" ,"PopN LR"  ,"PopN SR"  ,"PopN OPM" ,"Booba LR" ,"Booba SR" ,"Booba GL","KSC LR"  ,
                       
                        "KSC SR"   ,"KSC S"  ,"MikeS LR" ,"MikeS SR" ,"MikeS GL" ,"GodShadeOPM1","GodShadeOPM2","GodShadeOPM3","QuesoW LR","QuesoW SR","QuesoW GL","QiQue LR" ,"QiQue SR" ,"SIK LR"   ,"SIK SR"  ,"SIK OPM"  ,
                        
                        "MikeC LR" ,"MikeC SR","MikeC GL" ,""};
const string weaponSwapOpt[] = {"DoubleTap SwapBtn","QT Only Activation",""}; 
int rapidQT[3],akimboQT[3],crouchQT[3],jumpQT[3],hBreathQT[3],qScopeQT[3],sScopeQT[3],fMeleeQT[3],dropShotQT[3],mw2SnakeQT[3],wSwapQT[3];
int invertStick;
int handGunVert;
int angle,cosAngle,sinAngle,polarAngle;
int Positionv3;
int smartRumble,antirecoilStrength;
int HoldTime,RestTime;
int trackingAngleOne,trackingAngleTwo,trackingAngle;
int anglePosition,timer;
int CompleteTime;
int Time;
int HorizTime; 
int GenStr;
int fValueSens,fValue;
int antirecoilStrengthStandard;
int smartRumbleStandard;
int legacyRecoilStrength;
int PolarStart	 = 1000;
int PolarMid   	 = 1200;
int PolarAimAssist,RX,RY;
int handGunVertR;
int crouchShotActive;
int activateFastMelee;
int antirecoilBoostTimer;
int vertAntirecoilStart,vertAntirecoilMid,vertAntirecoilEnd; 
int horizAntirecoilStart,horizAntirecoilEnd;
int holdBreathTimer;
int runningThreshold = 80;
int leftStick;
int delayTime = 1100;
int dynamicTracking;
int aimAssistRadius; 
int jumpShotActive;
int gorillaWalk;
int loopSync,angleR,trackingAngleR;
int LX,LY,leftAngle,cosAngleL,sinAngleL;
int update;
int helixPosition,increase;
int innerSpiral,outerSpiral,x,y;
int cycleRefresh;
int timeInterval = 2;
int spiralPosition1,spiralPosition2,tartanTimerL,helixTimer;
int i;
int logVal;
int bufferIndex;
int charIndex,digitIndex;
int stringLength;
int highLight;
int AntirecoilVertical,AntirecoilHorizontal;
int sprintActive;
const string Toggle  []  = {"Off","On","TD21 Is The Best",""};
const string misc[]      = {"Choose Buttons","Template","Drive Mode","Activated","Disabled","Saved","ScottishTryHard","5.0 v1.04","Move RS for Color","Press R3 to Set",""};
const string profileId[] = {"Primary","Secondary","Custom Profile","Profile 4",""}; 

